{
    "test_buffer_new": "test_buffer_new() {\n  buffer_t *buf = buffer_new();\n  assert(BUFFER_DEFAULT_SIZE == buffer_size(buf));\n  assert(0 == buffer_length(buf));\n  buffer_free(buf);\n}\n",
    "equal": "equal(char *a, char *b) {\n  if (strcmp(a, b)) {\n    printf(\"\\n\");\n    printf(\"  expected: '%s'\\n\", a);\n    printf(\"    actual: '%s'\\n\", b);\n    printf(\"\\n\");\n    exit(1);\n  }\n",
    "test_buffer_slice__end_overflow": "test_buffer_slice__end_overflow() {\n  buffer_t *buf = buffer_new_with_copy(\"Tobi Ferret\");\n  buffer_t *a = buffer_slice(buf, 5, 1000);\n  equal(\"Tobi Ferret\", buffer_string(buf));\n  equal(\"Ferret\", buffer_string(a));\n  buffer_free(a);\n  buffer_free(buf);\n}\n",
    "test_buffer_slice": "test_buffer_slice() {\n  buffer_t *buf = buffer_new();\n  buffer_append(buf, \"Tobi Ferret\");\n\n  buffer_t *a = buffer_slice(buf, 2, 8);\n  equal(\"Tobi Ferret\", buffer_string(buf));\n  equal(\"bi Fer\", buffer_string(a));\n\n  buffer_free(buf);\n  buffer_free(a);\n}\n",
    "test_buffer_append": "test_buffer_append() {\n  buffer_t *buf = buffer_new();\n  assert(0 == buffer_append(buf, \"Hello\"));\n  assert(0 == buffer_append(buf, \" World\"));\n  assert(strlen(\"Hello World\") == buffer_length(buf));\n  equal(\"Hello World\", buffer_string(buf));\n  buffer_free(buf);\n}\n",
    "test_buffer_clear": "test_buffer_clear() {\n  buffer_t *buf = buffer_new_with_copy(\"Hello\");\n  assert(5 == buffer_length(buf));\n\n  buffer_clear(buf);\n  assert(0 == buffer_length(buf));\n  buffer_free(buf);\n}\n",
    "test_buffer_append_n": "test_buffer_append_n() {\n  buffer_t *buf = buffer_new();\n  assert(0 == buffer_append_n(buf, \"subway\", 3));\n  assert(0 == buffer_append_n(buf, \"marines\", 6));\n  assert(strlen(\"submarine\") == buffer_length(buf));\n  equal(\"submarine\", buffer_string(buf));\n  buffer_free(buf);\n}\n",
    "main": "main(){\n  test_buffer_new();\n  test_buffer_new_with_size();\n  test_buffer_append();\n  test_buffer_append__grow();\n  test_buffer_append_n();\n  test_buffer_prepend();\n  test_buffer_slice();\n  test_buffer_slice__range_error();\n  test_buffer_slice__end();\n  test_buffer_slice__end_overflow();\n  test_buffer_equals();\n  test_buffer_formatting();\n  test_buffer_indexof();\n  test_buffer_fill();\n  test_buffer_clear();\n  test_buffer_trim();\n  test_buffer_compact();\n  test_buffer_prepend_issue_15();\n  printf(\"\\n  \\e[32m\\u2713 \\e[90mok\\e[0m\\n\\n\");\n  return 0;\n}\n",
    "test_buffer_formatting": "void test_buffer_formatting() {\n  buffer_t *buf = buffer_new();\n  int result = buffer_appendf(buf, \"%d %s\", 3, \"cow\");\n  assert(0 == result);\n  equal(\"3 cow\", buffer_string(buf));\n  result = buffer_appendf(buf, \" - 0x%08X\", 0xdeadbeef);\n  assert(0 == result);\n  equal(\"3 cow - 0xDEADBEEF\", buffer_string(buf));\n  buffer_free(buf);\n}\n",
    "test_buffer_prepend": "test_buffer_prepend() {\n  buffer_t *buf = buffer_new();\n  assert(0 == buffer_append(buf, \" World\"));\n  assert(0 == buffer_prepend(buf, \"Hello\"));\n  assert(strlen(\"Hello World\") == buffer_length(buf));\n  equal(\"Hello World\", buffer_string(buf));\n  buffer_free(buf);\n}\n",
    "test_buffer_indexof": "test_buffer_indexof() {\n  buffer_t *buf = buffer_new_with_copy(\"Tobi is a ferret\");\n\n  ssize_t i = buffer_indexof(buf, \"is\");\n  assert(5 == i);\n\n  i = buffer_indexof(buf, \"a\");\n  assert(8 == i);\n\n  i = buffer_indexof(buf, \"something\");\n  assert(-1 == i);\n\n  buffer_free(buf);\n}\n",
    "test_buffer_compact": "test_buffer_compact() {\n  buffer_t *buf = buffer_new_with_copy(\"  Hello\\n\\n \");\n  buffer_trim(buf);\n  assert(5 == buffer_length(buf));\n  assert(10 == buffer_size(buf));\n\n  ssize_t removed = buffer_compact(buf);\n  assert(5 == removed);\n  assert(5 == buffer_length(buf));\n  assert(5 == buffer_size(buf));\n  equal(\"Hello\", buffer_string(buf));\n\n  buffer_free(buf);\n}\n",
    "test_buffer_equals": "test_buffer_equals() {\n  buffer_t *a = buffer_new_with_copy(\"Hello\");\n  buffer_t *b = buffer_new_with_copy(\"Hello\");\n\n  assert(1 == buffer_equals(a, b));\n\n  buffer_append(b, \" World\");\n  assert(0 == buffer_equals(a, b));\n\n  buffer_free(a);\n  buffer_free(b);\n}\n",
    "test_buffer_append__grow": "test_buffer_append__grow() {\n  buffer_t *buf = buffer_new_with_size(10);\n  assert(0 == buffer_append(buf, \"Hello\"));\n  assert(0 == buffer_append(buf, \" tobi\"));\n  assert(0 == buffer_append(buf, \" was\"));\n  assert(0 == buffer_append(buf, \" here\"));\n\n  char *str = \"Hello tobi was here\";\n  equal(str, buffer_string(buf));\n  assert(1024 == buffer_size(buf));\n  assert(strlen(str) == buffer_length(buf));\n  buffer_free(buf);\n}\n",
    "test_buffer_trim": "test_buffer_trim() {\n  buffer_t *buf = buffer_new_with_copy(\"  Hello\\n\\n \");\n  buffer_trim(buf);\n  equal(\"Hello\", buffer_string(buf));\n  buffer_free(buf);\n\n  buf = buffer_new_with_copy(\"  Hello\\n\\n \");\n  buffer_trim_left(buf);\n  equal(\"Hello\\n\\n \", buffer_string(buf));\n  buffer_free(buf);\n\n  buf = buffer_new_with_copy(\"  Hello\\n\\n \");\n  buffer_trim_right(buf);\n  equal(\"  Hello\", buffer_string(buf));\n  buffer_free(buf);\n}\n",
    "test_buffer_prepend_issue_15": "test_buffer_prepend_issue_15() {\n  buffer_t *file = buffer_new();\n  assert(0 == buffer_append(file, \"layout.bk.html\"));\n  assert(0 == buffer_prepend(file, \"./example/\"));\n  assert(strlen(\"./example/layout.bk.html\") == buffer_length(file));\n  equal(\"./example/layout.bk.html\", buffer_string(file));\n  buffer_free(file);\n}\n",
    "test_buffer_new_with_size": "test_buffer_new_with_size() {\n  buffer_t *buf = buffer_new_with_size(1024);\n  assert(1024 == buffer_size(buf));\n  assert(0 == buffer_length(buf));\n  buffer_free(buf);\n}\n",
    "test_buffer_slice__range_error": "test_buffer_slice__range_error() {\n  buffer_t *buf = buffer_new_with_copy(\"Tobi Ferret\");\n  buffer_t *a = buffer_slice(buf, 10, 2);\n  assert(NULL == a);\n  buffer_free(buf);\n}\n",
    "test_buffer_slice__end": "test_buffer_slice__end() {\n  buffer_t *buf = buffer_new_with_copy(\"Tobi Ferret\");\n\n  buffer_t *a = buffer_slice(buf, 5, -1);\n  equal(\"Tobi Ferret\", buffer_string(buf));\n  equal(\"Ferret\", buffer_string(a));\n\n  buffer_t *b = buffer_slice(buf, 5, -3);\n  equal(\"Ferr\", buffer_string(b));\n\n  buffer_t *c = buffer_slice(buf, 8, -1);\n  equal(\"ret\", buffer_string(c));\n\n  buffer_free(buf);\n  buffer_free(a);\n  buffer_free(b);\n  buffer_free(c);\n}\n",
    "test_buffer_fill": "test_buffer_fill() {\n  buffer_t *buf = buffer_new_with_copy(\"Hello\");\n  assert(5 == buffer_length(buf));\n\n  buffer_fill(buf, 0);\n  assert(0 == buffer_length(buf));\n  buffer_free(buf);\n}\n",
    "extra": "{'BUFFER_DEFAULT_SIZE': '#define BUFFER_DEFAULT_SIZE 64', 'BUFFER_H': '#define BUFFER_H 1', 'buffer_string': '#define buffer_string(self) (self->data)', 'buffer_t': '} buffer_t;'} extract_info: [\n//\n// test.c\n//\n// Copyright (c) 2012 TJ Holowaychuk <tj@vision-media.ca>\n//\n\n#include <assert.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <string.h>\n\n//\n// buffer.h\n//\n// Copyright (c) 2012 TJ Holowaychuk <tj@vision-media.ca>\n//\n\n#ifndef BUFFER_H\n#define BUFFER_H 1\n\n#include <sys/types.h>\n\n/*\n * Default buffer size.\n */\n\n#ifndef BUFFER_DEFAULT_SIZE\n#define BUFFER_DEFAULT_SIZE 64\n#endif\n\n/*\n * Buffer struct.\n */\n\ntypedef struct {\n  size_t len;\n  char *alloc;\n  char *data;\n} buffer_t;\n\n// prototypes\n\nbuffer_t *\nbuffer_new();\n\nbuffer_t *\nbuffer_new_with_size(size_t n);\n\nbuffer_t *\nbuffer_new_with_string(char *str);\n\nbuffer_t *\nbuffer_new_with_string_length(char *str, size_t len);\n\nbuffer_t *\nbuffer_new_with_copy(char *str);\n\nsize_t\nbuffer_size(buffer_t *self);\n\nsize_t\nbuffer_length(buffer_t *self);\n\nvoid\nbuffer_free(buffer_t *self);\n\nint\nbuffer_prepend(buffer_t *self, char *str);\n\nint\nbuffer_append(buffer_t *self, const char *str);\n\nint\nbuffer_appendf(buffer_t *self, const char *format, ...);\n\nint\nbuffer_append_n(buffer_t *self, const char *str, size_t len);\n\nint\nbuffer_equals(buffer_t *self, buffer_t *other);\n\nssize_t\nbuffer_indexof(buffer_t *self, char *str);\n\nbuffer_t *\nbuffer_slice(buffer_t *self, size_t from, ssize_t to);\n\nssize_t\nbuffer_compact(buffer_t *self);\n\nvoid\nbuffer_fill(buffer_t *self, int c);\n\nvoid\nbuffer_clear(buffer_t *self);\n\nvoid\nbuffer_trim_left(buffer_t *self);\n\nvoid\nbuffer_trim_right(buffer_t *self);\n\nvoid\nbuffer_trim(buffer_t *self);\n\nvoid\nbuffer_print(buffer_t *self);\n\n#define buffer_string(self) (self->data)\n\n#endif\n\nvoid\n}\n\nvoid\n\nvoid\n\nvoid\n\nvoid\n\nvoid\n\nvoid\n\nvoid\n\nvoid\n\nvoid\n\nvoid\n\nvoid\n\n\nvoid\n\nvoid\n\nvoid\n\nvoid\n\nvoid\n\nvoid\n\nint\n]"
}