{"$message_type":"diagnostic","message":"unused imports: `AdvanceDataPos`, `CheckAllocation`, `GetValue`, `GetWriteConvertedData`, `SearchForID`, `SearchForKey`, `binn_buf_size`, `binn_get_ptr_type`, `binn_get_read_storage`, `binn_get_type_info`, `binn_get_write_storage`, `binn_is_valid_ex2`, `binn_list_blob`, `binn_list_get`, `binn_map_get_pair`, `binn_object_get`, `binn_object_str`, `binn_read_pair`, `binn_save_header`, `check_alloc_functions`, `copy_float_value`, `copy_int_value`, `copy_raw_value`, `copy_value`, `int_type`, `read_map_id`, `store_value`, `strlen2`, `type_family`, and `zero_value`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"tests/test_binn.rs","byte_start":30,"byte_end":43,"line_start":2,"line_end":2,"column_start":5,"column_end":18,"is_primary":true,"text":[{"text":"    binn_buf_size, binn_create, binn_free, binn_get_ptr_type, binn_get_read_storage,","highlight_start":5,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"tests/test_binn.rs","byte_start":69,"byte_end":86,"line_start":2,"line_end":2,"column_start":44,"column_end":61,"is_primary":true,"text":[{"text":"    binn_buf_size, binn_create, binn_free, binn_get_ptr_type, binn_get_read_storage,","highlight_start":44,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"tests/test_binn.rs","byte_start":88,"byte_end":109,"line_start":2,"line_end":2,"column_start":63,"column_end":84,"is_primary":true,"text":[{"text":"    binn_buf_size, binn_create, binn_free, binn_get_ptr_type, binn_get_read_storage,","highlight_start":63,"highlight_end":84}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"tests/test_binn.rs","byte_start":115,"byte_end":133,"line_start":3,"line_end":3,"column_start":5,"column_end":23,"is_primary":true,"text":[{"text":"    binn_get_type_info, binn_get_write_storage, binn_is_valid_ex, binn_is_valid_ex2, binn_list,","highlight_start":5,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"tests/test_binn.rs","byte_start":135,"byte_end":157,"line_start":3,"line_end":3,"column_start":25,"column_end":47,"is_primary":true,"text":[{"text":"    binn_get_type_info, binn_get_write_storage, binn_is_valid_ex, binn_is_valid_ex2, binn_list,","highlight_start":25,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"tests/test_binn.rs","byte_start":177,"byte_end":194,"line_start":3,"line_end":3,"column_start":67,"column_end":84,"is_primary":true,"text":[{"text":"    binn_get_type_info, binn_get_write_storage, binn_is_valid_ex, binn_is_valid_ex2, binn_list,","highlight_start":67,"highlight_end":84}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"tests/test_binn.rs","byte_start":211,"byte_end":225,"line_start":4,"line_end":4,"column_start":5,"column_end":19,"is_primary":true,"text":[{"text":"    binn_list_blob, binn_list_get, binn_list_get_value, binn_list_read, binn_malloc, binn_map,","highlight_start":5,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"tests/test_binn.rs","byte_start":227,"byte_end":240,"line_start":4,"line_end":4,"column_start":21,"column_end":34,"is_primary":true,"text":[{"text":"    binn_list_blob, binn_list_get, binn_list_get_value, binn_list_read, binn_malloc, binn_map,","highlight_start":21,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"tests/test_binn.rs","byte_start":306,"byte_end":323,"line_start":5,"line_end":5,"column_start":5,"column_end":22,"is_primary":true,"text":[{"text":"    binn_map_get_pair, binn_map_get_value, binn_map_read, binn_new, binn_object, binn_object_get,","highlight_start":5,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"tests/test_binn.rs","byte_start":383,"byte_end":398,"line_start":5,"line_end":5,"column_start":82,"column_end":97,"is_primary":true,"text":[{"text":"    binn_map_get_pair, binn_map_get_value, binn_map_read, binn_new, binn_object, binn_object_get,","highlight_start":82,"highlight_end":97}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"tests/test_binn.rs","byte_start":445,"byte_end":460,"line_start":6,"line_end":6,"column_start":46,"column_end":61,"is_primary":true,"text":[{"text":"    binn_object_get_value, binn_object_read, binn_object_str, binn_ptr, binn_read_pair,","highlight_start":46,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"tests/test_binn.rs","byte_start":472,"byte_end":486,"line_start":6,"line_end":6,"column_start":73,"column_end":87,"is_primary":true,"text":[{"text":"    binn_object_get_value, binn_object_read, binn_object_str, binn_ptr, binn_read_pair,","highlight_start":73,"highlight_end":87}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"tests/test_binn.rs","byte_start":492,"byte_end":508,"line_start":7,"line_end":7,"column_start":5,"column_end":21,"is_primary":true,"text":[{"text":"    binn_save_header, binn_size, binn_version, check_alloc_functions, copy_be16, copy_be32,","highlight_start":5,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"tests/test_binn.rs","byte_start":535,"byte_end":556,"line_start":7,"line_end":7,"column_start":48,"column_end":69,"is_primary":true,"text":[{"text":"    binn_save_header, binn_size, binn_version, check_alloc_functions, copy_be16, copy_be32,","highlight_start":48,"highlight_end":69}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"tests/test_binn.rs","byte_start":595,"byte_end":611,"line_start":8,"line_end":8,"column_start":16,"column_end":32,"is_primary":true,"text":[{"text":"    copy_be64, copy_float_value, copy_int_value, copy_raw_value, copy_value, int_type, read_map_id,","highlight_start":16,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"tests/test_binn.rs","byte_start":613,"byte_end":627,"line_start":8,"line_end":8,"column_start":34,"column_end":48,"is_primary":true,"text":[{"text":"    copy_be64, copy_float_value, copy_int_value, copy_raw_value, copy_value, int_type, read_map_id,","highlight_start":34,"highlight_end":48}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"tests/test_binn.rs","byte_start":629,"byte_end":643,"line_start":8,"line_end":8,"column_start":50,"column_end":64,"is_primary":true,"text":[{"text":"    copy_be64, copy_float_value, copy_int_value, copy_raw_value, copy_value, int_type, read_map_id,","highlight_start":50,"highlight_end":64}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"tests/test_binn.rs","byte_start":645,"byte_end":655,"line_start":8,"line_end":8,"column_start":66,"column_end":76,"is_primary":true,"text":[{"text":"    copy_be64, copy_float_value, copy_int_value, copy_raw_value, copy_value, int_type, read_map_id,","highlight_start":66,"highlight_end":76}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"tests/test_binn.rs","byte_start":657,"byte_end":665,"line_start":8,"line_end":8,"column_start":78,"column_end":86,"is_primary":true,"text":[{"text":"    copy_be64, copy_float_value, copy_int_value, copy_raw_value, copy_value, int_type, read_map_id,","highlight_start":78,"highlight_end":86}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"tests/test_binn.rs","byte_start":667,"byte_end":678,"line_start":8,"line_end":8,"column_start":88,"column_end":99,"is_primary":true,"text":[{"text":"    copy_be64, copy_float_value, copy_int_value, copy_raw_value, copy_value, int_type, read_map_id,","highlight_start":88,"highlight_end":99}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"tests/test_binn.rs","byte_start":684,"byte_end":695,"line_start":9,"line_end":9,"column_start":5,"column_end":16,"is_primary":true,"text":[{"text":"    store_value, strlen2, type_family, zero_value, AdvanceDataPos, Binn, CalcAllocation,","highlight_start":5,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"tests/test_binn.rs","byte_start":697,"byte_end":704,"line_start":9,"line_end":9,"column_start":18,"column_end":25,"is_primary":true,"text":[{"text":"    store_value, strlen2, type_family, zero_value, AdvanceDataPos, Binn, CalcAllocation,","highlight_start":18,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"tests/test_binn.rs","byte_start":706,"byte_end":717,"line_start":9,"line_end":9,"column_start":27,"column_end":38,"is_primary":true,"text":[{"text":"    store_value, strlen2, type_family, zero_value, AdvanceDataPos, Binn, CalcAllocation,","highlight_start":27,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"tests/test_binn.rs","byte_start":719,"byte_end":729,"line_start":9,"line_end":9,"column_start":40,"column_end":50,"is_primary":true,"text":[{"text":"    store_value, strlen2, type_family, zero_value, AdvanceDataPos, Binn, CalcAllocation,","highlight_start":40,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"tests/test_binn.rs","byte_start":731,"byte_end":745,"line_start":9,"line_end":9,"column_start":52,"column_end":66,"is_primary":true,"text":[{"text":"    store_value, strlen2, type_family, zero_value, AdvanceDataPos, Binn, CalcAllocation,","highlight_start":52,"highlight_end":66}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"tests/test_binn.rs","byte_start":773,"byte_end":788,"line_start":10,"line_end":10,"column_start":5,"column_end":20,"is_primary":true,"text":[{"text":"    CheckAllocation, GetValue, GetWriteConvertedData, IsValidBinnHeader, SearchForID, SearchForKey,","highlight_start":5,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"tests/test_binn.rs","byte_start":790,"byte_end":798,"line_start":10,"line_end":10,"column_start":22,"column_end":30,"is_primary":true,"text":[{"text":"    CheckAllocation, GetValue, GetWriteConvertedData, IsValidBinnHeader, SearchForID, SearchForKey,","highlight_start":22,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"tests/test_binn.rs","byte_start":800,"byte_end":821,"line_start":10,"line_end":10,"column_start":32,"column_end":53,"is_primary":true,"text":[{"text":"    CheckAllocation, GetValue, GetWriteConvertedData, IsValidBinnHeader, SearchForID, SearchForKey,","highlight_start":32,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"tests/test_binn.rs","byte_start":842,"byte_end":853,"line_start":10,"line_end":10,"column_start":74,"column_end":85,"is_primary":true,"text":[{"text":"    CheckAllocation, GetValue, GetWriteConvertedData, IsValidBinnHeader, SearchForID, SearchForKey,","highlight_start":74,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"tests/test_binn.rs","byte_start":855,"byte_end":867,"line_start":10,"line_end":10,"column_start":87,"column_end":99,"is_primary":true,"text":[{"text":"    CheckAllocation, GetValue, GetWriteConvertedData, IsValidBinnHeader, SearchForID, SearchForKey,","highlight_start":87,"highlight_end":99}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the unused imports","code":null,"level":"help","spans":[{"file_name":"tests/test_binn.rs","byte_start":30,"byte_end":45,"line_start":2,"line_end":2,"column_start":5,"column_end":20,"is_primary":true,"text":[{"text":"    binn_buf_size, binn_create, binn_free, binn_get_ptr_type, binn_get_read_storage,","highlight_start":5,"highlight_end":20}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"tests/test_binn.rs","byte_start":67,"byte_end":157,"line_start":2,"line_end":3,"column_start":42,"column_end":47,"is_primary":true,"text":[{"text":"    binn_buf_size, binn_create, binn_free, binn_get_ptr_type, binn_get_read_storage,","highlight_start":42,"highlight_end":85},{"text":"    binn_get_type_info, binn_get_write_storage, binn_is_valid_ex, binn_is_valid_ex2, binn_list,","highlight_start":1,"highlight_end":47}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"tests/test_binn.rs","byte_start":175,"byte_end":194,"line_start":3,"line_end":3,"column_start":65,"column_end":84,"is_primary":true,"text":[{"text":"    binn_get_type_info, binn_get_write_storage, binn_is_valid_ex, binn_is_valid_ex2, binn_list,","highlight_start":65,"highlight_end":84}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"tests/test_binn.rs","byte_start":205,"byte_end":240,"line_start":3,"line_end":4,"column_start":95,"column_end":34,"is_primary":true,"text":[{"text":"    binn_get_type_info, binn_get_write_storage, binn_is_valid_ex, binn_is_valid_ex2, binn_list,","highlight_start":95,"highlight_end":96},{"text":"    binn_list_blob, binn_list_get, binn_list_get_value, binn_list_read, binn_malloc, binn_map,","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"tests/test_binn.rs","byte_start":300,"byte_end":323,"line_start":4,"line_end":5,"column_start":94,"column_end":22,"is_primary":true,"text":[{"text":"    binn_list_blob, binn_list_get, binn_list_get_value, binn_list_read, binn_malloc, binn_map,","highlight_start":94,"highlight_end":95},{"text":"    binn_map_get_pair, binn_map_get_value, binn_map_read, binn_new, binn_object, binn_object_get,","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"tests/test_binn.rs","byte_start":381,"byte_end":398,"line_start":5,"line_end":5,"column_start":80,"column_end":97,"is_primary":true,"text":[{"text":"    binn_map_get_pair, binn_map_get_value, binn_map_read, binn_new, binn_object, binn_object_get,","highlight_start":80,"highlight_end":97}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"tests/test_binn.rs","byte_start":443,"byte_end":460,"line_start":6,"line_end":6,"column_start":44,"column_end":61,"is_primary":true,"text":[{"text":"    binn_object_get_value, binn_object_read, binn_object_str, binn_ptr, binn_read_pair,","highlight_start":44,"highlight_end":61}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"tests/test_binn.rs","byte_start":470,"byte_end":508,"line_start":6,"line_end":7,"column_start":71,"column_end":21,"is_primary":true,"text":[{"text":"    binn_object_get_value, binn_object_read, binn_object_str, binn_ptr, binn_read_pair,","highlight_start":71,"highlight_end":88},{"text":"    binn_save_header, binn_size, binn_version, check_alloc_functions, copy_be16, copy_be32,","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"tests/test_binn.rs","byte_start":533,"byte_end":556,"line_start":7,"line_end":7,"column_start":46,"column_end":69,"is_primary":true,"text":[{"text":"    binn_save_header, binn_size, binn_version, check_alloc_functions, copy_be16, copy_be32,","highlight_start":46,"highlight_end":69}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"tests/test_binn.rs","byte_start":593,"byte_end":745,"line_start":8,"line_end":9,"column_start":14,"column_end":66,"is_primary":true,"text":[{"text":"    copy_be64, copy_float_value, copy_int_value, copy_raw_value, copy_value, int_type, read_map_id,","highlight_start":14,"highlight_end":100},{"text":"    store_value, strlen2, type_family, zero_value, AdvanceDataPos, Binn, CalcAllocation,","highlight_start":1,"highlight_end":66}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"tests/test_binn.rs","byte_start":767,"byte_end":821,"line_start":9,"line_end":10,"column_start":88,"column_end":53,"is_primary":true,"text":[{"text":"    store_value, strlen2, type_family, zero_value, AdvanceDataPos, Binn, CalcAllocation,","highlight_start":88,"highlight_end":89},{"text":"    CheckAllocation, GetValue, GetWriteConvertedData, IsValidBinnHeader, SearchForID, SearchForKey,","highlight_start":1,"highlight_end":53}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"tests/test_binn.rs","byte_start":840,"byte_end":867,"line_start":10,"line_end":10,"column_start":72,"column_end":99,"is_primary":true,"text":[{"text":"    CheckAllocation, GetValue, GetWriteConvertedData, IsValidBinnHeader, SearchForID, SearchForKey,","highlight_start":72,"highlight_end":99}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `AdvanceDataPos`, `CheckAllocation`, `GetValue`, `GetWriteConvertedData`, `SearchForID`, `SearchForKey`, `binn_buf_size`, `binn_get_ptr_type`, `binn_get_read_storage`, `binn_get_type_info`, `binn_get_write_storage`, `binn_is_valid_ex2`, `binn_list_blob`, `binn_list_get`, `binn_map_get_pair`, `binn_object_get`, `binn_object_str`, `binn_read_pair`, `binn_save_header`, `check_alloc_functions`, `copy_float_value`, `copy_int_value`, `copy_raw_value`, `copy_value`, `int_type`, `read_map_id`, `store_value`, `strlen2`, `type_family`, and `zero_value`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/test_binn.rs:2:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    binn_buf_size, binn_create, binn_free, binn_get_ptr_type, binn_get_read_storage,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    binn_get_type_info, binn_get_write_storage, binn_is_valid_ex, binn_is_valid_ex2, binn_list,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    binn_list_blob, binn_list_get, binn_list_get_value, binn_list_read, binn_malloc, binn_map,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    binn_map_get_pair, binn_map_get_value, binn_map_read, binn_new, binn_object, binn_object_get,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m                                                            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    binn_object_get_value, binn_object_read, binn_object_str, binn_ptr, binn_read_pair,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    binn_save_header, binn_size, binn_version, check_alloc_functions, copy_be16, copy_be32,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    copy_be64, copy_float_value, copy_int_value, copy_raw_value, copy_value, int_type, read_map_id,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    store_value, strlen2, type_family, zero_value, AdvanceDataPos, Binn, CalcAllocation,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    CheckAllocation, GetValue, GetWriteConvertedData, IsValidBinnHeader, SearchForID, SearchForKey,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `buf`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"tests/test_binn.rs","byte_start":1379,"byte_end":1382,"line_start":33,"line_end":33,"column_start":27,"column_end":30,"is_primary":true,"text":[{"text":"pub fn i64toa(value: i64, buf: String, radix: i32) -> String {","highlight_start":27,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_variables)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"tests/test_binn.rs","byte_start":1379,"byte_end":1382,"line_start":33,"line_end":33,"column_start":27,"column_end":30,"is_primary":true,"text":[{"text":"pub fn i64toa(value: i64, buf: String, radix: i32) -> String {","highlight_start":27,"highlight_end":30}],"label":null,"suggested_replacement":"_buf","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `buf`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/test_binn.rs:33:27\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub fn i64toa(value: i64, buf: String, radix: i32) -> String {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_buf`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_variables)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable does not need to be mutable","code":{"code":"unused_mut","explanation":null},"level":"warning","spans":[{"file_name":"tests/test_binn.rs","byte_start":1606,"byte_end":1618,"line_start":42,"line_end":42,"column_start":9,"column_end":21,"is_primary":true,"text":[{"text":"    let mut abs_diff = (a - b).abs();","highlight_start":9,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_mut)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this `mut`","code":null,"level":"help","spans":[{"file_name":"tests/test_binn.rs","byte_start":1606,"byte_end":1610,"line_start":42,"line_end":42,"column_start":9,"column_end":13,"is_primary":true,"text":[{"text":"    let mut abs_diff = (a - b).abs();","highlight_start":9,"highlight_end":13}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable does not need to be mutable\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/test_binn.rs:42:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m42\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let mut abs_diff = (a - b).abs();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: remove this `mut`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_mut)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unnecessary transmute","code":{"code":"unnecessary_transmutes","explanation":null},"level":"warning","spans":[{"file_name":"tests/test_binn.rs","byte_start":2132,"byte_end":2154,"line_start":64,"line_end":64,"column_start":21,"column_end":43,"is_primary":true,"text":[{"text":"    aInt = unsafe { std::mem::transmute(A) };","highlight_start":21,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unnecessary_transmutes)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"replace this with","code":null,"level":"help","spans":[{"file_name":"tests/test_binn.rs","byte_start":2132,"byte_end":2154,"line_start":64,"line_end":64,"column_start":21,"column_end":43,"is_primary":true,"text":[{"text":"    aInt = unsafe { std::mem::transmute(A) };","highlight_start":21,"highlight_end":43}],"label":null,"suggested_replacement":"f32::to_bits(A).cast_signed()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary transmute\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/test_binn.rs:64:21\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m64\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    aInt = unsafe { std::mem::transmute(A) };\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace this with: `f32::to_bits(A).cast_signed()`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unnecessary_transmutes)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unnecessary transmute","code":{"code":"unnecessary_transmutes","explanation":null},"level":"warning","spans":[{"file_name":"tests/test_binn.rs","byte_start":2178,"byte_end":2200,"line_start":65,"line_end":65,"column_start":21,"column_end":43,"is_primary":true,"text":[{"text":"    bInt = unsafe { std::mem::transmute(B) };","highlight_start":21,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"replace this with","code":null,"level":"help","spans":[{"file_name":"tests/test_binn.rs","byte_start":2178,"byte_end":2200,"line_start":65,"line_end":65,"column_start":21,"column_end":43,"is_primary":true,"text":[{"text":"    bInt = unsafe { std::mem::transmute(B) };","highlight_start":21,"highlight_end":43}],"label":null,"suggested_replacement":"f32::to_bits(B).cast_signed()","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary transmute\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/test_binn.rs:65:21\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m65\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    bInt = unsafe { std::mem::transmute(B) };\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace this with: `f32::to_bits(B).cast_signed()`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable does not need to be mutable","code":{"code":"unused_mut","explanation":null},"level":"warning","spans":[{"file_name":"tests/test_binn.rs","byte_start":2037,"byte_end":2048,"line_start":60,"line_end":60,"column_start":9,"column_end":20,"is_primary":true,"text":[{"text":"    let mut intDiff: i32;","highlight_start":9,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove this `mut`","code":null,"level":"help","spans":[{"file_name":"tests/test_binn.rs","byte_start":2037,"byte_end":2041,"line_start":60,"line_end":60,"column_start":9,"column_end":13,"is_primary":true,"text":[{"text":"    let mut intDiff: i32;","highlight_start":9,"highlight_end":13}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable does not need to be mutable\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/test_binn.rs:60:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m60\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let mut intDiff: i32;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: remove this `mut`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `list`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"tests/test_binn.rs","byte_start":3259,"byte_end":3263,"line_start":110,"line_end":110,"column_start":33,"column_end":37,"is_primary":true,"text":[{"text":"    fn binn_list_add_int32_wrap(list: &mut Binn, value: i32) -> bool {","highlight_start":33,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"tests/test_binn.rs","byte_start":3259,"byte_end":3263,"line_start":110,"line_end":110,"column_start":33,"column_end":37,"is_primary":true,"text":[{"text":"    fn binn_list_add_int32_wrap(list: &mut Binn, value: i32) -> bool {","highlight_start":33,"highlight_end":37}],"label":null,"suggested_replacement":"_list","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `list`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/test_binn.rs:110:33\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m110\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn binn_list_add_int32_wrap(list: &mut Binn, value: i32) -> bool {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_list`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `value`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"tests/test_binn.rs","byte_start":3276,"byte_end":3281,"line_start":110,"line_end":110,"column_start":50,"column_end":55,"is_primary":true,"text":[{"text":"    fn binn_list_add_int32_wrap(list: &mut Binn, value: i32) -> bool {","highlight_start":50,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"tests/test_binn.rs","byte_start":3276,"byte_end":3281,"line_start":110,"line_end":110,"column_start":50,"column_end":55,"is_primary":true,"text":[{"text":"    fn binn_list_add_int32_wrap(list: &mut Binn, value: i32) -> bool {","highlight_start":50,"highlight_end":55}],"label":null,"suggested_replacement":"_value","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `value`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/test_binn.rs:110:50\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m110\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn binn_list_add_int32_wrap(list: &mut Binn, value: i32) -> bool {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_value`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `map`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"tests/test_binn.rs","byte_start":3349,"byte_end":3352,"line_start":114,"line_end":114,"column_start":32,"column_end":35,"is_primary":true,"text":[{"text":"    fn binn_map_set_int32_wrap(map: &mut Binn, key: i32, value: i32) -> bool {","highlight_start":32,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"tests/test_binn.rs","byte_start":3349,"byte_end":3352,"line_start":114,"line_end":114,"column_start":32,"column_end":35,"is_primary":true,"text":[{"text":"    fn binn_map_set_int32_wrap(map: &mut Binn, key: i32, value: i32) -> bool {","highlight_start":32,"highlight_end":35}],"label":null,"suggested_replacement":"_map","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `map`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/test_binn.rs:114:32\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m114\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn binn_map_set_int32_wrap(map: &mut Binn, key: i32, value: i32) -> bool {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_map`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `key`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"tests/test_binn.rs","byte_start":3365,"byte_end":3368,"line_start":114,"line_end":114,"column_start":48,"column_end":51,"is_primary":true,"text":[{"text":"    fn binn_map_set_int32_wrap(map: &mut Binn, key: i32, value: i32) -> bool {","highlight_start":48,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"tests/test_binn.rs","byte_start":3365,"byte_end":3368,"line_start":114,"line_end":114,"column_start":48,"column_end":51,"is_primary":true,"text":[{"text":"    fn binn_map_set_int32_wrap(map: &mut Binn, key: i32, value: i32) -> bool {","highlight_start":48,"highlight_end":51}],"label":null,"suggested_replacement":"_key","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `key`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/test_binn.rs:114:48\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m114\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn binn_map_set_int32_wrap(map: &mut Binn, key: i32, value: i32) -> bool {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_key`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `value`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"tests/test_binn.rs","byte_start":3375,"byte_end":3380,"line_start":114,"line_end":114,"column_start":58,"column_end":63,"is_primary":true,"text":[{"text":"    fn binn_map_set_int32_wrap(map: &mut Binn, key: i32, value: i32) -> bool {","highlight_start":58,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"tests/test_binn.rs","byte_start":3375,"byte_end":3380,"line_start":114,"line_end":114,"column_start":58,"column_end":63,"is_primary":true,"text":[{"text":"    fn binn_map_set_int32_wrap(map: &mut Binn, key: i32, value: i32) -> bool {","highlight_start":58,"highlight_end":63}],"label":null,"suggested_replacement":"_value","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `value`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/test_binn.rs:114:58\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m114\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn binn_map_set_int32_wrap(map: &mut Binn, key: i32, value: i32) -> bool {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_value`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `obj`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"tests/test_binn.rs","byte_start":3451,"byte_end":3454,"line_start":118,"line_end":118,"column_start":35,"column_end":38,"is_primary":true,"text":[{"text":"    fn binn_object_set_int32_wrap(obj: &mut Binn, key: &str, value: i32) -> bool {","highlight_start":35,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"tests/test_binn.rs","byte_start":3451,"byte_end":3454,"line_start":118,"line_end":118,"column_start":35,"column_end":38,"is_primary":true,"text":[{"text":"    fn binn_object_set_int32_wrap(obj: &mut Binn, key: &str, value: i32) -> bool {","highlight_start":35,"highlight_end":38}],"label":null,"suggested_replacement":"_obj","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `obj`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/test_binn.rs:118:35\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m118\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn binn_object_set_int32_wrap(obj: &mut Binn, key: &str, value: i32) -> bool {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_obj`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `key`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"tests/test_binn.rs","byte_start":3467,"byte_end":3470,"line_start":118,"line_end":118,"column_start":51,"column_end":54,"is_primary":true,"text":[{"text":"    fn binn_object_set_int32_wrap(obj: &mut Binn, key: &str, value: i32) -> bool {","highlight_start":51,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"tests/test_binn.rs","byte_start":3467,"byte_end":3470,"line_start":118,"line_end":118,"column_start":51,"column_end":54,"is_primary":true,"text":[{"text":"    fn binn_object_set_int32_wrap(obj: &mut Binn, key: &str, value: i32) -> bool {","highlight_start":51,"highlight_end":54}],"label":null,"suggested_replacement":"_key","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `key`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/test_binn.rs:118:51\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m118\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn binn_object_set_int32_wrap(obj: &mut Binn, key: &str, value: i32) -> bool {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_key`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `value`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"tests/test_binn.rs","byte_start":3478,"byte_end":3483,"line_start":118,"line_end":118,"column_start":62,"column_end":67,"is_primary":true,"text":[{"text":"    fn binn_object_set_int32_wrap(obj: &mut Binn, key: &str, value: i32) -> bool {","highlight_start":62,"highlight_end":67}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"tests/test_binn.rs","byte_start":3478,"byte_end":3483,"line_start":118,"line_end":118,"column_start":62,"column_end":67,"is_primary":true,"text":[{"text":"    fn binn_object_set_int32_wrap(obj: &mut Binn, key: &str, value: i32) -> bool {","highlight_start":62,"highlight_end":67}],"label":null,"suggested_replacement":"_value","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `value`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/test_binn.rs:118:62\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m118\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn binn_object_set_int32_wrap(obj: &mut Binn, key: &str, value: i32) -> bool {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_value`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `list`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"tests/test_binn.rs","byte_start":3553,"byte_end":3557,"line_start":122,"line_end":122,"column_start":34,"column_end":38,"is_primary":true,"text":[{"text":"    fn binn_list_add_double_wrap(list: &mut Binn, value: f64) -> bool {","highlight_start":34,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"tests/test_binn.rs","byte_start":3553,"byte_end":3557,"line_start":122,"line_end":122,"column_start":34,"column_end":38,"is_primary":true,"text":[{"text":"    fn binn_list_add_double_wrap(list: &mut Binn, value: f64) -> bool {","highlight_start":34,"highlight_end":38}],"label":null,"suggested_replacement":"_list","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `list`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/test_binn.rs:122:34\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m122\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn binn_list_add_double_wrap(list: &mut Binn, value: f64) -> bool {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_list`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `value`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"tests/test_binn.rs","byte_start":3570,"byte_end":3575,"line_start":122,"line_end":122,"column_start":51,"column_end":56,"is_primary":true,"text":[{"text":"    fn binn_list_add_double_wrap(list: &mut Binn, value: f64) -> bool {","highlight_start":51,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"tests/test_binn.rs","byte_start":3570,"byte_end":3575,"line_start":122,"line_end":122,"column_start":51,"column_end":56,"is_primary":true,"text":[{"text":"    fn binn_list_add_double_wrap(list: &mut Binn, value: f64) -> bool {","highlight_start":51,"highlight_end":56}],"label":null,"suggested_replacement":"_value","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `value`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/test_binn.rs:122:51\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m122\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn binn_list_add_double_wrap(list: &mut Binn, value: f64) -> bool {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_value`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `map`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"tests/test_binn.rs","byte_start":3644,"byte_end":3647,"line_start":126,"line_end":126,"column_start":33,"column_end":36,"is_primary":true,"text":[{"text":"    fn binn_map_set_double_wrap(map: &mut Binn, key: i32, value: f64) -> bool {","highlight_start":33,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"tests/test_binn.rs","byte_start":3644,"byte_end":3647,"line_start":126,"line_end":126,"column_start":33,"column_end":36,"is_primary":true,"text":[{"text":"    fn binn_map_set_double_wrap(map: &mut Binn, key: i32, value: f64) -> bool {","highlight_start":33,"highlight_end":36}],"label":null,"suggested_replacement":"_map","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `map`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/test_binn.rs:126:33\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m126\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn binn_map_set_double_wrap(map: &mut Binn, key: i32, value: f64) -> bool {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_map`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `key`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"tests/test_binn.rs","byte_start":3660,"byte_end":3663,"line_start":126,"line_end":126,"column_start":49,"column_end":52,"is_primary":true,"text":[{"text":"    fn binn_map_set_double_wrap(map: &mut Binn, key: i32, value: f64) -> bool {","highlight_start":49,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"tests/test_binn.rs","byte_start":3660,"byte_end":3663,"line_start":126,"line_end":126,"column_start":49,"column_end":52,"is_primary":true,"text":[{"text":"    fn binn_map_set_double_wrap(map: &mut Binn, key: i32, value: f64) -> bool {","highlight_start":49,"highlight_end":52}],"label":null,"suggested_replacement":"_key","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `key`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/test_binn.rs:126:49\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m126\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn binn_map_set_double_wrap(map: &mut Binn, key: i32, value: f64) -> bool {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_key`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `value`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"tests/test_binn.rs","byte_start":3670,"byte_end":3675,"line_start":126,"line_end":126,"column_start":59,"column_end":64,"is_primary":true,"text":[{"text":"    fn binn_map_set_double_wrap(map: &mut Binn, key: i32, value: f64) -> bool {","highlight_start":59,"highlight_end":64}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"tests/test_binn.rs","byte_start":3670,"byte_end":3675,"line_start":126,"line_end":126,"column_start":59,"column_end":64,"is_primary":true,"text":[{"text":"    fn binn_map_set_double_wrap(map: &mut Binn, key: i32, value: f64) -> bool {","highlight_start":59,"highlight_end":64}],"label":null,"suggested_replacement":"_value","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `value`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/test_binn.rs:126:59\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m126\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn binn_map_set_double_wrap(map: &mut Binn, key: i32, value: f64) -> bool {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_value`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `obj`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"tests/test_binn.rs","byte_start":3747,"byte_end":3750,"line_start":130,"line_end":130,"column_start":36,"column_end":39,"is_primary":true,"text":[{"text":"    fn binn_object_set_double_wrap(obj: &mut Binn, key: &str, value: f64) -> bool {","highlight_start":36,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"tests/test_binn.rs","byte_start":3747,"byte_end":3750,"line_start":130,"line_end":130,"column_start":36,"column_end":39,"is_primary":true,"text":[{"text":"    fn binn_object_set_double_wrap(obj: &mut Binn, key: &str, value: f64) -> bool {","highlight_start":36,"highlight_end":39}],"label":null,"suggested_replacement":"_obj","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `obj`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/test_binn.rs:130:36\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m130\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn binn_object_set_double_wrap(obj: &mut Binn, key: &str, value: f64) -> bool {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_obj`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `key`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"tests/test_binn.rs","byte_start":3763,"byte_end":3766,"line_start":130,"line_end":130,"column_start":52,"column_end":55,"is_primary":true,"text":[{"text":"    fn binn_object_set_double_wrap(obj: &mut Binn, key: &str, value: f64) -> bool {","highlight_start":52,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"tests/test_binn.rs","byte_start":3763,"byte_end":3766,"line_start":130,"line_end":130,"column_start":52,"column_end":55,"is_primary":true,"text":[{"text":"    fn binn_object_set_double_wrap(obj: &mut Binn, key: &str, value: f64) -> bool {","highlight_start":52,"highlight_end":55}],"label":null,"suggested_replacement":"_key","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `key`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/test_binn.rs:130:52\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m130\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn binn_object_set_double_wrap(obj: &mut Binn, key: &str, value: f64) -> bool {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_key`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `value`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"tests/test_binn.rs","byte_start":3774,"byte_end":3779,"line_start":130,"line_end":130,"column_start":63,"column_end":68,"is_primary":true,"text":[{"text":"    fn binn_object_set_double_wrap(obj: &mut Binn, key: &str, value: f64) -> bool {","highlight_start":63,"highlight_end":68}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"tests/test_binn.rs","byte_start":3774,"byte_end":3779,"line_start":130,"line_end":130,"column_start":63,"column_end":68,"is_primary":true,"text":[{"text":"    fn binn_object_set_double_wrap(obj: &mut Binn, key: &str, value: f64) -> bool {","highlight_start":63,"highlight_end":68}],"label":null,"suggested_replacement":"_value","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `value`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/test_binn.rs:130:63\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m130\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn binn_object_set_double_wrap(obj: &mut Binn, key: &str, value: f64) -> bool {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_value`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `list`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"tests/test_binn.rs","byte_start":3847,"byte_end":3851,"line_start":134,"line_end":134,"column_start":32,"column_end":36,"is_primary":true,"text":[{"text":"    fn binn_list_add_bool_wrap(list: &mut Binn, value: bool) -> bool {","highlight_start":32,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"tests/test_binn.rs","byte_start":3847,"byte_end":3851,"line_start":134,"line_end":134,"column_start":32,"column_end":36,"is_primary":true,"text":[{"text":"    fn binn_list_add_bool_wrap(list: &mut Binn, value: bool) -> bool {","highlight_start":32,"highlight_end":36}],"label":null,"suggested_replacement":"_list","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `list`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/test_binn.rs:134:32\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m134\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn binn_list_add_bool_wrap(list: &mut Binn, value: bool) -> bool {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_list`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `value`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"tests/test_binn.rs","byte_start":3864,"byte_end":3869,"line_start":134,"line_end":134,"column_start":49,"column_end":54,"is_primary":true,"text":[{"text":"    fn binn_list_add_bool_wrap(list: &mut Binn, value: bool) -> bool {","highlight_start":49,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"tests/test_binn.rs","byte_start":3864,"byte_end":3869,"line_start":134,"line_end":134,"column_start":49,"column_end":54,"is_primary":true,"text":[{"text":"    fn binn_list_add_bool_wrap(list: &mut Binn, value: bool) -> bool {","highlight_start":49,"highlight_end":54}],"label":null,"suggested_replacement":"_value","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `value`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/test_binn.rs:134:49\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m134\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn binn_list_add_bool_wrap(list: &mut Binn, value: bool) -> bool {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_value`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `map`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"tests/test_binn.rs","byte_start":3937,"byte_end":3940,"line_start":138,"line_end":138,"column_start":31,"column_end":34,"is_primary":true,"text":[{"text":"    fn binn_map_set_bool_wrap(map: &mut Binn, key: i32, value: bool) -> bool {","highlight_start":31,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"tests/test_binn.rs","byte_start":3937,"byte_end":3940,"line_start":138,"line_end":138,"column_start":31,"column_end":34,"is_primary":true,"text":[{"text":"    fn binn_map_set_bool_wrap(map: &mut Binn, key: i32, value: bool) -> bool {","highlight_start":31,"highlight_end":34}],"label":null,"suggested_replacement":"_map","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `map`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/test_binn.rs:138:31\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m138\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn binn_map_set_bool_wrap(map: &mut Binn, key: i32, value: bool) -> bool {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_map`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `key`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"tests/test_binn.rs","byte_start":3953,"byte_end":3956,"line_start":138,"line_end":138,"column_start":47,"column_end":50,"is_primary":true,"text":[{"text":"    fn binn_map_set_bool_wrap(map: &mut Binn, key: i32, value: bool) -> bool {","highlight_start":47,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"tests/test_binn.rs","byte_start":3953,"byte_end":3956,"line_start":138,"line_end":138,"column_start":47,"column_end":50,"is_primary":true,"text":[{"text":"    fn binn_map_set_bool_wrap(map: &mut Binn, key: i32, value: bool) -> bool {","highlight_start":47,"highlight_end":50}],"label":null,"suggested_replacement":"_key","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `key`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/test_binn.rs:138:47\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m138\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn binn_map_set_bool_wrap(map: &mut Binn, key: i32, value: bool) -> bool {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_key`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `value`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"tests/test_binn.rs","byte_start":3963,"byte_end":3968,"line_start":138,"line_end":138,"column_start":57,"column_end":62,"is_primary":true,"text":[{"text":"    fn binn_map_set_bool_wrap(map: &mut Binn, key: i32, value: bool) -> bool {","highlight_start":57,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"tests/test_binn.rs","byte_start":3963,"byte_end":3968,"line_start":138,"line_end":138,"column_start":57,"column_end":62,"is_primary":true,"text":[{"text":"    fn binn_map_set_bool_wrap(map: &mut Binn, key: i32, value: bool) -> bool {","highlight_start":57,"highlight_end":62}],"label":null,"suggested_replacement":"_value","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `value`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/test_binn.rs:138:57\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m138\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn binn_map_set_bool_wrap(map: &mut Binn, key: i32, value: bool) -> bool {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_value`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `obj`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"tests/test_binn.rs","byte_start":4039,"byte_end":4042,"line_start":142,"line_end":142,"column_start":34,"column_end":37,"is_primary":true,"text":[{"text":"    fn binn_object_set_bool_wrap(obj: &mut Binn, key: &str, value: bool) -> bool {","highlight_start":34,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"tests/test_binn.rs","byte_start":4039,"byte_end":4042,"line_start":142,"line_end":142,"column_start":34,"column_end":37,"is_primary":true,"text":[{"text":"    fn binn_object_set_bool_wrap(obj: &mut Binn, key: &str, value: bool) -> bool {","highlight_start":34,"highlight_end":37}],"label":null,"suggested_replacement":"_obj","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `obj`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/test_binn.rs:142:34\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m142\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn binn_object_set_bool_wrap(obj: &mut Binn, key: &str, value: bool) -> bool {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_obj`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `key`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"tests/test_binn.rs","byte_start":4055,"byte_end":4058,"line_start":142,"line_end":142,"column_start":50,"column_end":53,"is_primary":true,"text":[{"text":"    fn binn_object_set_bool_wrap(obj: &mut Binn, key: &str, value: bool) -> bool {","highlight_start":50,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"tests/test_binn.rs","byte_start":4055,"byte_end":4058,"line_start":142,"line_end":142,"column_start":50,"column_end":53,"is_primary":true,"text":[{"text":"    fn binn_object_set_bool_wrap(obj: &mut Binn, key: &str, value: bool) -> bool {","highlight_start":50,"highlight_end":53}],"label":null,"suggested_replacement":"_key","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `key`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/test_binn.rs:142:50\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m142\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn binn_object_set_bool_wrap(obj: &mut Binn, key: &str, value: bool) -> bool {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_key`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `value`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"tests/test_binn.rs","byte_start":4066,"byte_end":4071,"line_start":142,"line_end":142,"column_start":61,"column_end":66,"is_primary":true,"text":[{"text":"    fn binn_object_set_bool_wrap(obj: &mut Binn, key: &str, value: bool) -> bool {","highlight_start":61,"highlight_end":66}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"tests/test_binn.rs","byte_start":4066,"byte_end":4071,"line_start":142,"line_end":142,"column_start":61,"column_end":66,"is_primary":true,"text":[{"text":"    fn binn_object_set_bool_wrap(obj: &mut Binn, key: &str, value: bool) -> bool {","highlight_start":61,"highlight_end":66}],"label":null,"suggested_replacement":"_value","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `value`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/test_binn.rs:142:61\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m142\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn binn_object_set_bool_wrap(obj: &mut Binn, key: &str, value: bool) -> bool {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_value`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `ptr`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"tests/test_binn.rs","byte_start":6796,"byte_end":6799,"line_start":237,"line_end":237,"column_start":9,"column_end":12,"is_primary":true,"text":[{"text":"    let ptr: Vec<u8> = Vec::new();","highlight_start":9,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"tests/test_binn.rs","byte_start":6796,"byte_end":6799,"line_start":237,"line_end":237,"column_start":9,"column_end":12,"is_primary":true,"text":[{"text":"    let ptr: Vec<u8> = Vec::new();","highlight_start":9,"highlight_end":12}],"label":null,"suggested_replacement":"_ptr","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `ptr`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/test_binn.rs:237:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m237\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let ptr: Vec<u8> = Vec::new();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_ptr`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"value assigned to `buf` is never read","code":{"code":"unused_assignments","explanation":null},"level":"warning","spans":[{"file_name":"tests/test_binn.rs","byte_start":7464,"byte_end":7467,"line_start":256,"line_end":256,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"    let mut buf: String = String::with_capacity(256);","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"maybe it is overwritten before being read?","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(unused_assignments)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: value assigned to `buf` is never read\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/test_binn.rs:256:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m256\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let mut buf: String = String::with_capacity(256);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: maybe it is overwritten before being read?\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_assignments)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"value assigned to `d1` is never read","code":{"code":"unused_assignments","explanation":null},"level":"warning","spans":[{"file_name":"tests/test_binn.rs","byte_start":7679,"byte_end":7681,"line_start":267,"line_end":267,"column_start":5,"column_end":7,"is_primary":true,"text":[{"text":"    d1 = 0.0;","highlight_start":5,"highlight_end":7}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"maybe it is overwritten before being read?","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: value assigned to `d1` is never read\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/test_binn.rs:267:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m267\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    d1 = 0.0;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: maybe it is overwritten before being read?\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"value assigned to `f1` is never read","code":{"code":"unused_assignments","explanation":null},"level":"warning","spans":[{"file_name":"tests/test_binn.rs","byte_start":7738,"byte_end":7740,"line_start":270,"line_end":270,"column_start":5,"column_end":7,"is_primary":true,"text":[{"text":"    f1 = 0.0;","highlight_start":5,"highlight_end":7}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"maybe it is overwritten before being read?","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: value assigned to `f1` is never read\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/test_binn.rs:270:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m270\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    f1 = 0.0;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: maybe it is overwritten before being read?\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `list`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"tests/test_binn.rs","byte_start":10328,"byte_end":10332,"line_start":364,"line_end":364,"column_start":22,"column_end":26,"is_primary":true,"text":[{"text":"    let list_wrap = |list: &mut Option<Binn>, value: i32| -> bool {","highlight_start":22,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"tests/test_binn.rs","byte_start":10328,"byte_end":10332,"line_start":364,"line_end":364,"column_start":22,"column_end":26,"is_primary":true,"text":[{"text":"    let list_wrap = |list: &mut Option<Binn>, value: i32| -> bool {","highlight_start":22,"highlight_end":26}],"label":null,"suggested_replacement":"_list","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `list`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/test_binn.rs:364:22\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m364\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let list_wrap = |list: &mut Option<Binn>, value: i32| -> bool {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_list`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `map`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"tests/test_binn.rs","byte_start":10542,"byte_end":10545,"line_start":370,"line_end":370,"column_start":21,"column_end":24,"is_primary":true,"text":[{"text":"    let map_wrap = |map: &mut Option<Binn>, id: i32, value: i32| -> bool {","highlight_start":21,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"tests/test_binn.rs","byte_start":10542,"byte_end":10545,"line_start":370,"line_end":370,"column_start":21,"column_end":24,"is_primary":true,"text":[{"text":"    let map_wrap = |map: &mut Option<Binn>, id: i32, value: i32| -> bool {","highlight_start":21,"highlight_end":24}],"label":null,"suggested_replacement":"_map","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `map`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/test_binn.rs:370:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m370\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let map_wrap = |map: &mut Option<Binn>, id: i32, value: i32| -> bool {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_map`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `id`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"tests/test_binn.rs","byte_start":10566,"byte_end":10568,"line_start":370,"line_end":370,"column_start":45,"column_end":47,"is_primary":true,"text":[{"text":"    let map_wrap = |map: &mut Option<Binn>, id: i32, value: i32| -> bool {","highlight_start":45,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"tests/test_binn.rs","byte_start":10566,"byte_end":10568,"line_start":370,"line_end":370,"column_start":45,"column_end":47,"is_primary":true,"text":[{"text":"    let map_wrap = |map: &mut Option<Binn>, id: i32, value: i32| -> bool {","highlight_start":45,"highlight_end":47}],"label":null,"suggested_replacement":"_id","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `id`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/test_binn.rs:370:45\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m370\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let map_wrap = |map: &mut Option<Binn>, id: i32, value: i32| -> bool {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_id`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `obj`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"tests/test_binn.rs","byte_start":10764,"byte_end":10767,"line_start":376,"line_end":376,"column_start":21,"column_end":24,"is_primary":true,"text":[{"text":"    let obj_wrap = |obj: &mut Option<Binn>, key: &str, value: i32| -> bool {","highlight_start":21,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"tests/test_binn.rs","byte_start":10764,"byte_end":10767,"line_start":376,"line_end":376,"column_start":21,"column_end":24,"is_primary":true,"text":[{"text":"    let obj_wrap = |obj: &mut Option<Binn>, key: &str, value: i32| -> bool {","highlight_start":21,"highlight_end":24}],"label":null,"suggested_replacement":"_obj","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `obj`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/test_binn.rs:376:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m376\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let obj_wrap = |obj: &mut Option<Binn>, key: &str, value: i32| -> bool {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_obj`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `key`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"tests/test_binn.rs","byte_start":10788,"byte_end":10791,"line_start":376,"line_end":376,"column_start":45,"column_end":48,"is_primary":true,"text":[{"text":"    let obj_wrap = |obj: &mut Option<Binn>, key: &str, value: i32| -> bool {","highlight_start":45,"highlight_end":48}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"tests/test_binn.rs","byte_start":10788,"byte_end":10791,"line_start":376,"line_end":376,"column_start":45,"column_end":48,"is_primary":true,"text":[{"text":"    let obj_wrap = |obj: &mut Option<Binn>, key: &str, value: i32| -> bool {","highlight_start":45,"highlight_end":48}],"label":null,"suggested_replacement":"_key","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `key`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/test_binn.rs:376:45\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m376\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let obj_wrap = |obj: &mut Option<Binn>, key: &str, value: i32| -> bool {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_key`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"value assigned to `vshort1` is never read","code":{"code":"unused_assignments","explanation":null},"level":"warning","spans":[{"file_name":"tests/test_binn.rs","byte_start":11815,"byte_end":11822,"line_start":410,"line_end":410,"column_start":13,"column_end":20,"is_primary":true,"text":[{"text":"    let mut vshort1: u16 = 0;","highlight_start":13,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"maybe it is overwritten before being read?","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: value assigned to `vshort1` is never read\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/test_binn.rs:410:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m410\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let mut vshort1: u16 = 0;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: maybe it is overwritten before being read?\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"value assigned to `vint1` is never read","code":{"code":"unused_assignments","explanation":null},"level":"warning","spans":[{"file_name":"tests/test_binn.rs","byte_start":11905,"byte_end":11910,"line_start":413,"line_end":413,"column_start":13,"column_end":18,"is_primary":true,"text":[{"text":"    let mut vint1: u32 = 0;","highlight_start":13,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"maybe it is overwritten before being read?","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: value assigned to `vint1` is never read\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/test_binn.rs:413:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m413\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let mut vint1: u32 = 0;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: maybe it is overwritten before being read?\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"value assigned to `vint2` is never read","code":{"code":"unused_assignments","explanation":null},"level":"warning","spans":[{"file_name":"tests/test_binn.rs","byte_start":11933,"byte_end":11938,"line_start":414,"line_end":414,"column_start":13,"column_end":18,"is_primary":true,"text":[{"text":"    let mut vint2: u32 = 0;","highlight_start":13,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"maybe it is overwritten before being read?","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: value assigned to `vint2` is never read\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/test_binn.rs:414:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m414\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let mut vint2: u32 = 0;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: maybe it is overwritten before being read?\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"value assigned to `vint3` is never read","code":{"code":"unused_assignments","explanation":null},"level":"warning","spans":[{"file_name":"tests/test_binn.rs","byte_start":11961,"byte_end":11966,"line_start":415,"line_end":415,"column_start":13,"column_end":18,"is_primary":true,"text":[{"text":"    let mut vint3: u32 = 0;","highlight_start":13,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"maybe it is overwritten before being read?","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: value assigned to `vint3` is never read\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/test_binn.rs:415:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m415\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let mut vint3: u32 = 0;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: maybe it is overwritten before being read?\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"value assigned to `value1` is never read","code":{"code":"unused_assignments","explanation":null},"level":"warning","spans":[{"file_name":"tests/test_binn.rs","byte_start":11989,"byte_end":11995,"line_start":416,"line_end":416,"column_start":13,"column_end":19,"is_primary":true,"text":[{"text":"    let mut value1: u64 = 0;","highlight_start":13,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"maybe it is overwritten before being read?","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: value assigned to `value1` is never read\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/test_binn.rs:416:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m416\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let mut value1: u64 = 0;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: maybe it is overwritten before being read?\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"value assigned to `size` is never read","code":{"code":"unused_assignments","explanation":null},"level":"warning","spans":[{"file_name":"tests/test_binn.rs","byte_start":16443,"byte_end":16447,"line_start":549,"line_end":549,"column_start":13,"column_end":17,"is_primary":true,"text":[{"text":"    let mut size: i32 = 0;","highlight_start":13,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"maybe it is overwritten before being read?","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: value assigned to `size` is never read\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/test_binn.rs:549:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m549\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let mut size: i32 = 0;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: maybe it is overwritten before being read?\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable does not need to be mutable","code":{"code":"unused_mut","explanation":null},"level":"warning","spans":[{"file_name":"tests/test_binn.rs","byte_start":16880,"byte_end":16887,"line_start":567,"line_end":567,"column_start":9,"column_end":16,"is_primary":true,"text":[{"text":"    let mut ptr = binn_malloc(FIX_SIZE);","highlight_start":9,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove this `mut`","code":null,"level":"help","spans":[{"file_name":"tests/test_binn.rs","byte_start":16880,"byte_end":16884,"line_start":567,"line_end":567,"column_start":9,"column_end":13,"is_primary":true,"text":[{"text":"    let mut ptr = binn_malloc(FIX_SIZE);","highlight_start":9,"highlight_end":13}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable does not need to be mutable\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/test_binn.rs:567:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m567\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let mut ptr = binn_malloc(FIX_SIZE);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: remove this `mut`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable does not need to be mutable","code":{"code":"unused_mut","explanation":null},"level":"warning","spans":[{"file_name":"tests/test_binn.rs","byte_start":16952,"byte_end":16960,"line_start":570,"line_end":570,"column_start":9,"column_end":17,"is_primary":true,"text":[{"text":"    let mut obj1 = binn_new(BINN_OBJECT, FIX_SIZE, Some(ptr.clone()));","highlight_start":9,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove this `mut`","code":null,"level":"help","spans":[{"file_name":"tests/test_binn.rs","byte_start":16952,"byte_end":16956,"line_start":570,"line_end":570,"column_start":9,"column_end":13,"is_primary":true,"text":[{"text":"    let mut obj1 = binn_new(BINN_OBJECT, FIX_SIZE, Some(ptr.clone()));","highlight_start":9,"highlight_end":13}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable does not need to be mutable\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/test_binn.rs:570:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m570\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let mut obj1 = binn_new(BINN_OBJECT, FIX_SIZE, Some(ptr.clone()));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: remove this `mut`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable does not need to be mutable","code":{"code":"unused_mut","explanation":null},"level":"warning","spans":[{"file_name":"tests/test_binn.rs","byte_start":18267,"byte_end":18276,"line_start":612,"line_end":612,"column_start":9,"column_end":18,"is_primary":true,"text":[{"text":"    let mut pblob = vec![55; blobsize as usize];","highlight_start":9,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove this `mut`","code":null,"level":"help","spans":[{"file_name":"tests/test_binn.rs","byte_start":18267,"byte_end":18271,"line_start":612,"line_end":612,"column_start":9,"column_end":13,"is_primary":true,"text":[{"text":"    let mut pblob = vec![55; blobsize as usize];","highlight_start":9,"highlight_end":13}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable does not need to be mutable\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/test_binn.rs:612:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m612\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let mut pblob = vec![55; blobsize as usize];\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: remove this `mut`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable does not need to be mutable","code":{"code":"unused_mut","explanation":null},"level":"warning","spans":[{"file_name":"tests/test_binn.rs","byte_start":20139,"byte_end":20148,"line_start":669,"line_end":669,"column_start":9,"column_end":18,"is_primary":true,"text":[{"text":"    let mut pblob = vec![55; blobsize];","highlight_start":9,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove this `mut`","code":null,"level":"help","spans":[{"file_name":"tests/test_binn.rs","byte_start":20139,"byte_end":20143,"line_start":669,"line_end":669,"column_start":9,"column_end":13,"is_primary":true,"text":[{"text":"    let mut pblob = vec![55; blobsize];","highlight_start":9,"highlight_end":13}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable does not need to be mutable\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/test_binn.rs:669:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m669\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let mut pblob = vec![55; blobsize];\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: remove this `mut`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable does not need to be mutable","code":{"code":"unused_mut","explanation":null},"level":"warning","spans":[{"file_name":"tests/test_binn.rs","byte_start":21349,"byte_end":21356,"line_start":715,"line_end":715,"column_start":9,"column_end":16,"is_primary":true,"text":[{"text":"    let mut ptr = vec![0; FIX_SIZE as usize];","highlight_start":9,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove this `mut`","code":null,"level":"help","spans":[{"file_name":"tests/test_binn.rs","byte_start":21349,"byte_end":21353,"line_start":715,"line_end":715,"column_start":9,"column_end":13,"is_primary":true,"text":[{"text":"    let mut ptr = vec![0; FIX_SIZE as usize];","highlight_start":9,"highlight_end":13}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable does not need to be mutable\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/test_binn.rs:715:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m715\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let mut ptr = vec![0; FIX_SIZE as usize];\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: remove this `mut`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `key`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"tests/test_binn.rs","byte_start":24383,"byte_end":24386,"line_start":817,"line_end":817,"column_start":44,"column_end":47,"is_primary":true,"text":[{"text":"pub fn binn_map_set_double(map: &mut Binn, key: i32, value: f64) -> bool {","highlight_start":44,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"tests/test_binn.rs","byte_start":24383,"byte_end":24386,"line_start":817,"line_end":817,"column_start":44,"column_end":47,"is_primary":true,"text":[{"text":"pub fn binn_map_set_double(map: &mut Binn, key: i32, value: f64) -> bool {","highlight_start":44,"highlight_end":47}],"label":null,"suggested_replacement":"_key","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `key`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/test_binn.rs:817:44\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m817\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub fn binn_map_set_double(map: &mut Binn, key: i32, value: f64) -> bool {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_key`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `key`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"tests/test_binn.rs","byte_start":24504,"byte_end":24507,"line_start":822,"line_end":822,"column_start":47,"column_end":50,"is_primary":true,"text":[{"text":"pub fn binn_object_set_double(obj: &mut Binn, key: &str, value: f64) -> bool {","highlight_start":47,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"tests/test_binn.rs","byte_start":24504,"byte_end":24507,"line_start":822,"line_end":822,"column_start":47,"column_end":50,"is_primary":true,"text":[{"text":"pub fn binn_object_set_double(obj: &mut Binn, key: &str, value: f64) -> bool {","highlight_start":47,"highlight_end":50}],"label":null,"suggested_replacement":"_key","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `key`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/test_binn.rs:822:47\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m822\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub fn binn_object_set_double(obj: &mut Binn, key: &str, value: f64) -> bool {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_key`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `key`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"tests/test_binn.rs","byte_start":24723,"byte_end":24726,"line_start":832,"line_end":832,"column_start":42,"column_end":45,"is_primary":true,"text":[{"text":"pub fn binn_map_set_bool(map: &mut Binn, key: i32, value: bool) -> bool {","highlight_start":42,"highlight_end":45}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"tests/test_binn.rs","byte_start":24723,"byte_end":24726,"line_start":832,"line_end":832,"column_start":42,"column_end":45,"is_primary":true,"text":[{"text":"pub fn binn_map_set_bool(map: &mut Binn, key: i32, value: bool) -> bool {","highlight_start":42,"highlight_end":45}],"label":null,"suggested_replacement":"_key","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `key`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/test_binn.rs:832:42\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m832\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub fn binn_map_set_bool(map: &mut Binn, key: i32, value: bool) -> bool {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_key`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `key`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"tests/test_binn.rs","byte_start":24835,"byte_end":24838,"line_start":837,"line_end":837,"column_start":45,"column_end":48,"is_primary":true,"text":[{"text":"pub fn binn_object_set_bool(obj: &mut Binn, key: &str, value: bool) -> bool {","highlight_start":45,"highlight_end":48}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"tests/test_binn.rs","byte_start":24835,"byte_end":24838,"line_start":837,"line_end":837,"column_start":45,"column_end":48,"is_primary":true,"text":[{"text":"pub fn binn_object_set_bool(obj: &mut Binn, key: &str, value: bool) -> bool {","highlight_start":45,"highlight_end":48}],"label":null,"suggested_replacement":"_key","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `key`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/test_binn.rs:837:45\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m837\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub fn binn_object_set_bool(obj: &mut Binn, key: &str, value: bool) -> bool {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_key`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `list`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"tests/test_binn.rs","byte_start":24929,"byte_end":24933,"line_start":842,"line_end":842,"column_start":26,"column_end":30,"is_primary":true,"text":[{"text":"pub fn binn_list_add_str(list: &mut Binn, value: &str) -> bool {","highlight_start":26,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"tests/test_binn.rs","byte_start":24929,"byte_end":24933,"line_start":842,"line_end":842,"column_start":26,"column_end":30,"is_primary":true,"text":[{"text":"pub fn binn_list_add_str(list: &mut Binn, value: &str) -> bool {","highlight_start":26,"highlight_end":30}],"label":null,"suggested_replacement":"_list","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `list`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/test_binn.rs:842:26\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m842\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub fn binn_list_add_str(list: &mut Binn, value: &str) -> bool {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_list`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `value`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"tests/test_binn.rs","byte_start":24946,"byte_end":24951,"line_start":842,"line_end":842,"column_start":43,"column_end":48,"is_primary":true,"text":[{"text":"pub fn binn_list_add_str(list: &mut Binn, value: &str) -> bool {","highlight_start":43,"highlight_end":48}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"tests/test_binn.rs","byte_start":24946,"byte_end":24951,"line_start":842,"line_end":842,"column_start":43,"column_end":48,"is_primary":true,"text":[{"text":"pub fn binn_list_add_str(list: &mut Binn, value: &str) -> bool {","highlight_start":43,"highlight_end":48}],"label":null,"suggested_replacement":"_value","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `value`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/test_binn.rs:842:43\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m842\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub fn binn_list_add_str(list: &mut Binn, value: &str) -> bool {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_value`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `map`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"tests/test_binn.rs","byte_start":25005,"byte_end":25008,"line_start":846,"line_end":846,"column_start":25,"column_end":28,"is_primary":true,"text":[{"text":"pub fn binn_map_set_str(map: &mut Binn, key: i32, value: &str) -> bool {","highlight_start":25,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"tests/test_binn.rs","byte_start":25005,"byte_end":25008,"line_start":846,"line_end":846,"column_start":25,"column_end":28,"is_primary":true,"text":[{"text":"pub fn binn_map_set_str(map: &mut Binn, key: i32, value: &str) -> bool {","highlight_start":25,"highlight_end":28}],"label":null,"suggested_replacement":"_map","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `map`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/test_binn.rs:846:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m846\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub fn binn_map_set_str(map: &mut Binn, key: i32, value: &str) -> bool {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_map`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `key`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"tests/test_binn.rs","byte_start":25021,"byte_end":25024,"line_start":846,"line_end":846,"column_start":41,"column_end":44,"is_primary":true,"text":[{"text":"pub fn binn_map_set_str(map: &mut Binn, key: i32, value: &str) -> bool {","highlight_start":41,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"tests/test_binn.rs","byte_start":25021,"byte_end":25024,"line_start":846,"line_end":846,"column_start":41,"column_end":44,"is_primary":true,"text":[{"text":"pub fn binn_map_set_str(map: &mut Binn, key: i32, value: &str) -> bool {","highlight_start":41,"highlight_end":44}],"label":null,"suggested_replacement":"_key","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `key`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/test_binn.rs:846:41\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m846\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub fn binn_map_set_str(map: &mut Binn, key: i32, value: &str) -> bool {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_key`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `value`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"tests/test_binn.rs","byte_start":25031,"byte_end":25036,"line_start":846,"line_end":846,"column_start":51,"column_end":56,"is_primary":true,"text":[{"text":"pub fn binn_map_set_str(map: &mut Binn, key: i32, value: &str) -> bool {","highlight_start":51,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"tests/test_binn.rs","byte_start":25031,"byte_end":25036,"line_start":846,"line_end":846,"column_start":51,"column_end":56,"is_primary":true,"text":[{"text":"pub fn binn_map_set_str(map: &mut Binn, key: i32, value: &str) -> bool {","highlight_start":51,"highlight_end":56}],"label":null,"suggested_replacement":"_value","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `value`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/test_binn.rs:846:51\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m846\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub fn binn_map_set_str(map: &mut Binn, key: i32, value: &str) -> bool {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_value`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `obj`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"tests/test_binn.rs","byte_start":25093,"byte_end":25096,"line_start":850,"line_end":850,"column_start":28,"column_end":31,"is_primary":true,"text":[{"text":"pub fn binn_object_set_str(obj: &mut Binn, key: &str, value: &str) -> bool {","highlight_start":28,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"tests/test_binn.rs","byte_start":25093,"byte_end":25096,"line_start":850,"line_end":850,"column_start":28,"column_end":31,"is_primary":true,"text":[{"text":"pub fn binn_object_set_str(obj: &mut Binn, key: &str, value: &str) -> bool {","highlight_start":28,"highlight_end":31}],"label":null,"suggested_replacement":"_obj","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `obj`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/test_binn.rs:850:28\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m850\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub fn binn_object_set_str(obj: &mut Binn, key: &str, value: &str) -> bool {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_obj`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `key`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"tests/test_binn.rs","byte_start":25109,"byte_end":25112,"line_start":850,"line_end":850,"column_start":44,"column_end":47,"is_primary":true,"text":[{"text":"pub fn binn_object_set_str(obj: &mut Binn, key: &str, value: &str) -> bool {","highlight_start":44,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"tests/test_binn.rs","byte_start":25109,"byte_end":25112,"line_start":850,"line_end":850,"column_start":44,"column_end":47,"is_primary":true,"text":[{"text":"pub fn binn_object_set_str(obj: &mut Binn, key: &str, value: &str) -> bool {","highlight_start":44,"highlight_end":47}],"label":null,"suggested_replacement":"_key","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `key`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/test_binn.rs:850:44\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m850\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub fn binn_object_set_str(obj: &mut Binn, key: &str, value: &str) -> bool {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_key`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `value`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"tests/test_binn.rs","byte_start":25120,"byte_end":25125,"line_start":850,"line_end":850,"column_start":55,"column_end":60,"is_primary":true,"text":[{"text":"pub fn binn_object_set_str(obj: &mut Binn, key: &str, value: &str) -> bool {","highlight_start":55,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"tests/test_binn.rs","byte_start":25120,"byte_end":25125,"line_start":850,"line_end":850,"column_start":55,"column_end":60,"is_primary":true,"text":[{"text":"pub fn binn_object_set_str(obj: &mut Binn, key: &str, value: &str) -> bool {","highlight_start":55,"highlight_end":60}],"label":null,"suggested_replacement":"_value","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `value`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/test_binn.rs:850:55\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m850\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub fn binn_object_set_str(obj: &mut Binn, key: &str, value: &str) -> bool {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_value`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `map`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"tests/test_binn.rs","byte_start":25180,"byte_end":25183,"line_start":854,"line_end":854,"column_start":26,"column_end":29,"is_primary":true,"text":[{"text":"pub fn binn_map_set_blob(map: &mut Binn, key: i32, value: &[u8]) -> bool {","highlight_start":26,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"tests/test_binn.rs","byte_start":25180,"byte_end":25183,"line_start":854,"line_end":854,"column_start":26,"column_end":29,"is_primary":true,"text":[{"text":"pub fn binn_map_set_blob(map: &mut Binn, key: i32, value: &[u8]) -> bool {","highlight_start":26,"highlight_end":29}],"label":null,"suggested_replacement":"_map","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `map`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/test_binn.rs:854:26\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m854\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub fn binn_map_set_blob(map: &mut Binn, key: i32, value: &[u8]) -> bool {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_map`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `key`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"tests/test_binn.rs","byte_start":25196,"byte_end":25199,"line_start":854,"line_end":854,"column_start":42,"column_end":45,"is_primary":true,"text":[{"text":"pub fn binn_map_set_blob(map: &mut Binn, key: i32, value: &[u8]) -> bool {","highlight_start":42,"highlight_end":45}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"tests/test_binn.rs","byte_start":25196,"byte_end":25199,"line_start":854,"line_end":854,"column_start":42,"column_end":45,"is_primary":true,"text":[{"text":"pub fn binn_map_set_blob(map: &mut Binn, key: i32, value: &[u8]) -> bool {","highlight_start":42,"highlight_end":45}],"label":null,"suggested_replacement":"_key","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `key`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/test_binn.rs:854:42\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m854\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub fn binn_map_set_blob(map: &mut Binn, key: i32, value: &[u8]) -> bool {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_key`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `value`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"tests/test_binn.rs","byte_start":25206,"byte_end":25211,"line_start":854,"line_end":854,"column_start":52,"column_end":57,"is_primary":true,"text":[{"text":"pub fn binn_map_set_blob(map: &mut Binn, key: i32, value: &[u8]) -> bool {","highlight_start":52,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"tests/test_binn.rs","byte_start":25206,"byte_end":25211,"line_start":854,"line_end":854,"column_start":52,"column_end":57,"is_primary":true,"text":[{"text":"pub fn binn_map_set_blob(map: &mut Binn, key: i32, value: &[u8]) -> bool {","highlight_start":52,"highlight_end":57}],"label":null,"suggested_replacement":"_value","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `value`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/test_binn.rs:854:52\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m854\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub fn binn_map_set_blob(map: &mut Binn, key: i32, value: &[u8]) -> bool {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_value`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `obj`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"tests/test_binn.rs","byte_start":25270,"byte_end":25273,"line_start":858,"line_end":858,"column_start":29,"column_end":32,"is_primary":true,"text":[{"text":"pub fn binn_object_set_blob(obj: &mut Binn, key: &str, value: &[u8]) -> bool {","highlight_start":29,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"tests/test_binn.rs","byte_start":25270,"byte_end":25273,"line_start":858,"line_end":858,"column_start":29,"column_end":32,"is_primary":true,"text":[{"text":"pub fn binn_object_set_blob(obj: &mut Binn, key: &str, value: &[u8]) -> bool {","highlight_start":29,"highlight_end":32}],"label":null,"suggested_replacement":"_obj","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `obj`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/test_binn.rs:858:29\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m858\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub fn binn_object_set_blob(obj: &mut Binn, key: &str, value: &[u8]) -> bool {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_obj`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `key`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"tests/test_binn.rs","byte_start":25286,"byte_end":25289,"line_start":858,"line_end":858,"column_start":45,"column_end":48,"is_primary":true,"text":[{"text":"pub fn binn_object_set_blob(obj: &mut Binn, key: &str, value: &[u8]) -> bool {","highlight_start":45,"highlight_end":48}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"tests/test_binn.rs","byte_start":25286,"byte_end":25289,"line_start":858,"line_end":858,"column_start":45,"column_end":48,"is_primary":true,"text":[{"text":"pub fn binn_object_set_blob(obj: &mut Binn, key: &str, value: &[u8]) -> bool {","highlight_start":45,"highlight_end":48}],"label":null,"suggested_replacement":"_key","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `key`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/test_binn.rs:858:45\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m858\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub fn binn_object_set_blob(obj: &mut Binn, key: &str, value: &[u8]) -> bool {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_key`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `value`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"tests/test_binn.rs","byte_start":25297,"byte_end":25302,"line_start":858,"line_end":858,"column_start":56,"column_end":61,"is_primary":true,"text":[{"text":"pub fn binn_object_set_blob(obj: &mut Binn, key: &str, value: &[u8]) -> bool {","highlight_start":56,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"tests/test_binn.rs","byte_start":25297,"byte_end":25302,"line_start":858,"line_end":858,"column_start":56,"column_end":61,"is_primary":true,"text":[{"text":"pub fn binn_object_set_blob(obj: &mut Binn, key: &str, value: &[u8]) -> bool {","highlight_start":56,"highlight_end":61}],"label":null,"suggested_replacement":"_value","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `value`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/test_binn.rs:858:56\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m858\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub fn binn_object_set_blob(obj: &mut Binn, key: &str, value: &[u8]) -> bool {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_value`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `list`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"tests/test_binn.rs","byte_start":25359,"byte_end":25363,"line_start":862,"line_end":862,"column_start":27,"column_end":31,"is_primary":true,"text":[{"text":"pub fn binn_list_add_blob(list: &mut Binn, value: &[u8]) -> bool {","highlight_start":27,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"tests/test_binn.rs","byte_start":25359,"byte_end":25363,"line_start":862,"line_end":862,"column_start":27,"column_end":31,"is_primary":true,"text":[{"text":"pub fn binn_list_add_blob(list: &mut Binn, value: &[u8]) -> bool {","highlight_start":27,"highlight_end":31}],"label":null,"suggested_replacement":"_list","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `list`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/test_binn.rs:862:27\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m862\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub fn binn_list_add_blob(list: &mut Binn, value: &[u8]) -> bool {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_list`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `value`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"tests/test_binn.rs","byte_start":25376,"byte_end":25381,"line_start":862,"line_end":862,"column_start":44,"column_end":49,"is_primary":true,"text":[{"text":"pub fn binn_list_add_blob(list: &mut Binn, value: &[u8]) -> bool {","highlight_start":44,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"tests/test_binn.rs","byte_start":25376,"byte_end":25381,"line_start":862,"line_end":862,"column_start":44,"column_end":49,"is_primary":true,"text":[{"text":"pub fn binn_list_add_blob(list: &mut Binn, value: &[u8]) -> bool {","highlight_start":44,"highlight_end":49}],"label":null,"suggested_replacement":"_value","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `value`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/test_binn.rs:862:44\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m862\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub fn binn_list_add_blob(list: &mut Binn, value: &[u8]) -> bool {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_value`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `id`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"tests/test_binn.rs","byte_start":25557,"byte_end":25559,"line_start":871,"line_end":871,"column_start":43,"column_end":45,"is_primary":true,"text":[{"text":"pub fn binn_map_set_int32(map: &mut Binn, id: i32, value: i32) -> bool {","highlight_start":43,"highlight_end":45}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"tests/test_binn.rs","byte_start":25557,"byte_end":25559,"line_start":871,"line_end":871,"column_start":43,"column_end":45,"is_primary":true,"text":[{"text":"pub fn binn_map_set_int32(map: &mut Binn, id: i32, value: i32) -> bool {","highlight_start":43,"highlight_end":45}],"label":null,"suggested_replacement":"_id","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `id`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/test_binn.rs:871:43\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m871\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub fn binn_map_set_int32(map: &mut Binn, id: i32, value: i32) -> bool {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_id`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `key`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"tests/test_binn.rs","byte_start":25669,"byte_end":25672,"line_start":876,"line_end":876,"column_start":46,"column_end":49,"is_primary":true,"text":[{"text":"pub fn binn_object_set_int32(obj: &mut Binn, key: &str, value: i32) -> bool {","highlight_start":46,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"tests/test_binn.rs","byte_start":25669,"byte_end":25672,"line_start":876,"line_end":876,"column_start":46,"column_end":49,"is_primary":true,"text":[{"text":"pub fn binn_object_set_int32(obj: &mut Binn, key: &str, value: i32) -> bool {","highlight_start":46,"highlight_end":49}],"label":null,"suggested_replacement":"_key","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `key`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/test_binn.rs:876:46\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m876\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub fn binn_object_set_int32(obj: &mut Binn, key: &str, value: i32) -> bool {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_key`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"function `AlmostEqualDoubles` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"tests/test_binn.rs","byte_start":1553,"byte_end":1571,"line_start":41,"line_end":41,"column_start":8,"column_end":26,"is_primary":true,"text":[{"text":"pub fn AlmostEqualDoubles(a: f64, b: f64) -> bool {","highlight_start":8,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(non_snake_case)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"tests/test_binn.rs","byte_start":1553,"byte_end":1571,"line_start":41,"line_end":41,"column_start":8,"column_end":26,"is_primary":true,"text":[{"text":"pub fn AlmostEqualDoubles(a: f64, b: f64) -> bool {","highlight_start":8,"highlight_end":26}],"label":null,"suggested_replacement":"almost_equal_doubles","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: function `AlmostEqualDoubles` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/test_binn.rs:41:8\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m41\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub fn AlmostEqualDoubles(a: f64, b: f64) -> bool {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `almost_equal_doubles`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(non_snake_case)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"function `AlmostEqualFloats` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"tests/test_binn.rs","byte_start":1925,"byte_end":1942,"line_start":57,"line_end":57,"column_start":8,"column_end":25,"is_primary":true,"text":[{"text":"pub fn AlmostEqualFloats(A: f32, B: f32, maxUlps: i32) -> bool {","highlight_start":8,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"tests/test_binn.rs","byte_start":1925,"byte_end":1942,"line_start":57,"line_end":57,"column_start":8,"column_end":25,"is_primary":true,"text":[{"text":"pub fn AlmostEqualFloats(A: f32, B: f32, maxUlps: i32) -> bool {","highlight_start":8,"highlight_end":25}],"label":null,"suggested_replacement":"almost_equal_floats","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: function `AlmostEqualFloats` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/test_binn.rs:57:8\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m57\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub fn AlmostEqualFloats(A: f32, B: f32, maxUlps: i32) -> bool {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `almost_equal_floats`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `A` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"tests/test_binn.rs","byte_start":1943,"byte_end":1944,"line_start":57,"line_end":57,"column_start":26,"column_end":27,"is_primary":true,"text":[{"text":"pub fn AlmostEqualFloats(A: f32, B: f32, maxUlps: i32) -> bool {","highlight_start":26,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"tests/test_binn.rs","byte_start":1943,"byte_end":1944,"line_start":57,"line_end":57,"column_start":26,"column_end":27,"is_primary":true,"text":[{"text":"pub fn AlmostEqualFloats(A: f32, B: f32, maxUlps: i32) -> bool {","highlight_start":26,"highlight_end":27}],"label":null,"suggested_replacement":"a","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `A` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/test_binn.rs:57:26\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m57\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub fn AlmostEqualFloats(A: f32, B: f32, maxUlps: i32) -> bool {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `a`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `B` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"tests/test_binn.rs","byte_start":1951,"byte_end":1952,"line_start":57,"line_end":57,"column_start":34,"column_end":35,"is_primary":true,"text":[{"text":"pub fn AlmostEqualFloats(A: f32, B: f32, maxUlps: i32) -> bool {","highlight_start":34,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"tests/test_binn.rs","byte_start":1951,"byte_end":1952,"line_start":57,"line_end":57,"column_start":34,"column_end":35,"is_primary":true,"text":[{"text":"pub fn AlmostEqualFloats(A: f32, B: f32, maxUlps: i32) -> bool {","highlight_start":34,"highlight_end":35}],"label":null,"suggested_replacement":"b","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `B` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/test_binn.rs:57:34\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m57\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub fn AlmostEqualFloats(A: f32, B: f32, maxUlps: i32) -> bool {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `b`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `maxUlps` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"tests/test_binn.rs","byte_start":1959,"byte_end":1966,"line_start":57,"line_end":57,"column_start":42,"column_end":49,"is_primary":true,"text":[{"text":"pub fn AlmostEqualFloats(A: f32, B: f32, maxUlps: i32) -> bool {","highlight_start":42,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"tests/test_binn.rs","byte_start":1959,"byte_end":1966,"line_start":57,"line_end":57,"column_start":42,"column_end":49,"is_primary":true,"text":[{"text":"pub fn AlmostEqualFloats(A: f32, B: f32, maxUlps: i32) -> bool {","highlight_start":42,"highlight_end":49}],"label":null,"suggested_replacement":"max_ulps","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `maxUlps` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/test_binn.rs:57:42\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m57\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub fn AlmostEqualFloats(A: f32, B: f32, maxUlps: i32) -> bool {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `max_ulps`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `aInt` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"tests/test_binn.rs","byte_start":1995,"byte_end":1999,"line_start":58,"line_end":58,"column_start":13,"column_end":17,"is_primary":true,"text":[{"text":"    let mut aInt: i32;","highlight_start":13,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"tests/test_binn.rs","byte_start":1995,"byte_end":1999,"line_start":58,"line_end":58,"column_start":13,"column_end":17,"is_primary":true,"text":[{"text":"    let mut aInt: i32;","highlight_start":13,"highlight_end":17}],"label":null,"suggested_replacement":"a_int","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `aInt` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/test_binn.rs:58:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m58\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let mut aInt: i32;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `a_int`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `bInt` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"tests/test_binn.rs","byte_start":2018,"byte_end":2022,"line_start":59,"line_end":59,"column_start":13,"column_end":17,"is_primary":true,"text":[{"text":"    let mut bInt: i32;","highlight_start":13,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"tests/test_binn.rs","byte_start":2018,"byte_end":2022,"line_start":59,"line_end":59,"column_start":13,"column_end":17,"is_primary":true,"text":[{"text":"    let mut bInt: i32;","highlight_start":13,"highlight_end":17}],"label":null,"suggested_replacement":"b_int","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `bInt` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/test_binn.rs:59:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m59\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let mut bInt: i32;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `b_int`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `intDiff` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"tests/test_binn.rs","byte_start":2041,"byte_end":2048,"line_start":60,"line_end":60,"column_start":13,"column_end":20,"is_primary":true,"text":[{"text":"    let mut intDiff: i32;","highlight_start":13,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"tests/test_binn.rs","byte_start":2041,"byte_end":2048,"line_start":60,"line_end":60,"column_start":13,"column_end":20,"is_primary":true,"text":[{"text":"    let mut intDiff: i32;","highlight_start":13,"highlight_end":20}],"label":null,"suggested_replacement":"int_diff","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `intDiff` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mtests/test_binn.rs:60:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m60\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let mut intDiff: i32;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `int_diff`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"80 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 80 warnings emitted\u001b[0m\n\n"}
