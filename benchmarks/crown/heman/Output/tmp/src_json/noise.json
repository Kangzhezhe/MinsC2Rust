{
    "fastFloor": "static inline int fastFloor(double x)\n{\n    int xi = (int) x;\n    return x < xi ? xi - 1 : xi;\n}\n",
    "open_simplex_noise_free": "void open_simplex_noise_free(struct osn_context* ctx)\n{\n    if (!ctx)\n        return;\n    if (ctx->perm) {\n        free(ctx->perm);\n        ctx->perm = NULL;\n    }\n    if (ctx->permGradIndex3D) {\n        free(ctx->permGradIndex3D);\n        ctx->permGradIndex3D = NULL;\n    }\n    free(ctx);\n}\n",
    "open_simplex_noise": "int open_simplex_noise(int64_t seed, struct osn_context** ctx)\n{\n    int rc;\n    int16_t source[256];\n    int i;\n    int16_t* perm;\n    int16_t* permGradIndex3D;\n\n    *ctx = malloc(sizeof(**ctx));\n    if (!(*ctx))\n        return -ENOMEM;\n    (*ctx)->perm = NULL;\n    (*ctx)->permGradIndex3D = NULL;\n\n    rc = allocate_perm(*ctx, 256, 256);\n    if (rc) {\n        free(*ctx);\n        return rc;\n    }\n\n    perm = (*ctx)->perm;\n    permGradIndex3D = (*ctx)->permGradIndex3D;\n\n    for (i = 0; i < 256; i++)\n        source[i] = (int16_t) i;\n    seed = seed * 6364136223846793005LL + 1442695040888963407LL;\n    seed = seed * 6364136223846793005LL + 1442695040888963407LL;\n    seed = seed * 6364136223846793005LL + 1442695040888963407LL;\n    for (i = 255; i >= 0; i--) {\n        seed = seed * 6364136223846793005LL + 1442695040888963407LL;\n        int r = (int) ((seed + 31) % (i + 1));\n        if (r < 0)\n            r += (i + 1);\n        perm[i] = source[r];\n        permGradIndex3D[i] =\n            (short) ((perm[i] % (ARRAYSIZE(gradients3D) / 3)) * 3);\n        source[r] = source[i];\n    }\n    return 0;\n}\n",
    "open_simplex_noise4": "double open_simplex_noise4(\n    struct osn_context* ctx, double x, double y, double z, double w)\n{\n    // Place input coordinates on simplectic honeycomb.\n    double stretchOffset = (x + y + z + w) * STRETCH_CONSTANT_4D;\n    double xs = x + stretchOffset;\n    double ys = y + stretchOffset;\n    double zs = z + stretchOffset;\n    double ws = w + stretchOffset;\n\n    // Floor to get simplectic honeycomb coordinates of rhombo-hypercube\n    // super-cell origin.\n    int xsb = fastFloor(xs);\n    int ysb = fastFloor(ys);\n    int zsb = fastFloor(zs);\n    int wsb = fastFloor(ws);\n\n    // Skew out to get actual coordinates of stretched rhombo-hypercube origin.\n    // We'll need these later.\n    double squishOffset = (xsb + ysb + zsb + wsb) * SQUISH_CONSTANT_4D;\n    double xb = xsb + squishOffset;\n    double yb = ysb + squishOffset;\n    double zb = zsb + squishOffset;\n    double wb = wsb + squishOffset;\n\n    // Compute simplectic honeycomb coordinates relative to rhombo-hypercube\n    // origin.\n    double xins = xs - xsb;\n    double yins = ys - ysb;\n    double zins = zs - zsb;\n    double wins = ws - wsb;\n\n    // Sum those together to get a value that determines which region we're in.\n    double inSum = xins + yins + zins + wins;\n\n    // Positions relative to origin point.\n    double dx0 = x - xb;\n    double dy0 = y - yb;\n    double dz0 = z - zb;\n    double dw0 = w - wb;\n\n    // We'll be defining these inside the next block and using them afterwards.\n    double dx_ext0, dy_ext0, dz_ext0, dw_ext0;\n    double dx_ext1, dy_ext1, dz_ext1, dw_ext1;\n    double dx_ext2, dy_ext2, dz_ext2, dw_ext2;\n    int xsv_ext0, ysv_ext0, zsv_ext0, wsv_ext0;\n    int xsv_ext1, ysv_ext1, zsv_ext1, wsv_ext1;\n    int xsv_ext2, ysv_ext2, zsv_ext2, wsv_ext2;\n\n    double value = 0;\n    if (inSum <= 1) {  // We're inside the pentachoron (4-Simplex) at (0,0,0,0)\n\n        // Determine which two of (0,0,0,1), (0,0,1,0), (0,1,0,0), (1,0,0,0) are\n        // closest.\n        int8_t aPoint = 0x01;\n        double aScore = xins;\n        int8_t bPoint = 0x02;\n        double bScore = yins;\n        if (aScore >= bScore && zins > bScore) {\n            bScore = zins;\n            bPoint = 0x04;\n        } else if (aScore < bScore && zins > aScore) {\n            aScore = zins;\n            aPoint = 0x04;\n        }\n        if (aScore >= bScore && wins > bScore) {\n            bScore = wins;\n            bPoint = 0x08;\n        } else if (aScore < bScore && wins > aScore) {\n            aScore = wins;\n            aPoint = 0x08;\n        }\n\n        // Now we determine the three lattice points not part of the pentachoron\n        // that may contribute.\n        // This depends on the closest two pentachoron vertices, including\n        // (0,0,0,0)\n        double uins = 1 - inSum;\n        if (uins > aScore || uins > bScore) {  //(0,0,0,0) is one of the closest\n            // two pentachoron vertices.\n            int8_t c = (bScore > aScore ? bPoint : aPoint);  // Our other\n            // closest vertex\n            // is the closest\n            // out of a and b.\n            if ((c & 0x01) == 0) {\n                xsv_ext0 = xsb - 1;\n                xsv_ext1 = xsv_ext2 = xsb;\n                dx_ext0 = dx0 + 1;\n                dx_ext1 = dx_ext2 = dx0;\n            } else {\n                xsv_ext0 = xsv_ext1 = xsv_ext2 = xsb + 1;\n                dx_ext0 = dx_ext1 = dx_ext2 = dx0 - 1;\n            }\n\n            if ((c & 0x02) == 0) {\n                ysv_ext0 = ysv_ext1 = ysv_ext2 = ysb;\n                dy_ext0 = dy_ext1 = dy_ext2 = dy0;\n                if ((c & 0x01) == 0x01) {\n                    ysv_ext0 -= 1;\n                    dy_ext0 += 1;\n                } else {\n                    ysv_ext1 -= 1;\n                    dy_ext1 += 1;\n                }\n            } else {\n                ysv_ext0 = ysv_ext1 = ysv_ext2 = ysb + 1;\n                dy_ext0 = dy_ext1 = dy_ext2 = dy0 - 1;\n            }\n\n            if ((c & 0x04) == 0) {\n                zsv_ext0 = zsv_ext1 = zsv_ext2 = zsb;\n                dz_ext0 = dz_ext1 = dz_ext2 = dz0;\n                if ((c & 0x03) != 0) {\n                    if ((c & 0x03) == 0x03) {\n                        zsv_ext0 -= 1;\n                        dz_ext0 += 1;\n                    } else {\n                        zsv_ext1 -= 1;\n                        dz_ext1 += 1;\n                    }\n                } else {\n                    zsv_ext2 -= 1;\n                    dz_ext2 += 1;\n                }\n            } else {\n                zsv_ext0 = zsv_ext1 = zsv_ext2 = zsb + 1;\n                dz_ext0 = dz_ext1 = dz_ext2 = dz0 - 1;\n            }\n\n            if ((c & 0x08) == 0) {\n                wsv_ext0 = wsv_ext1 = wsb;\n                wsv_ext2 = wsb - 1;\n                dw_ext0 = dw_ext1 = dw0;\n                dw_ext2 = dw0 + 1;\n            } else {\n                wsv_ext0 = wsv_ext1 = wsv_ext2 = wsb + 1;\n                dw_ext0 = dw_ext1 = dw_ext2 = dw0 - 1;\n            }\n        } else {  //(0,0,0,0) is not one of the closest two pentachoron\n            // vertices.\n            int8_t c = (int8_t)(aPoint | bPoint);  // Our three extra vertices\n            // are determined by the\n            // closest two.\n\n            if ((c & 0x01) == 0) {\n                xsv_ext0 = xsv_ext2 = xsb;\n                xsv_ext1 = xsb - 1;\n                dx_ext0 = dx0 - 2 * SQUISH_CONSTANT_4D;\n                dx_ext1 = dx0 + 1 - SQUISH_CONSTANT_4D;\n                dx_ext2 = dx0 - SQUISH_CONSTANT_4D;\n            } else {\n                xsv_ext0 = xsv_ext1 = xsv_ext2 = xsb + 1;\n                dx_ext0 = dx0 - 1 - 2 * SQUISH_CONSTANT_4D;\n                dx_ext1 = dx_ext2 = dx0 - 1 - SQUISH_CONSTANT_4D;\n            }\n\n            if ((c & 0x02) == 0) {\n                ysv_ext0 = ysv_ext1 = ysv_ext2 = ysb;\n                dy_ext0 = dy0 - 2 * SQUISH_CONSTANT_4D;\n                dy_ext1 = dy_ext2 = dy0 - SQUISH_CONSTANT_4D;\n                if ((c & 0x01) == 0x01) {\n                    ysv_ext1 -= 1;\n                    dy_ext1 += 1;\n                } else {\n                    ysv_ext2 -= 1;\n                    dy_ext2 += 1;\n                }\n            } else {\n                ysv_ext0 = ysv_ext1 = ysv_ext2 = ysb + 1;\n                dy_ext0 = dy0 - 1 - 2 * SQUISH_CONSTANT_4D;\n                dy_ext1 = dy_ext2 = dy0 - 1 - SQUISH_CONSTANT_4D;\n            }\n\n            if ((c & 0x04) == 0) {\n                zsv_ext0 = zsv_ext1 = zsv_ext2 = zsb;\n                dz_ext0 = dz0 - 2 * SQUISH_CONSTANT_4D;\n                dz_ext1 = dz_ext2 = dz0 - SQUISH_CONSTANT_4D;\n                if ((c & 0x03) == 0x03) {\n                    zsv_ext1 -= 1;\n                    dz_ext1 += 1;\n                } else {\n                    zsv_ext2 -= 1;\n                    dz_ext2 += 1;\n                }\n            } else {\n                zsv_ext0 = zsv_ext1 = zsv_ext2 = zsb + 1;\n                dz_ext0 = dz0 - 1 - 2 * SQUISH_CONSTANT_4D;\n                dz_ext1 = dz_ext2 = dz0 - 1 - SQUISH_CONSTANT_4D;\n            }\n\n            if ((c & 0x08) == 0) {\n                wsv_ext0 = wsv_ext1 = wsb;\n                wsv_ext2 = wsb - 1;\n                dw_ext0 = dw0 - 2 * SQUISH_CONSTANT_4D;\n                dw_ext1 = dw0 - SQUISH_CONSTANT_4D;\n                dw_ext2 = dw0 + 1 - SQUISH_CONSTANT_4D;\n            } else {\n                wsv_ext0 = wsv_ext1 = wsv_ext2 = wsb + 1;\n                dw_ext0 = dw0 - 1 - 2 * SQUISH_CONSTANT_4D;\n                dw_ext1 = dw_ext2 = dw0 - 1 - SQUISH_CONSTANT_4D;\n            }\n        }\n\n        // Contribution (0,0,0,0)\n        double attn0 = 2 - dx0 * dx0 - dy0 * dy0 - dz0 * dz0 - dw0 * dw0;\n        if (attn0 > 0) {\n            attn0 *= attn0;\n            value += attn0 * attn0 * extrapolate4(ctx, xsb + 0, ysb + 0,\n                                         zsb + 0, wsb + 0, dx0, dy0, dz0, dw0);\n        }\n\n        // Contribution (1,0,0,0)\n        double dx1 = dx0 - 1 - SQUISH_CONSTANT_4D;\n        double dy1 = dy0 - 0 - SQUISH_CONSTANT_4D;\n        double dz1 = dz0 - 0 - SQUISH_CONSTANT_4D;\n        double dw1 = dw0 - 0 - SQUISH_CONSTANT_4D;\n        double attn1 = 2 - dx1 * dx1 - dy1 * dy1 - dz1 * dz1 - dw1 * dw1;\n        if (attn1 > 0) {\n            attn1 *= attn1;\n            value += attn1 * attn1 * extrapolate4(ctx, xsb + 1, ysb + 0,\n                                         zsb + 0, wsb + 0, dx1, dy1, dz1, dw1);\n        }\n\n        // Contribution (0,1,0,0)\n        double dx2 = dx0 - 0 - SQUISH_CONSTANT_4D;\n        double dy2 = dy0 - 1 - SQUISH_CONSTANT_4D;\n        double dz2 = dz1;\n        double dw2 = dw1;\n        double attn2 = 2 - dx2 * dx2 - dy2 * dy2 - dz2 * dz2 - dw2 * dw2;\n        if (attn2 > 0) {\n            attn2 *= attn2;\n            value += attn2 * attn2 * extrapolate4(ctx, xsb + 0, ysb + 1,\n                                         zsb + 0, wsb + 0, dx2, dy2, dz2, dw2);\n        }\n\n        // Contribution (0,0,1,0)\n        double dx3 = dx2;\n        double dy3 = dy1;\n        double dz3 = dz0 - 1 - SQUISH_CONSTANT_4D;\n        double dw3 = dw1;\n        double attn3 = 2 - dx3 * dx3 - dy3 * dy3 - dz3 * dz3 - dw3 * dw3;\n        if (attn3 > 0) {\n            attn3 *= attn3;\n            value += attn3 * attn3 * extrapolate4(ctx, xsb + 0, ysb + 0,\n                                         zsb + 1, wsb + 0, dx3, dy3, dz3, dw3);\n        }\n\n        // Contribution (0,0,0,1)\n        double dx4 = dx2;\n        double dy4 = dy1;\n        double dz4 = dz1;\n        double dw4 = dw0 - 1 - SQUISH_CONSTANT_4D;\n        double attn4 = 2 - dx4 * dx4 - dy4 * dy4 - dz4 * dz4 - dw4 * dw4;\n        if (attn4 > 0) {\n            attn4 *= attn4;\n            value += attn4 * attn4 * extrapolate4(ctx, xsb + 0, ysb + 0,\n                                         zsb + 0, wsb + 1, dx4, dy4, dz4, dw4);\n        }\n    } else if (inSum >=\n               3) {  // We're inside the pentachoron (4-Simplex) at (1,1,1,1)\n        // Determine which two of (1,1,1,0), (1,1,0,1), (1,0,1,1), (0,1,1,1) are\n        // closest.\n        int8_t aPoint = 0x0E;\n        double aScore = xins;\n        int8_t bPoint = 0x0D;\n        double bScore = yins;\n        if (aScore <= bScore && zins < bScore) {\n            bScore = zins;\n            bPoint = 0x0B;\n        } else if (aScore > bScore && zins < aScore) {\n            aScore = zins;\n            aPoint = 0x0B;\n        }\n        if (aScore <= bScore && wins < bScore) {\n            bScore = wins;\n            bPoint = 0x07;\n        } else if (aScore > bScore && wins < aScore) {\n            aScore = wins;\n            aPoint = 0x07;\n        }\n\n        // Now we determine the three lattice points not part of the pentachoron\n        // that may contribute.\n        // This depends on the closest two pentachoron vertices, including\n        // (0,0,0,0)\n        double uins = 4 - inSum;\n        if (uins < aScore || uins < bScore) {  //(1,1,1,1) is one of the closest\n            // two pentachoron vertices.\n            int8_t c = (bScore < aScore ? bPoint : aPoint);  // Our other\n            // closest vertex\n            // is the closest\n            // out of a and b.\n\n            if ((c & 0x01) != 0) {\n                xsv_ext0 = xsb + 2;\n                xsv_ext1 = xsv_ext2 = xsb + 1;\n                dx_ext0 = dx0 - 2 - 4 * SQUISH_CONSTANT_4D;\n                dx_ext1 = dx_ext2 = dx0 - 1 - 4 * SQUISH_CONSTANT_4D;\n            } else {\n                xsv_ext0 = xsv_ext1 = xsv_ext2 = xsb;\n                dx_ext0 = dx_ext1 = dx_ext2 = dx0 - 4 * SQUISH_CONSTANT_4D;\n            }\n\n            if ((c & 0x02) != 0) {\n                ysv_ext0 = ysv_ext1 = ysv_ext2 = ysb + 1;\n                dy_ext0 = dy_ext1 = dy_ext2 = dy0 - 1 - 4 * SQUISH_CONSTANT_4D;\n                if ((c & 0x01) != 0) {\n                    ysv_ext1 += 1;\n                    dy_ext1 -= 1;\n                } else {\n                    ysv_ext0 += 1;\n                    dy_ext0 -= 1;\n                }\n            } else {\n                ysv_ext0 = ysv_ext1 = ysv_ext2 = ysb;\n                dy_ext0 = dy_ext1 = dy_ext2 = dy0 - 4 * SQUISH_CONSTANT_4D;\n            }\n\n            if ((c & 0x04) != 0) {\n                zsv_ext0 = zsv_ext1 = zsv_ext2 = zsb + 1;\n                dz_ext0 = dz_ext1 = dz_ext2 = dz0 - 1 - 4 * SQUISH_CONSTANT_4D;\n                if ((c & 0x03) != 0x03) {\n                    if ((c & 0x03) == 0) {\n                        zsv_ext0 += 1;\n                        dz_ext0 -= 1;\n                    } else {\n                        zsv_ext1 += 1;\n                        dz_ext1 -= 1;\n                    }\n                } else {\n                    zsv_ext2 += 1;\n                    dz_ext2 -= 1;\n                }\n            } else {\n                zsv_ext0 = zsv_ext1 = zsv_ext2 = zsb;\n                dz_ext0 = dz_ext1 = dz_ext2 = dz0 - 4 * SQUISH_CONSTANT_4D;\n            }\n\n            if ((c & 0x08) != 0) {\n                wsv_ext0 = wsv_ext1 = wsb + 1;\n                wsv_ext2 = wsb + 2;\n                dw_ext0 = dw_ext1 = dw0 - 1 - 4 * SQUISH_CONSTANT_4D;\n                dw_ext2 = dw0 - 2 - 4 * SQUISH_CONSTANT_4D;\n            } else {\n                wsv_ext0 = wsv_ext1 = wsv_ext2 = wsb;\n                dw_ext0 = dw_ext1 = dw_ext2 = dw0 - 4 * SQUISH_CONSTANT_4D;\n            }\n        } else {  //(1,1,1,1) is not one of the closest two pentachoron\n            // vertices.\n            int8_t c = (int8_t)(aPoint & bPoint);  // Our three extra vertices\n            // are determined by the\n            // closest two.\n\n            if ((c & 0x01) != 0) {\n                xsv_ext0 = xsv_ext2 = xsb + 1;\n                xsv_ext1 = xsb + 2;\n                dx_ext0 = dx0 - 1 - 2 * SQUISH_CONSTANT_4D;\n                dx_ext1 = dx0 - 2 - 3 * SQUISH_CONSTANT_4D;\n                dx_ext2 = dx0 - 1 - 3 * SQUISH_CONSTANT_4D;\n            } else {\n                xsv_ext0 = xsv_ext1 = xsv_ext2 = xsb;\n                dx_ext0 = dx0 - 2 * SQUISH_CONSTANT_4D;\n                dx_ext1 = dx_ext2 = dx0 - 3 * SQUISH_CONSTANT_4D;\n            }\n\n            if ((c & 0x02) != 0) {\n                ysv_ext0 = ysv_ext1 = ysv_ext2 = ysb + 1;\n                dy_ext0 = dy0 - 1 - 2 * SQUISH_CONSTANT_4D;\n                dy_ext1 = dy_ext2 = dy0 - 1 - 3 * SQUISH_CONSTANT_4D;\n                if ((c & 0x01) != 0) {\n                    ysv_ext2 += 1;\n                    dy_ext2 -= 1;\n                } else {\n                    ysv_ext1 += 1;\n                    dy_ext1 -= 1;\n                }\n            } else {\n                ysv_ext0 = ysv_ext1 = ysv_ext2 = ysb;\n                dy_ext0 = dy0 - 2 * SQUISH_CONSTANT_4D;\n                dy_ext1 = dy_ext2 = dy0 - 3 * SQUISH_CONSTANT_4D;\n            }\n\n            if ((c & 0x04) != 0) {\n                zsv_ext0 = zsv_ext1 = zsv_ext2 = zsb + 1;\n                dz_ext0 = dz0 - 1 - 2 * SQUISH_CONSTANT_4D;\n                dz_ext1 = dz_ext2 = dz0 - 1 - 3 * SQUISH_CONSTANT_4D;\n                if ((c & 0x03) != 0) {\n                    zsv_ext2 += 1;\n                    dz_ext2 -= 1;\n                } else {\n                    zsv_ext1 += 1;\n                    dz_ext1 -= 1;\n                }\n            } else {\n                zsv_ext0 = zsv_ext1 = zsv_ext2 = zsb;\n                dz_ext0 = dz0 - 2 * SQUISH_CONSTANT_4D;\n                dz_ext1 = dz_ext2 = dz0 - 3 * SQUISH_CONSTANT_4D;\n            }\n\n            if ((c & 0x08) != 0) {\n                wsv_ext0 = wsv_ext1 = wsb + 1;\n                wsv_ext2 = wsb + 2;\n                dw_ext0 = dw0 - 1 - 2 * SQUISH_CONSTANT_4D;\n                dw_ext1 = dw0 - 1 - 3 * SQUISH_CONSTANT_4D;\n                dw_ext2 = dw0 - 2 - 3 * SQUISH_CONSTANT_4D;\n            } else {\n                wsv_ext0 = wsv_ext1 = wsv_ext2 = wsb;\n                dw_ext0 = dw0 - 2 * SQUISH_CONSTANT_4D;\n                dw_ext1 = dw_ext2 = dw0 - 3 * SQUISH_CONSTANT_4D;\n            }\n        }\n\n        // Contribution (1,1,1,0)\n        double dx4 = dx0 - 1 - 3 * SQUISH_CONSTANT_4D;\n        double dy4 = dy0 - 1 - 3 * SQUISH_CONSTANT_4D;\n        double dz4 = dz0 - 1 - 3 * SQUISH_CONSTANT_4D;\n        double dw4 = dw0 - 3 * SQUISH_CONSTANT_4D;\n        double attn4 = 2 - dx4 * dx4 - dy4 * dy4 - dz4 * dz4 - dw4 * dw4;\n        if (attn4 > 0) {\n            attn4 *= attn4;\n            value += attn4 * attn4 * extrapolate4(ctx, xsb + 1, ysb + 1,\n                                         zsb + 1, wsb + 0, dx4, dy4, dz4, dw4);\n        }\n\n        // Contribution (1,1,0,1)\n        double dx3 = dx4;\n        double dy3 = dy4;\n        double dz3 = dz0 - 3 * SQUISH_CONSTANT_4D;\n        double dw3 = dw0 - 1 - 3 * SQUISH_CONSTANT_4D;\n        double attn3 = 2 - dx3 * dx3 - dy3 * dy3 - dz3 * dz3 - dw3 * dw3;\n        if (attn3 > 0) {\n            attn3 *= attn3;\n            value += attn3 * attn3 * extrapolate4(ctx, xsb + 1, ysb + 1,\n                                         zsb + 0, wsb + 1, dx3, dy3, dz3, dw3);\n        }\n\n        // Contribution (1,0,1,1)\n        double dx2 = dx4;\n        double dy2 = dy0 - 3 * SQUISH_CONSTANT_4D;\n        double dz2 = dz4;\n        double dw2 = dw3;\n        double attn2 = 2 - dx2 * dx2 - dy2 * dy2 - dz2 * dz2 - dw2 * dw2;\n        if (attn2 > 0) {\n            attn2 *= attn2;\n            value += attn2 * attn2 * extrapolate4(ctx, xsb + 1, ysb + 0,\n                                         zsb + 1, wsb + 1, dx2, dy2, dz2, dw2);\n        }\n\n        // Contribution (0,1,1,1)\n        double dx1 = dx0 - 3 * SQUISH_CONSTANT_4D;\n        double dz1 = dz4;\n        double dy1 = dy4;\n        double dw1 = dw3;\n        double attn1 = 2 - dx1 * dx1 - dy1 * dy1 - dz1 * dz1 - dw1 * dw1;\n        if (attn1 > 0) {\n            attn1 *= attn1;\n            value += attn1 * attn1 * extrapolate4(ctx, xsb + 0, ysb + 1,\n                                         zsb + 1, wsb + 1, dx1, dy1, dz1, dw1);\n        }\n\n        // Contribution (1,1,1,1)\n        dx0 = dx0 - 1 - 4 * SQUISH_CONSTANT_4D;\n        dy0 = dy0 - 1 - 4 * SQUISH_CONSTANT_4D;\n        dz0 = dz0 - 1 - 4 * SQUISH_CONSTANT_4D;\n        dw0 = dw0 - 1 - 4 * SQUISH_CONSTANT_4D;\n        double attn0 = 2 - dx0 * dx0 - dy0 * dy0 - dz0 * dz0 - dw0 * dw0;\n        if (attn0 > 0) {\n            attn0 *= attn0;\n            value += attn0 * attn0 * extrapolate4(ctx, xsb + 1, ysb + 1,\n                                         zsb + 1, wsb + 1, dx0, dy0, dz0, dw0);\n        }\n    } else if (inSum <= 2) {  // We're inside the first dispentachoron\n        // (Rectified 4-Simplex)\n        double aScore;\n        int8_t aPoint;\n        int aIsBiggerSide = 1;\n        double bScore;\n        int8_t bPoint;\n        int bIsBiggerSide = 1;\n\n        // Decide between (1,1,0,0) and (0,0,1,1)\n        if (xins + yins > zins + wins) {\n            aScore = xins + yins;\n            aPoint = 0x03;\n        } else {\n            aScore = zins + wins;\n            aPoint = 0x0C;\n        }\n\n        // Decide between (1,0,1,0) and (0,1,0,1)\n        if (xins + zins > yins + wins) {\n            bScore = xins + zins;\n            bPoint = 0x05;\n        } else {\n            bScore = yins + wins;\n            bPoint = 0x0A;\n        }\n\n        // Closer between (1,0,0,1) and (0,1,1,0) will replace the further of a\n        // and b, if closer.\n        if (xins + wins > yins + zins) {\n            double score = xins + wins;\n            if (aScore >= bScore && score > bScore) {\n                bScore = score;\n                bPoint = 0x09;\n            } else if (aScore < bScore && score > aScore) {\n                aScore = score;\n                aPoint = 0x09;\n            }\n        } else {\n            double score = yins + zins;\n            if (aScore >= bScore && score > bScore) {\n                bScore = score;\n                bPoint = 0x06;\n            } else if (aScore < bScore && score > aScore) {\n                aScore = score;\n                aPoint = 0x06;\n            }\n        }\n\n        // Decide if (1,0,0,0) is closer.\n        double p1 = 2 - inSum + xins;\n        if (aScore >= bScore && p1 > bScore) {\n            bScore = p1;\n            bPoint = 0x01;\n            bIsBiggerSide = 0;\n        } else if (aScore < bScore && p1 > aScore) {\n            aScore = p1;\n            aPoint = 0x01;\n            aIsBiggerSide = 0;\n        }\n\n        // Decide if (0,1,0,0) is closer.\n        double p2 = 2 - inSum + yins;\n        if (aScore >= bScore && p2 > bScore) {\n            bScore = p2;\n            bPoint = 0x02;\n            bIsBiggerSide = 0;\n        } else if (aScore < bScore && p2 > aScore) {\n            aScore = p2;\n            aPoint = 0x02;\n            aIsBiggerSide = 0;\n        }\n\n        // Decide if (0,0,1,0) is closer.\n        double p3 = 2 - inSum + zins;\n        if (aScore >= bScore && p3 > bScore) {\n            bScore = p3;\n            bPoint = 0x04;\n            bIsBiggerSide = 0;\n        } else if (aScore < bScore && p3 > aScore) {\n            aScore = p3;\n            aPoint = 0x04;\n            aIsBiggerSide = 0;\n        }\n\n        // Decide if (0,0,0,1) is closer.\n        double p4 = 2 - inSum + wins;\n        if (aScore >= bScore && p4 > bScore) {\n            bScore = p4;\n            bPoint = 0x08;\n            bIsBiggerSide = 0;\n        } else if (aScore < bScore && p4 > aScore) {\n            aScore = p4;\n            aPoint = 0x08;\n            aIsBiggerSide = 0;\n        }\n\n        // Where each of the two closest points are determines how the extra\n        // three vertices are calculated.\n        if (aIsBiggerSide == bIsBiggerSide) {\n            if (aIsBiggerSide) {  // Both closest points on the bigger side\n                int8_t c1 = (int8_t)(aPoint | bPoint);\n                int8_t c2 = (int8_t)(aPoint & bPoint);\n                if ((c1 & 0x01) == 0) {\n                    xsv_ext0 = xsb;\n                    xsv_ext1 = xsb - 1;\n                    dx_ext0 = dx0 - 3 * SQUISH_CONSTANT_4D;\n                    dx_ext1 = dx0 + 1 - 2 * SQUISH_CONSTANT_4D;\n                } else {\n                    xsv_ext0 = xsv_ext1 = xsb + 1;\n                    dx_ext0 = dx0 - 1 - 3 * SQUISH_CONSTANT_4D;\n                    dx_ext1 = dx0 - 1 - 2 * SQUISH_CONSTANT_4D;\n                }\n\n                if ((c1 & 0x02) == 0) {\n                    ysv_ext0 = ysb;\n                    ysv_ext1 = ysb - 1;\n                    dy_ext0 = dy0 - 3 * SQUISH_CONSTANT_4D;\n                    dy_ext1 = dy0 + 1 - 2 * SQUISH_CONSTANT_4D;\n                } else {\n                    ysv_ext0 = ysv_ext1 = ysb + 1;\n                    dy_ext0 = dy0 - 1 - 3 * SQUISH_CONSTANT_4D;\n                    dy_ext1 = dy0 - 1 - 2 * SQUISH_CONSTANT_4D;\n                }\n\n                if ((c1 & 0x04) == 0) {\n                    zsv_ext0 = zsb;\n                    zsv_ext1 = zsb - 1;\n                    dz_ext0 = dz0 - 3 * SQUISH_CONSTANT_4D;\n                    dz_ext1 = dz0 + 1 - 2 * SQUISH_CONSTANT_4D;\n                } else {\n                    zsv_ext0 = zsv_ext1 = zsb + 1;\n                    dz_ext0 = dz0 - 1 - 3 * SQUISH_CONSTANT_4D;\n                    dz_ext1 = dz0 - 1 - 2 * SQUISH_CONSTANT_4D;\n                }\n\n                if ((c1 & 0x08) == 0) {\n                    wsv_ext0 = wsb;\n                    wsv_ext1 = wsb - 1;\n                    dw_ext0 = dw0 - 3 * SQUISH_CONSTANT_4D;\n                    dw_ext1 = dw0 + 1 - 2 * SQUISH_CONSTANT_4D;\n                } else {\n                    wsv_ext0 = wsv_ext1 = wsb + 1;\n                    dw_ext0 = dw0 - 1 - 3 * SQUISH_CONSTANT_4D;\n                    dw_ext1 = dw0 - 1 - 2 * SQUISH_CONSTANT_4D;\n                }\n\n                // One combination is a permutation of (0,0,0,2) based on c2\n                xsv_ext2 = xsb;\n                ysv_ext2 = ysb;\n                zsv_ext2 = zsb;\n                wsv_ext2 = wsb;\n                dx_ext2 = dx0 - 2 * SQUISH_CONSTANT_4D;\n                dy_ext2 = dy0 - 2 * SQUISH_CONSTANT_4D;\n                dz_ext2 = dz0 - 2 * SQUISH_CONSTANT_4D;\n                dw_ext2 = dw0 - 2 * SQUISH_CONSTANT_4D;\n                if ((c2 & 0x01) != 0) {\n                    xsv_ext2 += 2;\n                    dx_ext2 -= 2;\n                } else if ((c2 & 0x02) != 0) {\n                    ysv_ext2 += 2;\n                    dy_ext2 -= 2;\n                } else if ((c2 & 0x04) != 0) {\n                    zsv_ext2 += 2;\n                    dz_ext2 -= 2;\n                } else {\n                    wsv_ext2 += 2;\n                    dw_ext2 -= 2;\n                }\n\n            } else {  // Both closest points on the smaller side\n                // One of the two extra points is (0,0,0,0)\n                xsv_ext2 = xsb;\n                ysv_ext2 = ysb;\n                zsv_ext2 = zsb;\n                wsv_ext2 = wsb;\n                dx_ext2 = dx0;\n                dy_ext2 = dy0;\n                dz_ext2 = dz0;\n                dw_ext2 = dw0;\n\n                // Other two points are based on the omitted axes.\n                int8_t c = (int8_t)(aPoint | bPoint);\n\n                if ((c & 0x01) == 0) {\n                    xsv_ext0 = xsb - 1;\n                    xsv_ext1 = xsb;\n                    dx_ext0 = dx0 + 1 - SQUISH_CONSTANT_4D;\n                    dx_ext1 = dx0 - SQUISH_CONSTANT_4D;\n                } else {\n                    xsv_ext0 = xsv_ext1 = xsb + 1;\n                    dx_ext0 = dx_ext1 = dx0 - 1 - SQUISH_CONSTANT_4D;\n                }\n\n                if ((c & 0x02) == 0) {\n                    ysv_ext0 = ysv_ext1 = ysb;\n                    dy_ext0 = dy_ext1 = dy0 - SQUISH_CONSTANT_4D;\n                    if ((c & 0x01) == 0x01) {\n                        ysv_ext0 -= 1;\n                        dy_ext0 += 1;\n                    } else {\n                        ysv_ext1 -= 1;\n                        dy_ext1 += 1;\n                    }\n                } else {\n                    ysv_ext0 = ysv_ext1 = ysb + 1;\n                    dy_ext0 = dy_ext1 = dy0 - 1 - SQUISH_CONSTANT_4D;\n                }\n\n                if ((c & 0x04) == 0) {\n                    zsv_ext0 = zsv_ext1 = zsb;\n                    dz_ext0 = dz_ext1 = dz0 - SQUISH_CONSTANT_4D;\n                    if ((c & 0x03) == 0x03) {\n                        zsv_ext0 -= 1;\n                        dz_ext0 += 1;\n                    } else {\n                        zsv_ext1 -= 1;\n                        dz_ext1 += 1;\n                    }\n                } else {\n                    zsv_ext0 = zsv_ext1 = zsb + 1;\n                    dz_ext0 = dz_ext1 = dz0 - 1 - SQUISH_CONSTANT_4D;\n                }\n\n                if ((c & 0x08) == 0) {\n                    wsv_ext0 = wsb;\n                    wsv_ext1 = wsb - 1;\n                    dw_ext0 = dw0 - SQUISH_CONSTANT_4D;\n                    dw_ext1 = dw0 + 1 - SQUISH_CONSTANT_4D;\n                } else {\n                    wsv_ext0 = wsv_ext1 = wsb + 1;\n                    dw_ext0 = dw_ext1 = dw0 - 1 - SQUISH_CONSTANT_4D;\n                }\n            }\n        } else {  // One point on each \"side\"\n            int8_t c1, c2;\n            if (aIsBiggerSide) {\n                c1 = aPoint;\n                c2 = bPoint;\n            } else {\n                c1 = bPoint;\n                c2 = aPoint;\n            }\n\n            // Two contributions are the bigger-sided point with each 0 replaced\n            // with -1.\n            if ((c1 & 0x01) == 0) {\n                xsv_ext0 = xsb - 1;\n                xsv_ext1 = xsb;\n                dx_ext0 = dx0 + 1 - SQUISH_CONSTANT_4D;\n                dx_ext1 = dx0 - SQUISH_CONSTANT_4D;\n            } else {\n                xsv_ext0 = xsv_ext1 = xsb + 1;\n                dx_ext0 = dx_ext1 = dx0 - 1 - SQUISH_CONSTANT_4D;\n            }\n\n            if ((c1 & 0x02) == 0) {\n                ysv_ext0 = ysv_ext1 = ysb;\n                dy_ext0 = dy_ext1 = dy0 - SQUISH_CONSTANT_4D;\n                if ((c1 & 0x01) == 0x01) {\n                    ysv_ext0 -= 1;\n                    dy_ext0 += 1;\n                } else {\n                    ysv_ext1 -= 1;\n                    dy_ext1 += 1;\n                }\n            } else {\n                ysv_ext0 = ysv_ext1 = ysb + 1;\n                dy_ext0 = dy_ext1 = dy0 - 1 - SQUISH_CONSTANT_4D;\n            }\n\n            if ((c1 & 0x04) == 0) {\n                zsv_ext0 = zsv_ext1 = zsb;\n                dz_ext0 = dz_ext1 = dz0 - SQUISH_CONSTANT_4D;\n                if ((c1 & 0x03) == 0x03) {\n                    zsv_ext0 -= 1;\n                    dz_ext0 += 1;\n                } else {\n                    zsv_ext1 -= 1;\n                    dz_ext1 += 1;\n                }\n            } else {\n                zsv_ext0 = zsv_ext1 = zsb + 1;\n                dz_ext0 = dz_ext1 = dz0 - 1 - SQUISH_CONSTANT_4D;\n            }\n\n            if ((c1 & 0x08) == 0) {\n                wsv_ext0 = wsb;\n                wsv_ext1 = wsb - 1;\n                dw_ext0 = dw0 - SQUISH_CONSTANT_4D;\n                dw_ext1 = dw0 + 1 - SQUISH_CONSTANT_4D;\n            } else {\n                wsv_ext0 = wsv_ext1 = wsb + 1;\n                dw_ext0 = dw_ext1 = dw0 - 1 - SQUISH_CONSTANT_4D;\n            }\n\n            // One contribution is a permutation of (0,0,0,2) based on the\n            // smaller-sided point\n            xsv_ext2 = xsb;\n            ysv_ext2 = ysb;\n            zsv_ext2 = zsb;\n            wsv_ext2 = wsb;\n            dx_ext2 = dx0 - 2 * SQUISH_CONSTANT_4D;\n            dy_ext2 = dy0 - 2 * SQUISH_CONSTANT_4D;\n            dz_ext2 = dz0 - 2 * SQUISH_CONSTANT_4D;\n            dw_ext2 = dw0 - 2 * SQUISH_CONSTANT_4D;\n            if ((c2 & 0x01) != 0) {\n                xsv_ext2 += 2;\n                dx_ext2 -= 2;\n            } else if ((c2 & 0x02) != 0) {\n                ysv_ext2 += 2;\n                dy_ext2 -= 2;\n            } else if ((c2 & 0x04) != 0) {\n                zsv_ext2 += 2;\n                dz_ext2 -= 2;\n            } else {\n                wsv_ext2 += 2;\n                dw_ext2 -= 2;\n            }\n        }\n\n        // Contribution (1,0,0,0)\n        double dx1 = dx0 - 1 - SQUISH_CONSTANT_4D;\n        double dy1 = dy0 - 0 - SQUISH_CONSTANT_4D;\n        double dz1 = dz0 - 0 - SQUISH_CONSTANT_4D;\n        double dw1 = dw0 - 0 - SQUISH_CONSTANT_4D;\n        double attn1 = 2 - dx1 * dx1 - dy1 * dy1 - dz1 * dz1 - dw1 * dw1;\n        if (attn1 > 0) {\n            attn1 *= attn1;\n            value += attn1 * attn1 * extrapolate4(ctx, xsb + 1, ysb + 0,\n                                         zsb + 0, wsb + 0, dx1, dy1, dz1, dw1);\n        }\n\n        // Contribution (0,1,0,0)\n        double dx2 = dx0 - 0 - SQUISH_CONSTANT_4D;\n        double dy2 = dy0 - 1 - SQUISH_CONSTANT_4D;\n        double dz2 = dz1;\n        double dw2 = dw1;\n        double attn2 = 2 - dx2 * dx2 - dy2 * dy2 - dz2 * dz2 - dw2 * dw2;\n        if (attn2 > 0) {\n            attn2 *= attn2;\n            value += attn2 * attn2 * extrapolate4(ctx, xsb + 0, ysb + 1,\n                                         zsb + 0, wsb + 0, dx2, dy2, dz2, dw2);\n        }\n\n        // Contribution (0,0,1,0)\n        double dx3 = dx2;\n        double dy3 = dy1;\n        double dz3 = dz0 - 1 - SQUISH_CONSTANT_4D;\n        double dw3 = dw1;\n        double attn3 = 2 - dx3 * dx3 - dy3 * dy3 - dz3 * dz3 - dw3 * dw3;\n        if (attn3 > 0) {\n            attn3 *= attn3;\n            value += attn3 * attn3 * extrapolate4(ctx, xsb + 0, ysb + 0,\n                                         zsb + 1, wsb + 0, dx3, dy3, dz3, dw3);\n        }\n\n        // Contribution (0,0,0,1)\n        double dx4 = dx2;\n        double dy4 = dy1;\n        double dz4 = dz1;\n        double dw4 = dw0 - 1 - SQUISH_CONSTANT_4D;\n        double attn4 = 2 - dx4 * dx4 - dy4 * dy4 - dz4 * dz4 - dw4 * dw4;\n        if (attn4 > 0) {\n            attn4 *= attn4;\n            value += attn4 * attn4 * extrapolate4(ctx, xsb + 0, ysb + 0,\n                                         zsb + 0, wsb + 1, dx4, dy4, dz4, dw4);\n        }\n\n        // Contribution (1,1,0,0)\n        double dx5 = dx0 - 1 - 2 * SQUISH_CONSTANT_4D;\n        double dy5 = dy0 - 1 - 2 * SQUISH_CONSTANT_4D;\n        double dz5 = dz0 - 0 - 2 * SQUISH_CONSTANT_4D;\n        double dw5 = dw0 - 0 - 2 * SQUISH_CONSTANT_4D;\n        double attn5 = 2 - dx5 * dx5 - dy5 * dy5 - dz5 * dz5 - dw5 * dw5;\n        if (attn5 > 0) {\n            attn5 *= attn5;\n            value += attn5 * attn5 * extrapolate4(ctx, xsb + 1, ysb + 1,\n                                         zsb + 0, wsb + 0, dx5, dy5, dz5, dw5);\n        }\n\n        // Contribution (1,0,1,0)\n        double dx6 = dx0 - 1 - 2 * SQUISH_CONSTANT_4D;\n        double dy6 = dy0 - 0 - 2 * SQUISH_CONSTANT_4D;\n        double dz6 = dz0 - 1 - 2 * SQUISH_CONSTANT_4D;\n        double dw6 = dw0 - 0 - 2 * SQUISH_CONSTANT_4D;\n        double attn6 = 2 - dx6 * dx6 - dy6 * dy6 - dz6 * dz6 - dw6 * dw6;\n        if (attn6 > 0) {\n            attn6 *= attn6;\n            value += attn6 * attn6 * extrapolate4(ctx, xsb + 1, ysb + 0,\n                                         zsb + 1, wsb + 0, dx6, dy6, dz6, dw6);\n        }\n\n        // Contribution (1,0,0,1)\n        double dx7 = dx0 - 1 - 2 * SQUISH_CONSTANT_4D;\n        double dy7 = dy0 - 0 - 2 * SQUISH_CONSTANT_4D;\n        double dz7 = dz0 - 0 - 2 * SQUISH_CONSTANT_4D;\n        double dw7 = dw0 - 1 - 2 * SQUISH_CONSTANT_4D;\n        double attn7 = 2 - dx7 * dx7 - dy7 * dy7 - dz7 * dz7 - dw7 * dw7;\n        if (attn7 > 0) {\n            attn7 *= attn7;\n            value += attn7 * attn7 * extrapolate4(ctx, xsb + 1, ysb + 0,\n                                         zsb + 0, wsb + 1, dx7, dy7, dz7, dw7);\n        }\n\n        // Contribution (0,1,1,0)\n        double dx8 = dx0 - 0 - 2 * SQUISH_CONSTANT_4D;\n        double dy8 = dy0 - 1 - 2 * SQUISH_CONSTANT_4D;\n        double dz8 = dz0 - 1 - 2 * SQUISH_CONSTANT_4D;\n        double dw8 = dw0 - 0 - 2 * SQUISH_CONSTANT_4D;\n        double attn8 = 2 - dx8 * dx8 - dy8 * dy8 - dz8 * dz8 - dw8 * dw8;\n        if (attn8 > 0) {\n            attn8 *= attn8;\n            value += attn8 * attn8 * extrapolate4(ctx, xsb + 0, ysb + 1,\n                                         zsb + 1, wsb + 0, dx8, dy8, dz8, dw8);\n        }\n\n        // Contribution (0,1,0,1)\n        double dx9 = dx0 - 0 - 2 * SQUISH_CONSTANT_4D;\n        double dy9 = dy0 - 1 - 2 * SQUISH_CONSTANT_4D;\n        double dz9 = dz0 - 0 - 2 * SQUISH_CONSTANT_4D;\n        double dw9 = dw0 - 1 - 2 * SQUISH_CONSTANT_4D;\n        double attn9 = 2 - dx9 * dx9 - dy9 * dy9 - dz9 * dz9 - dw9 * dw9;\n        if (attn9 > 0) {\n            attn9 *= attn9;\n            value += attn9 * attn9 * extrapolate4(ctx, xsb + 0, ysb + 1,\n                                         zsb + 0, wsb + 1, dx9, dy9, dz9, dw9);\n        }\n\n        // Contribution (0,0,1,1)\n        double dx10 = dx0 - 0 - 2 * SQUISH_CONSTANT_4D;\n        double dy10 = dy0 - 0 - 2 * SQUISH_CONSTANT_4D;\n        double dz10 = dz0 - 1 - 2 * SQUISH_CONSTANT_4D;\n        double dw10 = dw0 - 1 - 2 * SQUISH_CONSTANT_4D;\n        double attn10 =\n            2 - dx10 * dx10 - dy10 * dy10 - dz10 * dz10 - dw10 * dw10;\n        if (attn10 > 0) {\n            attn10 *= attn10;\n            value +=\n                attn10 * attn10 * extrapolate4(ctx, xsb + 0, ysb + 0, zsb + 1,\n                                      wsb + 1, dx10, dy10, dz10, dw10);\n        }\n    } else {  // We're inside the second dispentachoron (Rectified 4-Simplex)\n        double aScore;\n        int8_t aPoint;\n        int aIsBiggerSide = 1;\n        double bScore;\n        int8_t bPoint;\n        int bIsBiggerSide = 1;\n\n        // Decide between (0,0,1,1) and (1,1,0,0)\n        if (xins + yins < zins + wins) {\n            aScore = xins + yins;\n            aPoint = 0x0C;\n        } else {\n            aScore = zins + wins;\n            aPoint = 0x03;\n        }\n\n        // Decide between (0,1,0,1) and (1,0,1,0)\n        if (xins + zins < yins + wins) {\n            bScore = xins + zins;\n            bPoint = 0x0A;\n        } else {\n            bScore = yins + wins;\n            bPoint = 0x05;\n        }\n\n        // Closer between (0,1,1,0) and (1,0,0,1) will replace the further of a\n        // and b, if closer.\n        if (xins + wins < yins + zins) {\n            double score = xins + wins;\n            if (aScore <= bScore && score < bScore) {\n                bScore = score;\n                bPoint = 0x06;\n            } else if (aScore > bScore && score < aScore) {\n                aScore = score;\n                aPoint = 0x06;\n            }\n        } else {\n            double score = yins + zins;\n            if (aScore <= bScore && score < bScore) {\n                bScore = score;\n                bPoint = 0x09;\n            } else if (aScore > bScore && score < aScore) {\n                aScore = score;\n                aPoint = 0x09;\n            }\n        }\n\n        // Decide if (0,1,1,1) is closer.\n        double p1 = 3 - inSum + xins;\n        if (aScore <= bScore && p1 < bScore) {\n            bScore = p1;\n            bPoint = 0x0E;\n            bIsBiggerSide = 0;\n        } else if (aScore > bScore && p1 < aScore) {\n            aScore = p1;\n            aPoint = 0x0E;\n            aIsBiggerSide = 0;\n        }\n\n        // Decide if (1,0,1,1) is closer.\n        double p2 = 3 - inSum + yins;\n        if (aScore <= bScore && p2 < bScore) {\n            bScore = p2;\n            bPoint = 0x0D;\n            bIsBiggerSide = 0;\n        } else if (aScore > bScore && p2 < aScore) {\n            aScore = p2;\n            aPoint = 0x0D;\n            aIsBiggerSide = 0;\n        }\n\n        // Decide if (1,1,0,1) is closer.\n        double p3 = 3 - inSum + zins;\n        if (aScore <= bScore && p3 < bScore) {\n            bScore = p3;\n            bPoint = 0x0B;\n            bIsBiggerSide = 0;\n        } else if (aScore > bScore && p3 < aScore) {\n            aScore = p3;\n            aPoint = 0x0B;\n            aIsBiggerSide = 0;\n        }\n\n        // Decide if (1,1,1,0) is closer.\n        double p4 = 3 - inSum + wins;\n        if (aScore <= bScore && p4 < bScore) {\n            bScore = p4;\n            bPoint = 0x07;\n            bIsBiggerSide = 0;\n        } else if (aScore > bScore && p4 < aScore) {\n            aScore = p4;\n            aPoint = 0x07;\n            aIsBiggerSide = 0;\n        }\n\n        // Where each of the two closest points are determines how the extra\n        // three vertices are calculated.\n        if (aIsBiggerSide == bIsBiggerSide) {\n            if (aIsBiggerSide) {  // Both closest points on the bigger side\n                int8_t c1 = (int8_t)(aPoint & bPoint);\n                int8_t c2 = (int8_t)(aPoint | bPoint);\n\n                // Two contributions are permutations of (0,0,0,1) and (0,0,0,2)\n                // based on c1\n                xsv_ext0 = xsv_ext1 = xsb;\n                ysv_ext0 = ysv_ext1 = ysb;\n                zsv_ext0 = zsv_ext1 = zsb;\n                wsv_ext0 = wsv_ext1 = wsb;\n                dx_ext0 = dx0 - SQUISH_CONSTANT_4D;\n                dy_ext0 = dy0 - SQUISH_CONSTANT_4D;\n                dz_ext0 = dz0 - SQUISH_CONSTANT_4D;\n                dw_ext0 = dw0 - SQUISH_CONSTANT_4D;\n                dx_ext1 = dx0 - 2 * SQUISH_CONSTANT_4D;\n                dy_ext1 = dy0 - 2 * SQUISH_CONSTANT_4D;\n                dz_ext1 = dz0 - 2 * SQUISH_CONSTANT_4D;\n                dw_ext1 = dw0 - 2 * SQUISH_CONSTANT_4D;\n                if ((c1 & 0x01) != 0) {\n                    xsv_ext0 += 1;\n                    dx_ext0 -= 1;\n                    xsv_ext1 += 2;\n                    dx_ext1 -= 2;\n                } else if ((c1 & 0x02) != 0) {\n                    ysv_ext0 += 1;\n                    dy_ext0 -= 1;\n                    ysv_ext1 += 2;\n                    dy_ext1 -= 2;\n                } else if ((c1 & 0x04) != 0) {\n                    zsv_ext0 += 1;\n                    dz_ext0 -= 1;\n                    zsv_ext1 += 2;\n                    dz_ext1 -= 2;\n                } else {\n                    wsv_ext0 += 1;\n                    dw_ext0 -= 1;\n                    wsv_ext1 += 2;\n                    dw_ext1 -= 2;\n                }\n\n                // One contribution is a permutation of (1,1,1,-1) based on c2\n                xsv_ext2 = xsb + 1;\n                ysv_ext2 = ysb + 1;\n                zsv_ext2 = zsb + 1;\n                wsv_ext2 = wsb + 1;\n                dx_ext2 = dx0 - 1 - 2 * SQUISH_CONSTANT_4D;\n                dy_ext2 = dy0 - 1 - 2 * SQUISH_CONSTANT_4D;\n                dz_ext2 = dz0 - 1 - 2 * SQUISH_CONSTANT_4D;\n                dw_ext2 = dw0 - 1 - 2 * SQUISH_CONSTANT_4D;\n                if ((c2 & 0x01) == 0) {\n                    xsv_ext2 -= 2;\n                    dx_ext2 += 2;\n                } else if ((c2 & 0x02) == 0) {\n                    ysv_ext2 -= 2;\n                    dy_ext2 += 2;\n                } else if ((c2 & 0x04) == 0) {\n                    zsv_ext2 -= 2;\n                    dz_ext2 += 2;\n                } else {\n                    wsv_ext2 -= 2;\n                    dw_ext2 += 2;\n                }\n            } else {  // Both closest points on the smaller side\n                // One of the two extra points is (1,1,1,1)\n                xsv_ext2 = xsb + 1;\n                ysv_ext2 = ysb + 1;\n                zsv_ext2 = zsb + 1;\n                wsv_ext2 = wsb + 1;\n                dx_ext2 = dx0 - 1 - 4 * SQUISH_CONSTANT_4D;\n                dy_ext2 = dy0 - 1 - 4 * SQUISH_CONSTANT_4D;\n                dz_ext2 = dz0 - 1 - 4 * SQUISH_CONSTANT_4D;\n                dw_ext2 = dw0 - 1 - 4 * SQUISH_CONSTANT_4D;\n\n                // Other two points are based on the shared axes.\n                int8_t c = (int8_t)(aPoint & bPoint);\n\n                if ((c & 0x01) != 0) {\n                    xsv_ext0 = xsb + 2;\n                    xsv_ext1 = xsb + 1;\n                    dx_ext0 = dx0 - 2 - 3 * SQUISH_CONSTANT_4D;\n                    dx_ext1 = dx0 - 1 - 3 * SQUISH_CONSTANT_4D;\n                } else {\n                    xsv_ext0 = xsv_ext1 = xsb;\n                    dx_ext0 = dx_ext1 = dx0 - 3 * SQUISH_CONSTANT_4D;\n                }\n\n                if ((c & 0x02) != 0) {\n                    ysv_ext0 = ysv_ext1 = ysb + 1;\n                    dy_ext0 = dy_ext1 = dy0 - 1 - 3 * SQUISH_CONSTANT_4D;\n                    if ((c & 0x01) == 0) {\n                        ysv_ext0 += 1;\n                        dy_ext0 -= 1;\n                    } else {\n                        ysv_ext1 += 1;\n                        dy_ext1 -= 1;\n                    }\n                } else {\n                    ysv_ext0 = ysv_ext1 = ysb;\n                    dy_ext0 = dy_ext1 = dy0 - 3 * SQUISH_CONSTANT_4D;\n                }\n\n                if ((c & 0x04) != 0) {\n                    zsv_ext0 = zsv_ext1 = zsb + 1;\n                    dz_ext0 = dz_ext1 = dz0 - 1 - 3 * SQUISH_CONSTANT_4D;\n                    if ((c & 0x03) == 0) {\n                        zsv_ext0 += 1;\n                        dz_ext0 -= 1;\n                    } else {\n                        zsv_ext1 += 1;\n                        dz_ext1 -= 1;\n                    }\n                } else {\n                    zsv_ext0 = zsv_ext1 = zsb;\n                    dz_ext0 = dz_ext1 = dz0 - 3 * SQUISH_CONSTANT_4D;\n                }\n\n                if ((c & 0x08) != 0) {\n                    wsv_ext0 = wsb + 1;\n                    wsv_ext1 = wsb + 2;\n                    dw_ext0 = dw0 - 1 - 3 * SQUISH_CONSTANT_4D;\n                    dw_ext1 = dw0 - 2 - 3 * SQUISH_CONSTANT_4D;\n                } else {\n                    wsv_ext0 = wsv_ext1 = wsb;\n                    dw_ext0 = dw_ext1 = dw0 - 3 * SQUISH_CONSTANT_4D;\n                }\n            }\n        } else {  // One point on each \"side\"\n            int8_t c1, c2;\n            if (aIsBiggerSide) {\n                c1 = aPoint;\n                c2 = bPoint;\n            } else {\n                c1 = bPoint;\n                c2 = aPoint;\n            }\n\n            // Two contributions are the bigger-sided point with each 1 replaced\n            // with 2.\n            if ((c1 & 0x01) != 0) {\n                xsv_ext0 = xsb + 2;\n                xsv_ext1 = xsb + 1;\n                dx_ext0 = dx0 - 2 - 3 * SQUISH_CONSTANT_4D;\n                dx_ext1 = dx0 - 1 - 3 * SQUISH_CONSTANT_4D;\n            } else {\n                xsv_ext0 = xsv_ext1 = xsb;\n                dx_ext0 = dx_ext1 = dx0 - 3 * SQUISH_CONSTANT_4D;\n            }\n\n            if ((c1 & 0x02) != 0) {\n                ysv_ext0 = ysv_ext1 = ysb + 1;\n                dy_ext0 = dy_ext1 = dy0 - 1 - 3 * SQUISH_CONSTANT_4D;\n                if ((c1 & 0x01) == 0) {\n                    ysv_ext0 += 1;\n                    dy_ext0 -= 1;\n                } else {\n                    ysv_ext1 += 1;\n                    dy_ext1 -= 1;\n                }\n            } else {\n                ysv_ext0 = ysv_ext1 = ysb;\n                dy_ext0 = dy_ext1 = dy0 - 3 * SQUISH_CONSTANT_4D;\n            }\n\n            if ((c1 & 0x04) != 0) {\n                zsv_ext0 = zsv_ext1 = zsb + 1;\n                dz_ext0 = dz_ext1 = dz0 - 1 - 3 * SQUISH_CONSTANT_4D;\n                if ((c1 & 0x03) == 0) {\n                    zsv_ext0 += 1;\n                    dz_ext0 -= 1;\n                } else {\n                    zsv_ext1 += 1;\n                    dz_ext1 -= 1;\n                }\n            } else {\n                zsv_ext0 = zsv_ext1 = zsb;\n                dz_ext0 = dz_ext1 = dz0 - 3 * SQUISH_CONSTANT_4D;\n            }\n\n            if ((c1 & 0x08) != 0) {\n                wsv_ext0 = wsb + 1;\n                wsv_ext1 = wsb + 2;\n                dw_ext0 = dw0 - 1 - 3 * SQUISH_CONSTANT_4D;\n                dw_ext1 = dw0 - 2 - 3 * SQUISH_CONSTANT_4D;\n            } else {\n                wsv_ext0 = wsv_ext1 = wsb;\n                dw_ext0 = dw_ext1 = dw0 - 3 * SQUISH_CONSTANT_4D;\n            }\n\n            // One contribution is a permutation of (1,1,1,-1) based on the\n            // smaller-sided point\n            xsv_ext2 = xsb + 1;\n            ysv_ext2 = ysb + 1;\n            zsv_ext2 = zsb + 1;\n            wsv_ext2 = wsb + 1;\n            dx_ext2 = dx0 - 1 - 2 * SQUISH_CONSTANT_4D;\n            dy_ext2 = dy0 - 1 - 2 * SQUISH_CONSTANT_4D;\n            dz_ext2 = dz0 - 1 - 2 * SQUISH_CONSTANT_4D;\n            dw_ext2 = dw0 - 1 - 2 * SQUISH_CONSTANT_4D;\n            if ((c2 & 0x01) == 0) {\n                xsv_ext2 -= 2;\n                dx_ext2 += 2;\n            } else if ((c2 & 0x02) == 0) {\n                ysv_ext2 -= 2;\n                dy_ext2 += 2;\n            } else if ((c2 & 0x04) == 0) {\n                zsv_ext2 -= 2;\n                dz_ext2 += 2;\n            } else {\n                wsv_ext2 -= 2;\n                dw_ext2 += 2;\n            }\n        }\n\n        // Contribution (1,1,1,0)\n        double dx4 = dx0 - 1 - 3 * SQUISH_CONSTANT_4D;\n        double dy4 = dy0 - 1 - 3 * SQUISH_CONSTANT_4D;\n        double dz4 = dz0 - 1 - 3 * SQUISH_CONSTANT_4D;\n        double dw4 = dw0 - 3 * SQUISH_CONSTANT_4D;\n        double attn4 = 2 - dx4 * dx4 - dy4 * dy4 - dz4 * dz4 - dw4 * dw4;\n        if (attn4 > 0) {\n            attn4 *= attn4;\n            value += attn4 * attn4 * extrapolate4(ctx, xsb + 1, ysb + 1,\n                                         zsb + 1, wsb + 0, dx4, dy4, dz4, dw4);\n        }\n\n        // Contribution (1,1,0,1)\n        double dx3 = dx4;\n        double dy3 = dy4;\n        double dz3 = dz0 - 3 * SQUISH_CONSTANT_4D;\n        double dw3 = dw0 - 1 - 3 * SQUISH_CONSTANT_4D;\n        double attn3 = 2 - dx3 * dx3 - dy3 * dy3 - dz3 * dz3 - dw3 * dw3;\n        if (attn3 > 0) {\n            attn3 *= attn3;\n            value += attn3 * attn3 * extrapolate4(ctx, xsb + 1, ysb + 1,\n                                         zsb + 0, wsb + 1, dx3, dy3, dz3, dw3);\n        }\n\n        // Contribution (1,0,1,1)\n        double dx2 = dx4;\n        double dy2 = dy0 - 3 * SQUISH_CONSTANT_4D;\n        double dz2 = dz4;\n        double dw2 = dw3;\n        double attn2 = 2 - dx2 * dx2 - dy2 * dy2 - dz2 * dz2 - dw2 * dw2;\n        if (attn2 > 0) {\n            attn2 *= attn2;\n            value += attn2 * attn2 * extrapolate4(ctx, xsb + 1, ysb + 0,\n                                         zsb + 1, wsb + 1, dx2, dy2, dz2, dw2);\n        }\n\n        // Contribution (0,1,1,1)\n        double dx1 = dx0 - 3 * SQUISH_CONSTANT_4D;\n        double dz1 = dz4;\n        double dy1 = dy4;\n        double dw1 = dw3;\n        double attn1 = 2 - dx1 * dx1 - dy1 * dy1 - dz1 * dz1 - dw1 * dw1;\n        if (attn1 > 0) {\n            attn1 *= attn1;\n            value += attn1 * attn1 * extrapolate4(ctx, xsb + 0, ysb + 1,\n                                         zsb + 1, wsb + 1, dx1, dy1, dz1, dw1);\n        }\n\n        // Contribution (1,1,0,0)\n        double dx5 = dx0 - 1 - 2 * SQUISH_CONSTANT_4D;\n        double dy5 = dy0 - 1 - 2 * SQUISH_CONSTANT_4D;\n        double dz5 = dz0 - 0 - 2 * SQUISH_CONSTANT_4D;\n        double dw5 = dw0 - 0 - 2 * SQUISH_CONSTANT_4D;\n        double attn5 = 2 - dx5 * dx5 - dy5 * dy5 - dz5 * dz5 - dw5 * dw5;\n        if (attn5 > 0) {\n            attn5 *= attn5;\n            value += attn5 * attn5 * extrapolate4(ctx, xsb + 1, ysb + 1,\n                                         zsb + 0, wsb + 0, dx5, dy5, dz5, dw5);\n        }\n\n        // Contribution (1,0,1,0)\n        double dx6 = dx0 - 1 - 2 * SQUISH_CONSTANT_4D;\n        double dy6 = dy0 - 0 - 2 * SQUISH_CONSTANT_4D;\n        double dz6 = dz0 - 1 - 2 * SQUISH_CONSTANT_4D;\n        double dw6 = dw0 - 0 - 2 * SQUISH_CONSTANT_4D;\n        double attn6 = 2 - dx6 * dx6 - dy6 * dy6 - dz6 * dz6 - dw6 * dw6;\n        if (attn6 > 0) {\n            attn6 *= attn6;\n            value += attn6 * attn6 * extrapolate4(ctx, xsb + 1, ysb + 0,\n                                         zsb + 1, wsb + 0, dx6, dy6, dz6, dw6);\n        }\n\n        // Contribution (1,0,0,1)\n        double dx7 = dx0 - 1 - 2 * SQUISH_CONSTANT_4D;\n        double dy7 = dy0 - 0 - 2 * SQUISH_CONSTANT_4D;\n        double dz7 = dz0 - 0 - 2 * SQUISH_CONSTANT_4D;\n        double dw7 = dw0 - 1 - 2 * SQUISH_CONSTANT_4D;\n        double attn7 = 2 - dx7 * dx7 - dy7 * dy7 - dz7 * dz7 - dw7 * dw7;\n        if (attn7 > 0) {\n            attn7 *= attn7;\n            value += attn7 * attn7 * extrapolate4(ctx, xsb + 1, ysb + 0,\n                                         zsb + 0, wsb + 1, dx7, dy7, dz7, dw7);\n        }\n\n        // Contribution (0,1,1,0)\n        double dx8 = dx0 - 0 - 2 * SQUISH_CONSTANT_4D;\n        double dy8 = dy0 - 1 - 2 * SQUISH_CONSTANT_4D;\n        double dz8 = dz0 - 1 - 2 * SQUISH_CONSTANT_4D;\n        double dw8 = dw0 - 0 - 2 * SQUISH_CONSTANT_4D;\n        double attn8 = 2 - dx8 * dx8 - dy8 * dy8 - dz8 * dz8 - dw8 * dw8;\n        if (attn8 > 0) {\n            attn8 *= attn8;\n            value += attn8 * attn8 * extrapolate4(ctx, xsb + 0, ysb + 1,\n                                         zsb + 1, wsb + 0, dx8, dy8, dz8, dw8);\n        }\n\n        // Contribution (0,1,0,1)\n        double dx9 = dx0 - 0 - 2 * SQUISH_CONSTANT_4D;\n        double dy9 = dy0 - 1 - 2 * SQUISH_CONSTANT_4D;\n        double dz9 = dz0 - 0 - 2 * SQUISH_CONSTANT_4D;\n        double dw9 = dw0 - 1 - 2 * SQUISH_CONSTANT_4D;\n        double attn9 = 2 - dx9 * dx9 - dy9 * dy9 - dz9 * dz9 - dw9 * dw9;\n        if (attn9 > 0) {\n            attn9 *= attn9;\n            value += attn9 * attn9 * extrapolate4(ctx, xsb + 0, ysb + 1,\n                                         zsb + 0, wsb + 1, dx9, dy9, dz9, dw9);\n        }\n\n        // Contribution (0,0,1,1)\n        double dx10 = dx0 - 0 - 2 * SQUISH_CONSTANT_4D;\n        double dy10 = dy0 - 0 - 2 * SQUISH_CONSTANT_4D;\n        double dz10 = dz0 - 1 - 2 * SQUISH_CONSTANT_4D;\n        double dw10 = dw0 - 1 - 2 * SQUISH_CONSTANT_4D;\n        double attn10 =\n            2 - dx10 * dx10 - dy10 * dy10 - dz10 * dz10 - dw10 * dw10;\n        if (attn10 > 0) {\n            attn10 *= attn10;\n            value +=\n                attn10 * attn10 * extrapolate4(ctx, xsb + 0, ysb + 0, zsb + 1,\n                                      wsb + 1, dx10, dy10, dz10, dw10);\n        }\n    }\n\n    // First extra vertex\n    double attn_ext0 = 2 - dx_ext0 * dx_ext0 - dy_ext0 * dy_ext0 -\n                       dz_ext0 * dz_ext0 - dw_ext0 * dw_ext0;\n    if (attn_ext0 > 0) {\n        attn_ext0 *= attn_ext0;\n        value += attn_ext0 * attn_ext0 * extrapolate4(ctx, xsv_ext0, ysv_ext0,\n                                             zsv_ext0, wsv_ext0, dx_ext0,\n                                             dy_ext0, dz_ext0, dw_ext0);\n    }\n\n    // Second extra vertex\n    double attn_ext1 = 2 - dx_ext1 * dx_ext1 - dy_ext1 * dy_ext1 -\n                       dz_ext1 * dz_ext1 - dw_ext1 * dw_ext1;\n    if (attn_ext1 > 0) {\n        attn_ext1 *= attn_ext1;\n        value += attn_ext1 * attn_ext1 * extrapolate4(ctx, xsv_ext1, ysv_ext1,\n                                             zsv_ext1, wsv_ext1, dx_ext1,\n                                             dy_ext1, dz_ext1, dw_ext1);\n    }\n\n    // Third extra vertex\n    double attn_ext2 = 2 - dx_ext2 * dx_ext2 - dy_ext2 * dy_ext2 -\n                       dz_ext2 * dz_ext2 - dw_ext2 * dw_ext2;\n    if (attn_ext2 > 0) {\n        attn_ext2 *= attn_ext2;\n        value += attn_ext2 * attn_ext2 * extrapolate4(ctx, xsv_ext2, ysv_ext2,\n                                             zsv_ext2, wsv_ext2, dx_ext2,\n                                             dy_ext2, dz_ext2, dw_ext2);\n    }\n\n    return value / NORM_CONSTANT_4D;\n}\n",
    "extrapolate2": "static double extrapolate2(\n    struct osn_context* ctx, int xsb, int ysb, double dx, double dy)\n{\n    int16_t* perm = ctx->perm;\n    int index = perm[(perm[xsb & 0xFF] + ysb) & 0xFF] & 0x0E;\n    return gradients2D[index] * dx + gradients2D[index + 1] * dy;\n}\n",
    "open_simplex_noise_init_perm": "int open_simplex_noise_init_perm(\n    struct osn_context* ctx, int16_t p[], int nelements)\n{\n    int i, rc;\n\n    rc = allocate_perm(ctx, nelements, 256);\n    if (rc)\n        return rc;\n    memcpy(ctx->perm, p, sizeof(*ctx->perm) * nelements);\n\n    for (i = 0; i < 256; i++) {\n        // Since 3D has 24 gradients, simple bitmask won't work, so precompute\n        // modulo array.\n        ctx->permGradIndex3D[i] =\n            (int16_t)((ctx->perm[i] % (ARRAYSIZE(gradients3D) / 3)) * 3);\n    }\n    return 0;\n}\n",
    "allocate_perm": "static int allocate_perm(struct osn_context* ctx, int nperm, int ngrad)\n{\n    if (ctx->perm)\n        free(ctx->perm);\n    if (ctx->permGradIndex3D)\n        free(ctx->permGradIndex3D);\n    ctx->perm = malloc(sizeof(*ctx->perm) * nperm);\n    if (!ctx->perm)\n        return -ENOMEM;\n    ctx->permGradIndex3D = malloc(sizeof(*ctx->permGradIndex3D) * ngrad);\n    if (!ctx->permGradIndex3D) {\n        free(ctx->perm);\n        return -ENOMEM;\n    }\n    return 0;\n}\n",
    "extrapolate4": "static double extrapolate4(struct osn_context* ctx, int xsb, int ysb, int zsb,\n    int wsb, double dx, double dy, double dz, double dw)\n{\n    int16_t* perm = ctx->perm;\n    int index =\n        perm[(perm[(perm[(perm[xsb & 0xFF] + ysb) & 0xFF] + zsb) & 0xFF] +\n                 wsb) &\n             0xFF] &\n        0xFC;\n    return gradients4D[index] * dx + gradients4D[index + 1] * dy +\n           gradients4D[index + 2] * dz + gradients4D[index + 3] * dw;\n}\n",
    "extrapolate3": "static double extrapolate3(struct osn_context* ctx, int xsb, int ysb, int zsb,\n    double dx, double dy, double dz)\n{\n    int16_t* perm = ctx->perm;\n    int16_t* permGradIndex3D = ctx->permGradIndex3D;\n    int index =\n        permGradIndex3D[(perm[(perm[xsb & 0xFF] + ysb) & 0xFF] + zsb) & 0xFF];\n    return gradients3D[index] * dx + gradients3D[index + 1] * dy +\n           gradients3D[index + 2] * dz;\n}\n",
    "open_simplex_noise2": "double open_simplex_noise2(struct osn_context* ctx, double x, double y)\n{\n    // Place input coordinates onto grid.\n    double stretchOffset = (x + y) * STRETCH_CONSTANT_2D;\n    double xs = x + stretchOffset;\n    double ys = y + stretchOffset;\n\n    // Floor to get grid coordinates of rhombus (stretched square) super-cell\n    // origin.\n    int xsb = fastFloor(xs);\n    int ysb = fastFloor(ys);\n\n    // Skew out to get actual coordinates of rhombus origin. We'll need these\n    // later.\n    double squishOffset = (xsb + ysb) * SQUISH_CONSTANT_2D;\n    double xb = xsb + squishOffset;\n    double yb = ysb + squishOffset;\n\n    // Compute grid coordinates relative to rhombus origin.\n    double xins = xs - xsb;\n    double yins = ys - ysb;\n\n    // Sum those together to get a value that determines which region we're in.\n    double inSum = xins + yins;\n\n    // Positions relative to origin point.\n    double dx0 = x - xb;\n    double dy0 = y - yb;\n\n    // We'll be defining these inside the next block and using them afterwards.\n    double dx_ext, dy_ext;\n    int xsv_ext, ysv_ext;\n\n    double value = 0;\n\n    // Contribution (1,0)\n    double dx1 = dx0 - 1 - SQUISH_CONSTANT_2D;\n    double dy1 = dy0 - 0 - SQUISH_CONSTANT_2D;\n    double attn1 = 2 - dx1 * dx1 - dy1 * dy1;\n    if (attn1 > 0) {\n        attn1 *= attn1;\n        value += attn1 * attn1 * extrapolate2(ctx, xsb + 1, ysb + 0, dx1, dy1);\n    }\n\n    // Contribution (0,1)\n    double dx2 = dx0 - 0 - SQUISH_CONSTANT_2D;\n    double dy2 = dy0 - 1 - SQUISH_CONSTANT_2D;\n    double attn2 = 2 - dx2 * dx2 - dy2 * dy2;\n    if (attn2 > 0) {\n        attn2 *= attn2;\n        value += attn2 * attn2 * extrapolate2(ctx, xsb + 0, ysb + 1, dx2, dy2);\n    }\n\n    if (inSum <= 1) {  // We're inside the triangle (2-Simplex) at (0,0)\n        double zins = 1 - inSum;\n        if (zins > xins ||\n            zins >\n                yins) {  //(0,0) is one of the closest two triangular vertices\n            if (xins > yins) {\n                xsv_ext = xsb + 1;\n                ysv_ext = ysb - 1;\n                dx_ext = dx0 - 1;\n                dy_ext = dy0 + 1;\n            } else {\n                xsv_ext = xsb - 1;\n                ysv_ext = ysb + 1;\n                dx_ext = dx0 + 1;\n                dy_ext = dy0 - 1;\n            }\n        } else {  //(1,0) and (0,1) are the closest two vertices.\n            xsv_ext = xsb + 1;\n            ysv_ext = ysb + 1;\n            dx_ext = dx0 - 1 - 2 * SQUISH_CONSTANT_2D;\n            dy_ext = dy0 - 1 - 2 * SQUISH_CONSTANT_2D;\n        }\n    } else {  // We're inside the triangle (2-Simplex) at (1,1)\n        double zins = 2 - inSum;\n        if (zins < xins ||\n            zins <\n                yins) {  //(0,0) is one of the closest two triangular vertices\n            if (xins > yins) {\n                xsv_ext = xsb + 2;\n                ysv_ext = ysb + 0;\n                dx_ext = dx0 - 2 - 2 * SQUISH_CONSTANT_2D;\n                dy_ext = dy0 + 0 - 2 * SQUISH_CONSTANT_2D;\n            } else {\n                xsv_ext = xsb + 0;\n                ysv_ext = ysb + 2;\n                dx_ext = dx0 + 0 - 2 * SQUISH_CONSTANT_2D;\n                dy_ext = dy0 - 2 - 2 * SQUISH_CONSTANT_2D;\n            }\n        } else {  //(1,0) and (0,1) are the closest two vertices.\n            dx_ext = dx0;\n            dy_ext = dy0;\n            xsv_ext = xsb;\n            ysv_ext = ysb;\n        }\n        xsb += 1;\n        ysb += 1;\n        dx0 = dx0 - 1 - 2 * SQUISH_CONSTANT_2D;\n        dy0 = dy0 - 1 - 2 * SQUISH_CONSTANT_2D;\n    }\n\n    // Contribution (0,0) or (1,1)\n    double attn0 = 2 - dx0 * dx0 - dy0 * dy0;\n    if (attn0 > 0) {\n        attn0 *= attn0;\n        value += attn0 * attn0 * extrapolate2(ctx, xsb, ysb, dx0, dy0);\n    }\n\n    // Extra Vertex\n    double attn_ext = 2 - dx_ext * dx_ext - dy_ext * dy_ext;\n    if (attn_ext > 0) {\n        attn_ext *= attn_ext;\n        value += attn_ext * attn_ext *\n                 extrapolate2(ctx, xsv_ext, ysv_ext, dx_ext, dy_ext);\n    }\n\n    return value / NORM_CONSTANT_2D;\n}\n",
    "open_simplex_noise3": "double open_simplex_noise3(\n    struct osn_context* ctx, double x, double y, double z)\n{\n    // Place input coordinates on simplectic honeycomb.\n    double stretchOffset = (x + y + z) * STRETCH_CONSTANT_3D;\n    double xs = x + stretchOffset;\n    double ys = y + stretchOffset;\n    double zs = z + stretchOffset;\n\n    // Floor to get simplectic honeycomb coordinates of rhombohedron (stretched\n    // cube) super-cell origin.\n    int xsb = fastFloor(xs);\n    int ysb = fastFloor(ys);\n    int zsb = fastFloor(zs);\n\n    // Skew out to get actual coordinates of rhombohedron origin. We'll need\n    // these later.\n    double squishOffset = (xsb + ysb + zsb) * SQUISH_CONSTANT_3D;\n    double xb = xsb + squishOffset;\n    double yb = ysb + squishOffset;\n    double zb = zsb + squishOffset;\n\n    // Compute simplectic honeycomb coordinates relative to rhombohedral origin.\n    double xins = xs - xsb;\n    double yins = ys - ysb;\n    double zins = zs - zsb;\n\n    // Sum those together to get a value that determines which region we're in.\n    double inSum = xins + yins + zins;\n\n    // Positions relative to origin point.\n    double dx0 = x - xb;\n    double dy0 = y - yb;\n    double dz0 = z - zb;\n\n    // We'll be defining these inside the next block and using them afterwards.\n    double dx_ext0, dy_ext0, dz_ext0;\n    double dx_ext1, dy_ext1, dz_ext1;\n    int xsv_ext0, ysv_ext0, zsv_ext0;\n    int xsv_ext1, ysv_ext1, zsv_ext1;\n\n    double value = 0;\n    if (inSum <= 1) {  // We're inside the tetrahedron (3-Simplex) at (0,0,0)\n\n        // Determine which two of (0,0,1), (0,1,0), (1,0,0) are closest.\n        int8_t aPoint = 0x01;\n        double aScore = xins;\n        int8_t bPoint = 0x02;\n        double bScore = yins;\n        if (aScore >= bScore && zins > bScore) {\n            bScore = zins;\n            bPoint = 0x04;\n        } else if (aScore < bScore && zins > aScore) {\n            aScore = zins;\n            aPoint = 0x04;\n        }\n\n        // Now we determine the two lattice points not part of the tetrahedron\n        // that may contribute.\n        // This depends on the closest two tetrahedral vertices, including\n        // (0,0,0)\n        double wins = 1 - inSum;\n        if (wins > aScore || wins > bScore) {  //(0,0,0) is one of the closest\n            // two tetrahedral vertices.\n            int8_t c = (bScore > aScore ? bPoint : aPoint);  // Our other\n            // closest vertex\n            // is the closest\n            // out of a and b.\n\n            if ((c & 0x01) == 0) {\n                xsv_ext0 = xsb - 1;\n                xsv_ext1 = xsb;\n                dx_ext0 = dx0 + 1;\n                dx_ext1 = dx0;\n            } else {\n                xsv_ext0 = xsv_ext1 = xsb + 1;\n                dx_ext0 = dx_ext1 = dx0 - 1;\n            }\n\n            if ((c & 0x02) == 0) {\n                ysv_ext0 = ysv_ext1 = ysb;\n                dy_ext0 = dy_ext1 = dy0;\n                if ((c & 0x01) == 0) {\n                    ysv_ext1 -= 1;\n                    dy_ext1 += 1;\n                } else {\n                    ysv_ext0 -= 1;\n                    dy_ext0 += 1;\n                }\n            } else {\n                ysv_ext0 = ysv_ext1 = ysb + 1;\n                dy_ext0 = dy_ext1 = dy0 - 1;\n            }\n\n            if ((c & 0x04) == 0) {\n                zsv_ext0 = zsb;\n                zsv_ext1 = zsb - 1;\n                dz_ext0 = dz0;\n                dz_ext1 = dz0 + 1;\n            } else {\n                zsv_ext0 = zsv_ext1 = zsb + 1;\n                dz_ext0 = dz_ext1 = dz0 - 1;\n            }\n        } else {  //(0,0,0) is not one of the closest two tetrahedral vertices.\n            int8_t c = (int8_t)(aPoint | bPoint);  // Our two extra vertices are\n            // determined by the closest\n            // two.\n\n            if ((c & 0x01) == 0) {\n                xsv_ext0 = xsb;\n                xsv_ext1 = xsb - 1;\n                dx_ext0 = dx0 - 2 * SQUISH_CONSTANT_3D;\n                dx_ext1 = dx0 + 1 - SQUISH_CONSTANT_3D;\n            } else {\n                xsv_ext0 = xsv_ext1 = xsb + 1;\n                dx_ext0 = dx0 - 1 - 2 * SQUISH_CONSTANT_3D;\n                dx_ext1 = dx0 - 1 - SQUISH_CONSTANT_3D;\n            }\n\n            if ((c & 0x02) == 0) {\n                ysv_ext0 = ysb;\n                ysv_ext1 = ysb - 1;\n                dy_ext0 = dy0 - 2 * SQUISH_CONSTANT_3D;\n                dy_ext1 = dy0 + 1 - SQUISH_CONSTANT_3D;\n            } else {\n                ysv_ext0 = ysv_ext1 = ysb + 1;\n                dy_ext0 = dy0 - 1 - 2 * SQUISH_CONSTANT_3D;\n                dy_ext1 = dy0 - 1 - SQUISH_CONSTANT_3D;\n            }\n\n            if ((c & 0x04) == 0) {\n                zsv_ext0 = zsb;\n                zsv_ext1 = zsb - 1;\n                dz_ext0 = dz0 - 2 * SQUISH_CONSTANT_3D;\n                dz_ext1 = dz0 + 1 - SQUISH_CONSTANT_3D;\n            } else {\n                zsv_ext0 = zsv_ext1 = zsb + 1;\n                dz_ext0 = dz0 - 1 - 2 * SQUISH_CONSTANT_3D;\n                dz_ext1 = dz0 - 1 - SQUISH_CONSTANT_3D;\n            }\n        }\n\n        // Contribution (0,0,0)\n        double attn0 = 2 - dx0 * dx0 - dy0 * dy0 - dz0 * dz0;\n        if (attn0 > 0) {\n            attn0 *= attn0;\n            value += attn0 * attn0 * extrapolate3(ctx, xsb + 0, ysb + 0,\n                                         zsb + 0, dx0, dy0, dz0);\n        }\n\n        // Contribution (1,0,0)\n        double dx1 = dx0 - 1 - SQUISH_CONSTANT_3D;\n        double dy1 = dy0 - 0 - SQUISH_CONSTANT_3D;\n        double dz1 = dz0 - 0 - SQUISH_CONSTANT_3D;\n        double attn1 = 2 - dx1 * dx1 - dy1 * dy1 - dz1 * dz1;\n        if (attn1 > 0) {\n            attn1 *= attn1;\n            value += attn1 * attn1 * extrapolate3(ctx, xsb + 1, ysb + 0,\n                                         zsb + 0, dx1, dy1, dz1);\n        }\n\n        // Contribution (0,1,0)\n        double dx2 = dx0 - 0 - SQUISH_CONSTANT_3D;\n        double dy2 = dy0 - 1 - SQUISH_CONSTANT_3D;\n        double dz2 = dz1;\n        double attn2 = 2 - dx2 * dx2 - dy2 * dy2 - dz2 * dz2;\n        if (attn2 > 0) {\n            attn2 *= attn2;\n            value += attn2 * attn2 * extrapolate3(ctx, xsb + 0, ysb + 1,\n                                         zsb + 0, dx2, dy2, dz2);\n        }\n\n        // Contribution (0,0,1)\n        double dx3 = dx2;\n        double dy3 = dy1;\n        double dz3 = dz0 - 1 - SQUISH_CONSTANT_3D;\n        double attn3 = 2 - dx3 * dx3 - dy3 * dy3 - dz3 * dz3;\n        if (attn3 > 0) {\n            attn3 *= attn3;\n            value += attn3 * attn3 * extrapolate3(ctx, xsb + 0, ysb + 0,\n                                         zsb + 1, dx3, dy3, dz3);\n        }\n    } else if (inSum >=\n               2) {  // We're inside the tetrahedron (3-Simplex) at (1,1,1)\n\n        // Determine which two tetrahedral vertices are the closest, out of\n        // (1,1,0), (1,0,1), (0,1,1) but not (1,1,1).\n        int8_t aPoint = 0x06;\n        double aScore = xins;\n        int8_t bPoint = 0x05;\n        double bScore = yins;\n        if (aScore <= bScore && zins < bScore) {\n            bScore = zins;\n            bPoint = 0x03;\n        } else if (aScore > bScore && zins < aScore) {\n            aScore = zins;\n            aPoint = 0x03;\n        }\n\n        // Now we determine the two lattice points not part of the tetrahedron\n        // that may contribute.\n        // This depends on the closest two tetrahedral vertices, including\n        // (1,1,1)\n        double wins = 3 - inSum;\n        if (wins < aScore || wins < bScore) {  //(1,1,1) is one of the closest\n            // two tetrahedral vertices.\n            int8_t c = (bScore < aScore ? bPoint : aPoint);  // Our other\n            // closest vertex\n            // is the closest\n            // out of a and b.\n\n            if ((c & 0x01) != 0) {\n                xsv_ext0 = xsb + 2;\n                xsv_ext1 = xsb + 1;\n                dx_ext0 = dx0 - 2 - 3 * SQUISH_CONSTANT_3D;\n                dx_ext1 = dx0 - 1 - 3 * SQUISH_CONSTANT_3D;\n            } else {\n                xsv_ext0 = xsv_ext1 = xsb;\n                dx_ext0 = dx_ext1 = dx0 - 3 * SQUISH_CONSTANT_3D;\n            }\n\n            if ((c & 0x02) != 0) {\n                ysv_ext0 = ysv_ext1 = ysb + 1;\n                dy_ext0 = dy_ext1 = dy0 - 1 - 3 * SQUISH_CONSTANT_3D;\n                if ((c & 0x01) != 0) {\n                    ysv_ext1 += 1;\n                    dy_ext1 -= 1;\n                } else {\n                    ysv_ext0 += 1;\n                    dy_ext0 -= 1;\n                }\n            } else {\n                ysv_ext0 = ysv_ext1 = ysb;\n                dy_ext0 = dy_ext1 = dy0 - 3 * SQUISH_CONSTANT_3D;\n            }\n\n            if ((c & 0x04) != 0) {\n                zsv_ext0 = zsb + 1;\n                zsv_ext1 = zsb + 2;\n                dz_ext0 = dz0 - 1 - 3 * SQUISH_CONSTANT_3D;\n                dz_ext1 = dz0 - 2 - 3 * SQUISH_CONSTANT_3D;\n            } else {\n                zsv_ext0 = zsv_ext1 = zsb;\n                dz_ext0 = dz_ext1 = dz0 - 3 * SQUISH_CONSTANT_3D;\n            }\n        } else {  //(1,1,1) is not one of the closest two tetrahedral vertices.\n            int8_t c = (int8_t)(aPoint & bPoint);  // Our two extra vertices are\n            // determined by the closest\n            // two.\n\n            if ((c & 0x01) != 0) {\n                xsv_ext0 = xsb + 1;\n                xsv_ext1 = xsb + 2;\n                dx_ext0 = dx0 - 1 - SQUISH_CONSTANT_3D;\n                dx_ext1 = dx0 - 2 - 2 * SQUISH_CONSTANT_3D;\n            } else {\n                xsv_ext0 = xsv_ext1 = xsb;\n                dx_ext0 = dx0 - SQUISH_CONSTANT_3D;\n                dx_ext1 = dx0 - 2 * SQUISH_CONSTANT_3D;\n            }\n\n            if ((c & 0x02) != 0) {\n                ysv_ext0 = ysb + 1;\n                ysv_ext1 = ysb + 2;\n                dy_ext0 = dy0 - 1 - SQUISH_CONSTANT_3D;\n                dy_ext1 = dy0 - 2 - 2 * SQUISH_CONSTANT_3D;\n            } else {\n                ysv_ext0 = ysv_ext1 = ysb;\n                dy_ext0 = dy0 - SQUISH_CONSTANT_3D;\n                dy_ext1 = dy0 - 2 * SQUISH_CONSTANT_3D;\n            }\n\n            if ((c & 0x04) != 0) {\n                zsv_ext0 = zsb + 1;\n                zsv_ext1 = zsb + 2;\n                dz_ext0 = dz0 - 1 - SQUISH_CONSTANT_3D;\n                dz_ext1 = dz0 - 2 - 2 * SQUISH_CONSTANT_3D;\n            } else {\n                zsv_ext0 = zsv_ext1 = zsb;\n                dz_ext0 = dz0 - SQUISH_CONSTANT_3D;\n                dz_ext1 = dz0 - 2 * SQUISH_CONSTANT_3D;\n            }\n        }\n\n        // Contribution (1,1,0)\n        double dx3 = dx0 - 1 - 2 * SQUISH_CONSTANT_3D;\n        double dy3 = dy0 - 1 - 2 * SQUISH_CONSTANT_3D;\n        double dz3 = dz0 - 0 - 2 * SQUISH_CONSTANT_3D;\n        double attn3 = 2 - dx3 * dx3 - dy3 * dy3 - dz3 * dz3;\n        if (attn3 > 0) {\n            attn3 *= attn3;\n            value += attn3 * attn3 * extrapolate3(ctx, xsb + 1, ysb + 1,\n                                         zsb + 0, dx3, dy3, dz3);\n        }\n\n        // Contribution (1,0,1)\n        double dx2 = dx3;\n        double dy2 = dy0 - 0 - 2 * SQUISH_CONSTANT_3D;\n        double dz2 = dz0 - 1 - 2 * SQUISH_CONSTANT_3D;\n        double attn2 = 2 - dx2 * dx2 - dy2 * dy2 - dz2 * dz2;\n        if (attn2 > 0) {\n            attn2 *= attn2;\n            value += attn2 * attn2 * extrapolate3(ctx, xsb + 1, ysb + 0,\n                                         zsb + 1, dx2, dy2, dz2);\n        }\n\n        // Contribution (0,1,1)\n        double dx1 = dx0 - 0 - 2 * SQUISH_CONSTANT_3D;\n        double dy1 = dy3;\n        double dz1 = dz2;\n        double attn1 = 2 - dx1 * dx1 - dy1 * dy1 - dz1 * dz1;\n        if (attn1 > 0) {\n            attn1 *= attn1;\n            value += attn1 * attn1 * extrapolate3(ctx, xsb + 0, ysb + 1,\n                                         zsb + 1, dx1, dy1, dz1);\n        }\n\n        // Contribution (1,1,1)\n        dx0 = dx0 - 1 - 3 * SQUISH_CONSTANT_3D;\n        dy0 = dy0 - 1 - 3 * SQUISH_CONSTANT_3D;\n        dz0 = dz0 - 1 - 3 * SQUISH_CONSTANT_3D;\n        double attn0 = 2 - dx0 * dx0 - dy0 * dy0 - dz0 * dz0;\n        if (attn0 > 0) {\n            attn0 *= attn0;\n            value += attn0 * attn0 * extrapolate3(ctx, xsb + 1, ysb + 1,\n                                         zsb + 1, dx0, dy0, dz0);\n        }\n    } else {  // We're inside the octahedron (Rectified 3-Simplex) in between.\n        double aScore;\n        int8_t aPoint;\n        int aIsFurtherSide;\n        double bScore;\n        int8_t bPoint;\n        int bIsFurtherSide;\n\n        // Decide between point (0,0,1) and (1,1,0) as closest\n        double p1 = xins + yins;\n        if (p1 > 1) {\n            aScore = p1 - 1;\n            aPoint = 0x03;\n            aIsFurtherSide = 1;\n        } else {\n            aScore = 1 - p1;\n            aPoint = 0x04;\n            aIsFurtherSide = 0;\n        }\n\n        // Decide between point (0,1,0) and (1,0,1) as closest\n        double p2 = xins + zins;\n        if (p2 > 1) {\n            bScore = p2 - 1;\n            bPoint = 0x05;\n            bIsFurtherSide = 1;\n        } else {\n            bScore = 1 - p2;\n            bPoint = 0x02;\n            bIsFurtherSide = 0;\n        }\n\n        // The closest out of the two (1,0,0) and (0,1,1) will replace the\n        // furthest out of the two decided above, if closer.\n        double p3 = yins + zins;\n        if (p3 > 1) {\n            double score = p3 - 1;\n            if (aScore <= bScore && aScore < score) {\n                aScore = score;\n                aPoint = 0x06;\n                aIsFurtherSide = 1;\n            } else if (aScore > bScore && bScore < score) {\n                bScore = score;\n                bPoint = 0x06;\n                bIsFurtherSide = 1;\n            }\n        } else {\n            double score = 1 - p3;\n            if (aScore <= bScore && aScore < score) {\n                aScore = score;\n                aPoint = 0x01;\n                aIsFurtherSide = 0;\n            } else if (aScore > bScore && bScore < score) {\n                bScore = score;\n                bPoint = 0x01;\n                bIsFurtherSide = 0;\n            }\n        }\n\n        // Where each of the two closest points are determines how the extra two\n        // vertices are calculated.\n        if (aIsFurtherSide == bIsFurtherSide) {\n            if (aIsFurtherSide) {  // Both closest points on (1,1,1) side\n\n                // One of the two extra points is (1,1,1)\n                dx_ext0 = dx0 - 1 - 3 * SQUISH_CONSTANT_3D;\n                dy_ext0 = dy0 - 1 - 3 * SQUISH_CONSTANT_3D;\n                dz_ext0 = dz0 - 1 - 3 * SQUISH_CONSTANT_3D;\n                xsv_ext0 = xsb + 1;\n                ysv_ext0 = ysb + 1;\n                zsv_ext0 = zsb + 1;\n\n                // Other extra point is based on the shared axis.\n                int8_t c = (int8_t)(aPoint & bPoint);\n                if ((c & 0x01) != 0) {\n                    dx_ext1 = dx0 - 2 - 2 * SQUISH_CONSTANT_3D;\n                    dy_ext1 = dy0 - 2 * SQUISH_CONSTANT_3D;\n                    dz_ext1 = dz0 - 2 * SQUISH_CONSTANT_3D;\n                    xsv_ext1 = xsb + 2;\n                    ysv_ext1 = ysb;\n                    zsv_ext1 = zsb;\n                } else if ((c & 0x02) != 0) {\n                    dx_ext1 = dx0 - 2 * SQUISH_CONSTANT_3D;\n                    dy_ext1 = dy0 - 2 - 2 * SQUISH_CONSTANT_3D;\n                    dz_ext1 = dz0 - 2 * SQUISH_CONSTANT_3D;\n                    xsv_ext1 = xsb;\n                    ysv_ext1 = ysb + 2;\n                    zsv_ext1 = zsb;\n                } else {\n                    dx_ext1 = dx0 - 2 * SQUISH_CONSTANT_3D;\n                    dy_ext1 = dy0 - 2 * SQUISH_CONSTANT_3D;\n                    dz_ext1 = dz0 - 2 - 2 * SQUISH_CONSTANT_3D;\n                    xsv_ext1 = xsb;\n                    ysv_ext1 = ysb;\n                    zsv_ext1 = zsb + 2;\n                }\n            } else {  // Both closest points on (0,0,0) side\n\n                // One of the two extra points is (0,0,0)\n                dx_ext0 = dx0;\n                dy_ext0 = dy0;\n                dz_ext0 = dz0;\n                xsv_ext0 = xsb;\n                ysv_ext0 = ysb;\n                zsv_ext0 = zsb;\n\n                // Other extra point is based on the omitted axis.\n                int8_t c = (int8_t)(aPoint | bPoint);\n                if ((c & 0x01) == 0) {\n                    dx_ext1 = dx0 + 1 - SQUISH_CONSTANT_3D;\n                    dy_ext1 = dy0 - 1 - SQUISH_CONSTANT_3D;\n                    dz_ext1 = dz0 - 1 - SQUISH_CONSTANT_3D;\n                    xsv_ext1 = xsb - 1;\n                    ysv_ext1 = ysb + 1;\n                    zsv_ext1 = zsb + 1;\n                } else if ((c & 0x02) == 0) {\n                    dx_ext1 = dx0 - 1 - SQUISH_CONSTANT_3D;\n                    dy_ext1 = dy0 + 1 - SQUISH_CONSTANT_3D;\n                    dz_ext1 = dz0 - 1 - SQUISH_CONSTANT_3D;\n                    xsv_ext1 = xsb + 1;\n                    ysv_ext1 = ysb - 1;\n                    zsv_ext1 = zsb + 1;\n                } else {\n                    dx_ext1 = dx0 - 1 - SQUISH_CONSTANT_3D;\n                    dy_ext1 = dy0 - 1 - SQUISH_CONSTANT_3D;\n                    dz_ext1 = dz0 + 1 - SQUISH_CONSTANT_3D;\n                    xsv_ext1 = xsb + 1;\n                    ysv_ext1 = ysb + 1;\n                    zsv_ext1 = zsb - 1;\n                }\n            }\n        } else {  // One point on (0,0,0) side, one point on (1,1,1) side\n            int8_t c1, c2;\n            if (aIsFurtherSide) {\n                c1 = aPoint;\n                c2 = bPoint;\n            } else {\n                c1 = bPoint;\n                c2 = aPoint;\n            }\n\n            // One contribution is a permutation of (1,1,-1)\n            if ((c1 & 0x01) == 0) {\n                dx_ext0 = dx0 + 1 - SQUISH_CONSTANT_3D;\n                dy_ext0 = dy0 - 1 - SQUISH_CONSTANT_3D;\n                dz_ext0 = dz0 - 1 - SQUISH_CONSTANT_3D;\n                xsv_ext0 = xsb - 1;\n                ysv_ext0 = ysb + 1;\n                zsv_ext0 = zsb + 1;\n            } else if ((c1 & 0x02) == 0) {\n                dx_ext0 = dx0 - 1 - SQUISH_CONSTANT_3D;\n                dy_ext0 = dy0 + 1 - SQUISH_CONSTANT_3D;\n                dz_ext0 = dz0 - 1 - SQUISH_CONSTANT_3D;\n                xsv_ext0 = xsb + 1;\n                ysv_ext0 = ysb - 1;\n                zsv_ext0 = zsb + 1;\n            } else {\n                dx_ext0 = dx0 - 1 - SQUISH_CONSTANT_3D;\n                dy_ext0 = dy0 - 1 - SQUISH_CONSTANT_3D;\n                dz_ext0 = dz0 + 1 - SQUISH_CONSTANT_3D;\n                xsv_ext0 = xsb + 1;\n                ysv_ext0 = ysb + 1;\n                zsv_ext0 = zsb - 1;\n            }\n\n            // One contribution is a permutation of (0,0,2)\n            dx_ext1 = dx0 - 2 * SQUISH_CONSTANT_3D;\n            dy_ext1 = dy0 - 2 * SQUISH_CONSTANT_3D;\n            dz_ext1 = dz0 - 2 * SQUISH_CONSTANT_3D;\n            xsv_ext1 = xsb;\n            ysv_ext1 = ysb;\n            zsv_ext1 = zsb;\n            if ((c2 & 0x01) != 0) {\n                dx_ext1 -= 2;\n                xsv_ext1 += 2;\n            } else if ((c2 & 0x02) != 0) {\n                dy_ext1 -= 2;\n                ysv_ext1 += 2;\n            } else {\n                dz_ext1 -= 2;\n                zsv_ext1 += 2;\n            }\n        }\n\n        // Contribution (1,0,0)\n        double dx1 = dx0 - 1 - SQUISH_CONSTANT_3D;\n        double dy1 = dy0 - 0 - SQUISH_CONSTANT_3D;\n        double dz1 = dz0 - 0 - SQUISH_CONSTANT_3D;\n        double attn1 = 2 - dx1 * dx1 - dy1 * dy1 - dz1 * dz1;\n        if (attn1 > 0) {\n            attn1 *= attn1;\n            value += attn1 * attn1 * extrapolate3(ctx, xsb + 1, ysb + 0,\n                                         zsb + 0, dx1, dy1, dz1);\n        }\n\n        // Contribution (0,1,0)\n        double dx2 = dx0 - 0 - SQUISH_CONSTANT_3D;\n        double dy2 = dy0 - 1 - SQUISH_CONSTANT_3D;\n        double dz2 = dz1;\n        double attn2 = 2 - dx2 * dx2 - dy2 * dy2 - dz2 * dz2;\n        if (attn2 > 0) {\n            attn2 *= attn2;\n            value += attn2 * attn2 * extrapolate3(ctx, xsb + 0, ysb + 1,\n                                         zsb + 0, dx2, dy2, dz2);\n        }\n\n        // Contribution (0,0,1)\n        double dx3 = dx2;\n        double dy3 = dy1;\n        double dz3 = dz0 - 1 - SQUISH_CONSTANT_3D;\n        double attn3 = 2 - dx3 * dx3 - dy3 * dy3 - dz3 * dz3;\n        if (attn3 > 0) {\n            attn3 *= attn3;\n            value += attn3 * attn3 * extrapolate3(ctx, xsb + 0, ysb + 0,\n                                         zsb + 1, dx3, dy3, dz3);\n        }\n\n        // Contribution (1,1,0)\n        double dx4 = dx0 - 1 - 2 * SQUISH_CONSTANT_3D;\n        double dy4 = dy0 - 1 - 2 * SQUISH_CONSTANT_3D;\n        double dz4 = dz0 - 0 - 2 * SQUISH_CONSTANT_3D;\n        double attn4 = 2 - dx4 * dx4 - dy4 * dy4 - dz4 * dz4;\n        if (attn4 > 0) {\n            attn4 *= attn4;\n            value += attn4 * attn4 * extrapolate3(ctx, xsb + 1, ysb + 1,\n                                         zsb + 0, dx4, dy4, dz4);\n        }\n\n        // Contribution (1,0,1)\n        double dx5 = dx4;\n        double dy5 = dy0 - 0 - 2 * SQUISH_CONSTANT_3D;\n        double dz5 = dz0 - 1 - 2 * SQUISH_CONSTANT_3D;\n        double attn5 = 2 - dx5 * dx5 - dy5 * dy5 - dz5 * dz5;\n        if (attn5 > 0) {\n            attn5 *= attn5;\n            value += attn5 * attn5 * extrapolate3(ctx, xsb + 1, ysb + 0,\n                                         zsb + 1, dx5, dy5, dz5);\n        }\n\n        // Contribution (0,1,1)\n        double dx6 = dx0 - 0 - 2 * SQUISH_CONSTANT_3D;\n        double dy6 = dy4;\n        double dz6 = dz5;\n        double attn6 = 2 - dx6 * dx6 - dy6 * dy6 - dz6 * dz6;\n        if (attn6 > 0) {\n            attn6 *= attn6;\n            value += attn6 * attn6 * extrapolate3(ctx, xsb + 0, ysb + 1,\n                                         zsb + 1, dx6, dy6, dz6);\n        }\n    }\n\n    // First extra vertex\n    double attn_ext0 =\n        2 - dx_ext0 * dx_ext0 - dy_ext0 * dy_ext0 - dz_ext0 * dz_ext0;\n    if (attn_ext0 > 0) {\n        attn_ext0 *= attn_ext0;\n        value +=\n            attn_ext0 * attn_ext0 * extrapolate3(ctx, xsv_ext0, ysv_ext0,\n                                        zsv_ext0, dx_ext0, dy_ext0, dz_ext0);\n    }\n\n    // Second extra vertex\n    double attn_ext1 =\n        2 - dx_ext1 * dx_ext1 - dy_ext1 * dy_ext1 - dz_ext1 * dz_ext1;\n    if (attn_ext1 > 0) {\n        attn_ext1 *= attn_ext1;\n        value +=\n            attn_ext1 * attn_ext1 * extrapolate3(ctx, xsv_ext1, ysv_ext1,\n                                        zsv_ext1, dx_ext1, dy_ext1, dz_ext1);\n    }\n\n    return value / NORM_CONSTANT_3D;\n}\n",
    "extra": "{'osn_context': 'struct osn_context {\\n    int16_t* perm;\\n    int16_t* permGradIndex3D;\\n};', 'gradients2D': 'static const int8_t gradients2D[] = {\\n    5, 2, 2, 5, -5, 2, -2, 5, 5, -2, 2, -5, -5, -2, -2, -5,\\n};', 'gradients3D': 'static const signed char gradients3D[] = {\\n    -11, 4, 4, -4, 11, 4, -4, 4, 11, 11, 4, 4, 4, 11, 4, 4, 4, 11, -11, -4, 4,\\n    -4, -11, 4, -4, -4, 11, 11, -4, 4, 4, -11, 4, 4, -4, 11, -11, 4, -4, -4, 11,\\n    -4, -4, 4, -11, 11, 4, -4, 4, 11, -4, 4, 4, -11, -11, -4, -4, -4, -11, -4,\\n    -4, -4, -11, 11, -4, -4, 4, -11, -4, 4, -4, -11,\\n};', 'gradients4D': 'static const signed char gradients4D[] = {\\n    3, 1, 1, 1, 1, 3, 1, 1, 1, 1, 3, 1, 1, 1, 1, 3, -3, 1, 1, 1, -1, 3, 1, 1,\\n    -1, 1, 3, 1, -1, 1, 1, 3, 3, -1, 1, 1, 1, -3, 1, 1, 1, -1, 3, 1, 1, -1, 1,\\n    3, -3, -1, 1, 1, -1, -3, 1, 1, -1, -1, 3, 1, -1, -1, 1, 3, 3, 1, -1, 1, 1,\\n    3, -1, 1, 1, 1, -3, 1, 1, 1, -1, 3, -3, 1, -1, 1, -1, 3, -1, 1, -1, 1, -3,\\n    1, -1, 1, -1, 3, 3, -1, -1, 1, 1, -3, -1, 1, 1, -1, -3, 1, 1, -1, -1, 3, -3,\\n    -1, -1, 1, -1, -3, -1, 1, -1, -1, -3, 1, -1, -1, -1, 3, 3, 1, 1, -1, 1, 3,\\n    1, -1, 1, 1, 3, -1, 1, 1, 1, -3, -3, 1, 1, -1, -1, 3, 1, -1, -1, 1, 3, -1,\\n    -1, 1, 1, -3, 3, -1, 1, -1, 1, -3, 1, -1, 1, -1, 3, -1, 1, -1, 1, -3, -3,\\n    -1, 1, -1, -1, -3, 1, -1, -1, -1, 3, -1, -1, -1, 1, -3, 3, 1, -1, -1, 1, 3,\\n    -1, -1, 1, 1, -3, -1, 1, 1, -1, -3, -3, 1, -1, -1, -1, 3, -1, -1, -1, 1, -3,\\n    -1, -1, 1, -1, -3, 3, -1, -1, -1, 1, -3, -1, -1, 1, -1, -3, -1, 1, -1, -1,\\n    -3, -3, -1, -1, -1, -1, -3, -1, -1, -1, -1, -3, -1, -1, -1, -1, -3,\\n};', 'ARRAYSIZE': '#define ARRAYSIZE(x) (sizeof((x)) / sizeof((x)[0]))', 'DEFAULT_SEED': '#define DEFAULT_SEED (0LL)', 'NORM_CONSTANT_2D': '#define NORM_CONSTANT_2D (47.0)', 'NORM_CONSTANT_3D': '#define NORM_CONSTANT_3D (103.0)', 'NORM_CONSTANT_4D': '#define NORM_CONSTANT_4D (30.0)', 'OPEN_SIMPLEX_NOISE_H__': '#define OPEN_SIMPLEX_NOISE_H__', 'SQUISH_CONSTANT_2D': '#define SQUISH_CONSTANT_2D (0.366025403784439)  // (sqrt(2 + 1) -1) / 2;', 'SQUISH_CONSTANT_3D': '#define SQUISH_CONSTANT_3D (1.0 / 3.0)  // (sqrt(3+1)-1)/3;', 'SQUISH_CONSTANT_4D': '#define SQUISH_CONSTANT_4D (0.309016994374947)  // (sqrt(4 + 1) - 1) / 4;', 'STRETCH_CONSTANT_2D': '#define STRETCH_CONSTANT_2D (-0.211324865405187)  // (1 / sqrt(2 + 1) - 1 ) / 2;', 'STRETCH_CONSTANT_3D': '#define STRETCH_CONSTANT_3D (-1.0 / 6.0)  // (1 / sqrt(3 + 1) - 1) / 3;', 'STRETCH_CONSTANT_4D': '#define STRETCH_CONSTANT_4D (-0.138196601125011)  // (1 / sqrt(4 + 1) - 1) / 4;'} extract_info: [/*\n * OpenSimplex (Simplectic) Noise in C.\n * Ported by Stephen M. Cameron from Kurt Spencer's java implementation\n *\n * v1.1 (October 5, 2014)\n * - Added 2D and 4D implementations.\n * - Proper gradient sets for all dimensions, from a\n *   dimensionally-generalizable scheme with an actual\n *   rhyme and reason behind it.\n * - Removed default permutation array in favor of\n *   default seed.\n * - Changed seed-based constructor to be independent\n *   of any particular randomization library, so results\n *   will be the same when ported to other languages.\n */\n#include <math.h>\n#include <stdlib.h>\n#include <stdint.h>\n#include <string.h>\n#include <errno.h>\n\n#ifndef OPEN_SIMPLEX_NOISE_H__\n#define OPEN_SIMPLEX_NOISE_H__\n\n/*\n * OpenSimplex (Simplectic) Noise in C.\n * Ported to C from Kurt Spencer's java implementation by Stephen M. Cameron\n *\n * v1.1 (October 6, 2014)\n * - Ported to C\n *\n * v1.1 (October 5, 2014)\n * - Added 2D and 4D implementations.\n * - Proper gradient sets for all dimensions, from a\n *   dimensionally-generalizable scheme with an actual\n *   rhyme and reason behind it.\n * - Removed default permutation array in favor of\n *   default seed.\n * - Changed seed-based constructor to be independent\n *   of any particular randomization library, so results\n *   will be the same when ported to other languages.\n */\n#include <stdint.h>\n\nstruct osn_context;\n\nint open_simplex_noise(int64_t seed, struct osn_context** ctx);\nvoid open_simplex_noise_free(struct osn_context* ctx);\nint open_simplex_noise_init_perm(\n    struct osn_context* ctx, int16_t p[], int nelements);\ndouble open_simplex_noise2(struct osn_context* ctx, double x, double y);\ndouble open_simplex_noise3(\n    struct osn_context* ctx, double x, double y, double z);\ndouble open_simplex_noise4(\n    struct osn_context* ctx, double x, double y, double z, double w);\n\n#endif\n\n#define STRETCH_CONSTANT_2D (-0.211324865405187)  // (1 / sqrt(2 + 1) - 1 ) / 2;\n#define SQUISH_CONSTANT_2D (0.366025403784439)  // (sqrt(2 + 1) -1) / 2;\n#define STRETCH_CONSTANT_3D (-1.0 / 6.0)  // (1 / sqrt(3 + 1) - 1) / 3;\n#define SQUISH_CONSTANT_3D (1.0 / 3.0)  // (sqrt(3+1)-1)/3;\n#define STRETCH_CONSTANT_4D (-0.138196601125011)  // (1 / sqrt(4 + 1) - 1) / 4;\n#define SQUISH_CONSTANT_4D (0.309016994374947)  // (sqrt(4 + 1) - 1) / 4;\n\n#define NORM_CONSTANT_2D (47.0)\n#define NORM_CONSTANT_3D (103.0)\n#define NORM_CONSTANT_4D (30.0)\n\n#define DEFAULT_SEED (0LL)\n\nstruct osn_context {\n    int16_t* perm;\n    int16_t* permGradIndex3D;\n};\n\n#define ARRAYSIZE(x) (sizeof((x)) / sizeof((x)[0]))\n\n/*\n * Gradients for 2D. They approximate the directions to the\n * vertices of an octagon from the center.\n */\nstatic const int8_t gradients2D[] = {\n    5, 2, 2, 5, -5, 2, -2, 5, 5, -2, 2, -5, -5, -2, -2, -5,\n};\n\n/*\n * Gradients for 3D. They approximate the directions to the\n * vertices of a rhombicuboctahedron from the center, skewed so\n * that the triangular and square facets can be inscribed inside\n * circles of the same radius.\n */\nstatic const signed char gradients3D[] = {\n    -11, 4, 4, -4, 11, 4, -4, 4, 11, 11, 4, 4, 4, 11, 4, 4, 4, 11, -11, -4, 4,\n    -4, -11, 4, -4, -4, 11, 11, -4, 4, 4, -11, 4, 4, -4, 11, -11, 4, -4, -4, 11,\n    -4, -4, 4, -11, 11, 4, -4, 4, 11, -4, 4, 4, -11, -11, -4, -4, -4, -11, -4,\n    -4, -4, -11, 11, -4, -4, 4, -11, -4, 4, -4, -11,\n};\n\n/*\n * Gradients for 4D. They approximate the directions to the\n * vertices of a disprismatotesseractihexadecachoron from the center,\n * skewed so that the tetrahedral and cubic facets can be inscribed inside\n * spheres of the same radius.\n */\nstatic const signed char gradients4D[] = {\n    3, 1, 1, 1, 1, 3, 1, 1, 1, 1, 3, 1, 1, 1, 1, 3, -3, 1, 1, 1, -1, 3, 1, 1,\n    -1, 1, 3, 1, -1, 1, 1, 3, 3, -1, 1, 1, 1, -3, 1, 1, 1, -1, 3, 1, 1, -1, 1,\n    3, -3, -1, 1, 1, -1, -3, 1, 1, -1, -1, 3, 1, -1, -1, 1, 3, 3, 1, -1, 1, 1,\n    3, -1, 1, 1, 1, -3, 1, 1, 1, -1, 3, -3, 1, -1, 1, -1, 3, -1, 1, -1, 1, -3,\n    1, -1, 1, -1, 3, 3, -1, -1, 1, 1, -3, -1, 1, 1, -1, -3, 1, 1, -1, -1, 3, -3,\n    -1, -1, 1, -1, -3, -1, 1, -1, -1, -3, 1, -1, -1, -1, 3, 3, 1, 1, -1, 1, 3,\n    1, -1, 1, 1, 3, -1, 1, 1, 1, -3, -3, 1, 1, -1, -1, 3, 1, -1, -1, 1, 3, -1,\n    -1, 1, 1, -3, 3, -1, 1, -1, 1, -3, 1, -1, 1, -1, 3, -1, 1, -1, 1, -3, -3,\n    -1, 1, -1, -1, -3, 1, -1, -1, -1, 3, -1, -1, -1, 1, -3, 3, 1, -1, -1, 1, 3,\n    -1, -1, 1, 1, -3, -1, 1, 1, -1, -3, -3, 1, -1, -1, -1, 3, -1, -1, -1, 1, -3,\n    -1, -1, 1, -1, -3, 3, -1, -1, -1, 1, -3, -1, -1, 1, -1, -3, -1, 1, -1, -1,\n    -3, -3, -1, -1, -1, -1, -3, -1, -1, -1, -1, -3, -1, -1, -1, -1, -3,\n};\n\n\n\n\n\n\n\n/*\n * Initializes using a permutation array generated from a 64-bit seed.\n * Generates a proper permutation (i.e. doesn't merely perform N successive pair\n * swaps on a base array).  Uses a simple 64-bit LCG.\n */\n\n\n/* 2D OpenSimplex (Simplectic) Noise. */\n\n/*\n * 3D OpenSimplex (Simplectic) Noise\n */\n\n/*\n * 4D OpenSimplex (Simplectic) Noise.\n */\n]"
}