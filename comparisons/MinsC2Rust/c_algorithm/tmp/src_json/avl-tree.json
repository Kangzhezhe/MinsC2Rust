{
    "avl_tree_to_array": "AVLTreeValue *avl_tree_to_array(AVLTree *tree)\n{\n\tAVLTreeValue *array;\n\tint index;\n\n\t/* Allocate the array */\n\n\tarray = malloc(sizeof(AVLTreeValue) * tree->num_nodes);\n\n\tif (array == NULL) {\n\t\treturn NULL;\n\t}\n\n\tindex = 0;\n\n\t/* Add all keys */\n\n\tavl_tree_to_array_add_subtree(tree->root_node, array, &index);\n\n\treturn array;\n}\n",
    "avl_tree_subtree_height": "int avl_tree_subtree_height(AVLTreeNode *node)\n{\n\tif (node == NULL) {\n\t\treturn 0;\n\t} else {\n\t\treturn node->height;\n\t}\n",
    "avl_tree_to_array_add_subtree": "static void avl_tree_to_array_add_subtree(AVLTreeNode *subtree,\n                                         AVLTreeValue *array,\n                                         int *index)\n{\n\tif (subtree == NULL) {\n\t\treturn;\n\t}\n\n\t/* Add left subtree first */\n\n\tavl_tree_to_array_add_subtree(subtree->children[AVL_TREE_NODE_LEFT],\n\t                              array, index);\n\n\t/* Add this node */\n\n\tarray[*index] = subtree->key;\n\t++*index;\n\n\t/* Finally add right subtree */\n\n\tavl_tree_to_array_add_subtree(subtree->children[AVL_TREE_NODE_RIGHT],\n\t                              array, index);\n}\n",
    "avl_tree_node_value": "AVLTreeValue avl_tree_node_value(AVLTreeNode *node)\n{\n\treturn node->value;\n}\n",
    "avl_tree_lookup": "AVLTreeValue avl_tree_lookup(AVLTree *tree, AVLTreeKey key)\n{\n\tAVLTreeNode *node;\n\n\t/* Find the node */\n\n\tnode = avl_tree_lookup_node(tree, key);\n\n\tif (node == NULL) {\n\t\treturn AVL_TREE_NULL;\n\t} else {\n\t\treturn node->value;\n\t}\n",
    "avl_tree_remove_node": "void avl_tree_remove_node(AVLTree *tree, AVLTreeNode *node)\n{\n\tAVLTreeNode *swap_node;\n\tAVLTreeNode *balance_startpoint;\n\tint i;\n\n\t/* The node to be removed must be swapped with an \"adjacent\"\n\t * node, ie. one which has the closest key to this one. Find\n\t * a node to swap with. */\n\n\tswap_node = avl_tree_node_get_replacement(tree, node);\n\n\tif (swap_node == NULL) {\n\n\t\t/* This is a leaf node and has no children, therefore\n\t\t * it can be immediately removed. */\n\n\t\t/* Unlink this node from its parent. */\n\n\t\tavl_tree_node_replace(tree, node, NULL);\n\n\t\t/* Start rebalancing from the parent of the original node */\n\n\t\tbalance_startpoint = node->parent;\n\n\t} else {\n\t\t/* We will start rebalancing from the old parent of the\n\t\t * swap node.  Sometimes, the old parent is the node we\n\t\t * are removing, in which case we must start rebalancing\n\t\t * from the swap node. */\n\n\t\tif (swap_node->parent == node) {\n\t\t\tbalance_startpoint = swap_node;\n\t\t} else {\n\t\t\tbalance_startpoint = swap_node->parent;\n\t\t}\n\n\t\t/* Copy references in the node into the swap node */\n\n\t\tfor (i=0; i<2; ++i) {\n\t\t\tswap_node->children[i] = node->children[i];\n\n\t\t\tif (swap_node->children[i] != NULL) {\n\t\t\t\tswap_node->children[i]->parent = swap_node;\n\t\t\t}\n\t\t}\n\n\t\tswap_node->height = node->height;\n\n\t\t/* Link the parent's reference to this node */\n\n\t\tavl_tree_node_replace(tree, node, swap_node);\n\t}\n\n\t/* Destroy the node */\n\n\tfree(node);\n\n\t/* Keep track of the number of nodes */\n\n\t--tree->num_nodes;\n\n\t/* Rebalance the tree */\n\n\tavl_tree_balance_to_root(tree, balance_startpoint);\n}\n",
    "avl_tree_node_replace": "static void avl_tree_node_replace(AVLTree *tree, AVLTreeNode *node1,\n                                  AVLTreeNode *node2)\n{\n\tint side;\n\n\t/* Set the node's parent pointer. */\n\n\tif (node2 != NULL) {\n\t\tnode2->parent = node1->parent;\n\t}\n\n\t/* The root node? */\n\n\tif (node1->parent == NULL) {\n\t\ttree->root_node = node2;\n\t} else {\n\t\tside = avl_tree_node_parent_side(node1);\n\t\tnode1->parent->children[side] = node2;\n\n\t\tavl_tree_update_height(node1->parent);\n\t}\n",
    "avl_tree_rotate": "static AVLTreeNode *avl_tree_rotate(AVLTree *tree, AVLTreeNode *node,\n                                    AVLTreeNodeSide direction)\n{\n\tAVLTreeNode *new_root;\n\n\t/* The child of this node will take its place:\n\t   for a left rotation, it is the right child, and vice versa. */\n\n\tnew_root = node->children[1-direction];\n\n\t/* Make new_root the root, update parent pointers. */\n\n\tavl_tree_node_replace(tree, node, new_root);\n\n\t/* Rearrange pointers */\n\n\tnode->children[1-direction] = new_root->children[direction];\n\tnew_root->children[direction] = node;\n\n\t/* Update parent references */\n\n\tnode->parent = new_root;\n\n\tif (node->children[1-direction] != NULL) {\n\t\tnode->children[1-direction]->parent = node;\n\t}\n\n\t/* Update heights of the affected nodes */\n\n\tavl_tree_update_height(new_root);\n\tavl_tree_update_height(node);\n\n\treturn new_root;\n}\n",
    "avl_tree_node_balance": "static AVLTreeNode *avl_tree_node_balance(AVLTree *tree, AVLTreeNode *node)\n{\n\tAVLTreeNode *left_subtree;\n\tAVLTreeNode *right_subtree;\n\tAVLTreeNode *child;\n\tint diff;\n\n\tleft_subtree = node->children[AVL_TREE_NODE_LEFT];\n\tright_subtree = node->children[AVL_TREE_NODE_RIGHT];\n\n\t/* Check the heights of the child trees.  If there is an unbalance\n\t * (difference between left and right > 2), then rotate nodes\n\t * around to fix it */\n\n\tdiff = avl_tree_subtree_height(right_subtree)\n\t     - avl_tree_subtree_height(left_subtree);\n\n\tif (diff >= 2) {\n\n\t\t/* Biased toward the right side too much. */\n\n\t\tchild = right_subtree;\n\n\t\tif (avl_tree_subtree_height(child->children[AVL_TREE_NODE_RIGHT])\n\t\t  < avl_tree_subtree_height(child->children[AVL_TREE_NODE_LEFT])) {\n\n\t\t\t/* If the right child is biased toward the left\n\t\t\t * side, it must be rotated right first (double\n\t\t\t * rotation) */\n\n\t\t\tavl_tree_rotate(tree, right_subtree,\n\t\t\t                AVL_TREE_NODE_RIGHT);\n\t\t}\n\n\t\t/* Perform a left rotation.  After this, the right child will\n\t\t * take the place of this node.  Update the node pointer. */\n\n\t\tnode = avl_tree_rotate(tree, node, AVL_TREE_NODE_LEFT);\n\n\t} else if (diff <= -2) {\n\n\t\t/* Biased toward the left side too much. */\n\n\t\tchild = node->children[AVL_TREE_NODE_LEFT];\n\n\t\tif (avl_tree_subtree_height(child->children[AVL_TREE_NODE_LEFT])\n\t\t  < avl_tree_subtree_height(child->children[AVL_TREE_NODE_RIGHT])) {\n\n\t\t\t/* If the left child is biased toward the right\n\t\t\t * side, it must be rotated right left (double\n\t\t\t * rotation) */\n\n\t\t\tavl_tree_rotate(tree, left_subtree,\n\t\t\t                AVL_TREE_NODE_LEFT);\n\t\t}\n\n\t\t/* Perform a right rotation.  After this, the left child will\n\t\t * take the place of this node.  Update the node pointer. */\n\n\t\tnode = avl_tree_rotate(tree, node, AVL_TREE_NODE_RIGHT);\n\t}\n\n\t/* Update the height of this node */\n\n\tavl_tree_update_height(node);\n\n\treturn node;\n}\n",
    "avl_tree_node_parent": "AVLTreeNode *avl_tree_node_parent(AVLTreeNode *node)\n{\n\treturn node->parent;\n}\n",
    "avl_tree_num_entries": "unsigned int avl_tree_num_entries(AVLTree *tree)\n{\n\treturn tree->num_nodes;\n}\n",
    "avl_tree_lookup_node": "AVLTreeNode *avl_tree_lookup_node(AVLTree *tree, AVLTreeKey key)\n{\n\tAVLTreeNode *node;\n\tint diff;\n\n\t/* Search down the tree and attempt to find the node which\n\t * has the specified key */\n\n\tnode = tree->root_node;\n\n\twhile (node != NULL) {\n\n\t\tdiff = tree->compare_func(key, node->key);\n\n\t\tif (diff == 0) {\n\n\t\t\t/* Keys are equal: return this node */\n\n\t\t\treturn node;\n\n\t\t} else if (diff < 0) {\n\t\t\tnode = node->children[AVL_TREE_NODE_LEFT];\n\t\t} else {\n\t\t\tnode = node->children[AVL_TREE_NODE_RIGHT];\n\t\t}\n\t}\n\n\t/* Not found */\n\n\treturn NULL;\n}\n",
    "avl_tree_update_height": "static void avl_tree_update_height(AVLTreeNode *node)\n{\n\tAVLTreeNode *left_subtree;\n\tAVLTreeNode *right_subtree;\n\tint left_height, right_height;\n\n\tleft_subtree = node->children[AVL_TREE_NODE_LEFT];\n\tright_subtree = node->children[AVL_TREE_NODE_RIGHT];\n\tleft_height = avl_tree_subtree_height(left_subtree);\n\tright_height = avl_tree_subtree_height(right_subtree);\n\n\tif (left_height > right_height) {\n\t\tnode->height = left_height + 1;\n\t} else {\n\t\tnode->height = right_height + 1;\n\t}\n",
    "avl_tree_balance_to_root": "static void avl_tree_balance_to_root(AVLTree *tree, AVLTreeNode *node)\n{\n\tAVLTreeNode *rover;\n\n\trover = node;\n\n\twhile (rover != NULL) {\n\n\t\t/* Balance this node if necessary */\n\n\t\trover = avl_tree_node_balance(tree, rover);\n\n\t\t/* Go to this node's parent */\n\n\t\trover = rover->parent;\n\t}\n",
    "avl_tree_insert": "AVLTreeNode *avl_tree_insert(AVLTree *tree, AVLTreeKey key, AVLTreeValue value)\n{\n\tAVLTreeNode **rover;\n\tAVLTreeNode *new_node;\n\tAVLTreeNode *previous_node;\n\n\t/* Walk down the tree until we reach a NULL pointer */\n\n\trover = &tree->root_node;\n\tprevious_node = NULL;\n\n\twhile (*rover != NULL) {\n\t\tprevious_node = *rover;\n\t\tif (tree->compare_func(key, (*rover)->key) < 0) {\n\t\t\trover = &((*rover)->children[AVL_TREE_NODE_LEFT]);\n\t\t} else {\n\t\t\trover = &((*rover)->children[AVL_TREE_NODE_RIGHT]);\n\t\t}\n\t}\n\n\t/* Create a new node.  Use the last node visited as the parent link. */\n\n\tnew_node = (AVLTreeNode *) malloc(sizeof(AVLTreeNode));\n\n\tif (new_node == NULL) {\n\t\treturn NULL;\n\t}\n\n\tnew_node->children[AVL_TREE_NODE_LEFT] = NULL;\n\tnew_node->children[AVL_TREE_NODE_RIGHT] = NULL;\n\tnew_node->parent = previous_node;\n\tnew_node->key = key;\n\tnew_node->value = value;\n\tnew_node->height = 1;\n\n\t/* Insert at the NULL pointer that was reached */\n\n\t*rover = new_node;\n\n\t/* Rebalance the tree, starting from the previous node. */\n\n\tavl_tree_balance_to_root(tree, previous_node);\n\n\t/* Keep track of the number of entries */\n\n\t++tree->num_nodes;\n\n\treturn new_node;\n}\n",
    "avl_tree_node_key": "AVLTreeKey avl_tree_node_key(AVLTreeNode *node)\n{\n\treturn node->key;\n}\n",
    "avl_tree_node_parent_side": "static AVLTreeNodeSide avl_tree_node_parent_side(AVLTreeNode *node)\n{\n\tif (node->parent->children[AVL_TREE_NODE_LEFT] == node) {\n\t\treturn AVL_TREE_NODE_LEFT;\n\t} else {\n\t\treturn AVL_TREE_NODE_RIGHT;\n\t}\n",
    "avl_tree_root_node": "AVLTreeNode *avl_tree_root_node(AVLTree *tree)\n{\n\treturn tree->root_node;\n}\n",
    "avl_tree_new": "AVLTree *avl_tree_new(AVLTreeCompareFunc compare_func)\n{\n\tAVLTree *new_tree;\n\n\tnew_tree = (AVLTree *) malloc(sizeof(AVLTree));\n\n\tif (new_tree == NULL) {\n\t\treturn NULL;\n\t}\n\n\tnew_tree->root_node = NULL;\n\tnew_tree->compare_func = compare_func;\n\tnew_tree->num_nodes = 0;\n\n\treturn new_tree;\n}\n",
    "avl_tree_free_subtree": "static void avl_tree_free_subtree(AVLTree *tree, AVLTreeNode *node)\n{\n\tif (node == NULL) {\n\t\treturn;\n\t}\n\n\tavl_tree_free_subtree(tree, node->children[AVL_TREE_NODE_LEFT]);\n\tavl_tree_free_subtree(tree, node->children[AVL_TREE_NODE_RIGHT]);\n\n\tfree(node);\n}\n",
    "avl_tree_node_get_replacement": "static AVLTreeNode *avl_tree_node_get_replacement(AVLTree *tree,\n                                                  AVLTreeNode *node)\n{\n\tAVLTreeNode *left_subtree;\n\tAVLTreeNode *right_subtree;\n\tAVLTreeNode *result;\n\tAVLTreeNode *child;\n\tint left_height, right_height;\n\tint side;\n\n\tleft_subtree = node->children[AVL_TREE_NODE_LEFT];\n\tright_subtree = node->children[AVL_TREE_NODE_RIGHT];\n\n\t/* No children? */\n\n\tif (left_subtree == NULL && right_subtree == NULL) {\n\t\treturn NULL;\n\t}\n\n\t/* Pick a node from whichever subtree is taller.  This helps to\n\t * keep the tree balanced. */\n\n\tleft_height = avl_tree_subtree_height(left_subtree);\n\tright_height = avl_tree_subtree_height(right_subtree);\n\n\tif (left_height < right_height) {\n\t\tside = AVL_TREE_NODE_RIGHT;\n\t} else {\n\t\tside = AVL_TREE_NODE_LEFT;\n\t}\n\n\t/* Search down the tree, back towards the center. */\n\n\tresult = node->children[side];\n\n\twhile (result->children[1-side] != NULL) {\n\t\tresult = result->children[1-side];\n\t}\n\n\t/* Unlink the result node, and hook in its remaining child\n\t * (if it has one) to replace it. */\n\n\tchild = result->children[side];\n\tavl_tree_node_replace(tree, result, child);\n\n\t/* Update the subtree height for the result node's old parent. */\n\n\tavl_tree_update_height(result->parent);\n\n\treturn result;\n}\n",
    "avl_tree_free": "void avl_tree_free(AVLTree *tree)\n{\n\t/* Destroy all nodes */\n\n\tavl_tree_free_subtree(tree, tree->root_node);\n\n\t/* Free back the main tree data structure */\n\n\tfree(tree);\n}\n",
    "avl_tree_node_child": "AVLTreeNode *avl_tree_node_child(AVLTreeNode *node, AVLTreeNodeSide side)\n{\n\tif (side == AVL_TREE_NODE_LEFT || side == AVL_TREE_NODE_RIGHT) {\n\t\treturn node->children[side];\n\t} else {\n\t\treturn NULL;\n\t}\n",
    "avl_tree_remove": "int avl_tree_remove(AVLTree *tree, AVLTreeKey key)\n{\n\tAVLTreeNode *node;\n\n\t/* Find the node to remove */\n\n\tnode = avl_tree_lookup_node(tree, key);\n\n\tif (node == NULL) {\n\t\t/* Not found in tree */\n\n\t\treturn 0;\n\t}\n\n\t/* Remove the node */\n\n\tavl_tree_remove_node(tree, node);\n\n\treturn 1;\n}\n",
    "extra": "{'_AVLTree': 'struct _AVLTree {\\n\\tAVLTreeNode *root_node;\\n\\tAVLTreeCompareFunc compare_func;\\n\\tunsigned int num_nodes;\\n};', '_AVLTreeNode': 'struct _AVLTreeNode {\\n\\tAVLTreeNode *children[2];\\n\\tAVLTreeNode *parent;\\n\\tAVLTreeKey key;\\n\\tAVLTreeValue value;\\n\\tint height;\\n};', 'ALGORITHM_AVLTREE_H': '#define ALGORITHM_AVLTREE_H', 'ALLOC_TESTING_H': '#define ALLOC_TESTING_H', 'AVL_TREE_NULL': '#define AVL_TREE_NULL ((void *) 0)', 'calloc': '#define calloc   alloc_test_calloc', 'free': '#define free     alloc_test_free', 'malloc': '#define malloc   alloc_test_malloc', 'realloc': '#define realloc  alloc_test_realloc', 'strdup': '#define strdup   alloc_test_strdup', 'AVLTree': 'typedef struct _AVLTree AVLTree;', 'AVLTreeCompareFunc': 'typedef int (*AVLTreeCompareFunc)(AVLTreeValue value1, AVLTreeValue value2);', 'AVLTreeKey': 'typedef void *AVLTreeKey;', 'AVLTreeNode': 'typedef struct _AVLTreeNode AVLTreeNode;', 'AVLTreeNodeSide': '} AVLTreeNodeSide;', 'AVLTreeValue': 'typedef void *AVLTreeValue;', '__anon07e61d1b0103': 'typedef enum {\\n\\tAVL_TREE_NODE_LEFT = 0,\\n\\tAVL_TREE_NODE_RIGHT = 1\\n} AVLTreeNodeSide;'} extract_info: [/*\n\nCopyright (c) 2005-2008, Simon Howard\n\nPermission to use, copy, modify, and/or distribute this software\nfor any purpose with or without fee is hereby granted, provided\nthat the above copyright notice and this permission notice appear\nin all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL\nWARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE\nAUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR\nCONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,\nNEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN\nCONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n\n */\n\n#include <stdlib.h>\n\n/*\n\nCopyright (c) 2005-2008, Simon Howard\n\nPermission to use, copy, modify, and/or distribute this software\nfor any purpose with or without fee is hereby granted, provided\nthat the above copyright notice and this permission notice appear\nin all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL\nWARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE\nAUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR\nCONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,\nNEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN\nCONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n\n */\n\n/** @file avl-tree.h\n *\n * @brief Balanced binary tree\n *\n * The AVL tree structure is a balanced binary tree which stores\n * a collection of nodes (see @ref AVLTreeNode).  Each node has\n * a key and a value associated with it.  The nodes are sorted\n * within the tree based on the order of their keys. Modifications\n * to the tree are constructed such that the tree remains\n * balanced at all times (there are always roughly equal numbers\n * of nodes on either side of the tree).\n *\n * Balanced binary trees have several uses.  They can be used\n * as a mapping (searching for a value based on its key), or\n * as a set of keys which is always ordered.\n *\n * To create a new AVL tree, use @ref avl_tree_new.  To destroy\n * an AVL tree, use @ref avl_tree_free.\n *\n * To insert a new key-value pair into an AVL tree, use\n * @ref avl_tree_insert.  To remove an entry from an\n * AVL tree, use @ref avl_tree_remove or @ref avl_tree_remove_node.\n *\n * To search an AVL tree, use @ref avl_tree_lookup or\n * @ref avl_tree_lookup_node.\n *\n * Tree nodes can be queried using the\n * @ref avl_tree_node_child,\n * @ref avl_tree_node_parent,\n * @ref avl_tree_node_key and\n * @ref avl_tree_node_value functions.\n */\n\n#ifndef ALGORITHM_AVLTREE_H\n#define ALGORITHM_AVLTREE_H\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n/**\n * An AVL tree balanced binary tree.\n *\n * @see avl_tree_new\n */\n\ntypedef struct _AVLTree AVLTree;\n\n/**\n * A key for an @ref AVLTree.\n */\n\ntypedef void *AVLTreeKey;\n\n/**\n * A value stored in an @ref AVLTree.\n */\n\ntypedef void *AVLTreeValue;\n\n/**\n * A null @ref AVLTreeValue.\n */\n\n#define AVL_TREE_NULL ((void *) 0)\n\n/**\n * A node in an AVL tree.\n *\n * @see avl_tree_node_left_child\n * @see avl_tree_node_right_child\n * @see avl_tree_node_parent\n * @see avl_tree_node_key\n * @see avl_tree_node_value\n */\n\ntypedef struct _AVLTreeNode AVLTreeNode;\n\n/**\n * An @ref AVLTreeNode can have left and right children.\n */\n\ntypedef enum {\n\tAVL_TREE_NODE_LEFT = 0,\n\tAVL_TREE_NODE_RIGHT = 1\n} AVLTreeNodeSide;\n\n/**\n * Type of function used to compare keys in an AVL tree.\n *\n * @param value1           The first key.\n * @param value2           The second key.\n * @return                 A negative number if value1 should be sorted\n *                         before value2, a positive number if value2 should\n *                         be sorted before value1, zero if the two keys\n *                         are equal.\n */\n\ntypedef int (*AVLTreeCompareFunc)(AVLTreeValue value1, AVLTreeValue value2);\n\n/**\n * Create a new AVL tree.\n *\n * @param compare_func    Function to use when comparing keys in the tree.\n * @return                A new AVL tree, or NULL if it was not possible\n *                        to allocate the memory.\n */\n\nAVLTree *avl_tree_new(AVLTreeCompareFunc compare_func);\n\n/**\n * Destroy an AVL tree.\n *\n * @param tree            The tree to destroy.\n */\n\nvoid avl_tree_free(AVLTree *tree);\n\n/**\n * Insert a new key-value pair into an AVL tree.\n *\n * @param tree            The tree.\n * @param key             The key to insert.\n * @param value           The value to insert.\n * @return                The newly created tree node containing the\n *                        key and value, or NULL if it was not possible\n *                        to allocate the new memory.\n */\n\nAVLTreeNode *avl_tree_insert(AVLTree *tree, AVLTreeKey key,\n                             AVLTreeValue value);\n\n/**\n * Remove a node from a tree.\n *\n * @param tree            The tree.\n * @param node            The node to remove\n */\n\nvoid avl_tree_remove_node(AVLTree *tree, AVLTreeNode *node);\n\n/**\n * Remove an entry from a tree, specifying the key of the node to\n * remove.\n *\n * @param tree            The tree.\n * @param key             The key of the node to remove.\n * @return                Zero (false) if no node with the specified key was\n *                        found in the tree, non-zero (true) if a node with\n *                        the specified key was removed.\n */\n\nint avl_tree_remove(AVLTree *tree, AVLTreeKey key);\n\n/**\n * Search an AVL tree for a node with a particular key.  This uses\n * the tree as a mapping.\n *\n * @param tree            The AVL tree to search.\n * @param key             The key to search for.\n * @return                The tree node containing the given key, or NULL\n *                        if no entry with the given key is found.\n */\n\nAVLTreeNode *avl_tree_lookup_node(AVLTree *tree, AVLTreeKey key);\n\n/**\n * Search an AVL tree for a value corresponding to a particular key.\n * This uses the tree as a mapping.  Note that this performs\n * identically to @ref avl_tree_lookup_node, except that the value\n * at the node is returned rather than the node itself.\n *\n * @param tree            The AVL tree to search.\n * @param key             The key to search for.\n * @return                The value associated with the given key, or\n *                        @ref AVL_TREE_NULL if no entry with the given key is\n *                        found.\n */\n\nAVLTreeValue avl_tree_lookup(AVLTree *tree, AVLTreeKey key);\n\n/**\n * Find the root node of a tree.\n *\n * @param tree            The tree.\n * @return                The root node of the tree, or NULL if the tree is\n *                        empty.\n */\n\nAVLTreeNode *avl_tree_root_node(AVLTree *tree);\n\n/**\n * Retrieve the key for a given tree node.\n *\n * @param node            The tree node.\n * @return                The key to the given node.\n */\n\nAVLTreeKey avl_tree_node_key(AVLTreeNode *node);\n\n/**\n * Retrieve the value at a given tree node.\n *\n * @param node            The tree node.\n * @return                The value at the given node.\n */\n\nAVLTreeValue avl_tree_node_value(AVLTreeNode *node);\n\n/**\n * Find the child of a given tree node.\n *\n * @param node            The tree node.\n * @param side            Which child node to get (left or right)\n * @return                The child of the tree node, or NULL if the\n *                        node has no child on the given side.\n */\n\nAVLTreeNode *avl_tree_node_child(AVLTreeNode *node, AVLTreeNodeSide side);\n\n/**\n * Find the parent node of a given tree node.\n *\n * @param node            The tree node.\n * @return                The parent node of the tree node, or NULL if\n *                        this is the root node.\n */\n\nAVLTreeNode *avl_tree_node_parent(AVLTreeNode *node);\n\n/**\n * Find the height of a subtree.\n *\n * @param node            The root node of the subtree.\n * @return                The height of the subtree.\n */\n\nint avl_tree_subtree_height(AVLTreeNode *node);\n\n/**\n * Convert the keys in an AVL tree into a C array.  This allows\n * the tree to be used as an ordered set.\n *\n * @param tree            The tree.\n * @return                A newly allocated C array containing all the keys\n *                        in the tree, in order.  The length of the array\n *                        is equal to the number of entries in the tree\n *                        (see @ref avl_tree_num_entries).\n */\n\nAVLTreeValue *avl_tree_to_array(AVLTree *tree);\n\n/**\n * Retrieve the number of entries in the tree.\n *\n * @param tree            The tree.\n * @return                The number of key-value pairs stored in the tree.\n */\n\nunsigned int avl_tree_num_entries(AVLTree *tree);\n\n#ifdef __cplusplus\n}\n#endif\n\n#endif /* #ifndef ALGORITHM_AVLTREE_H */\n\n\n/* malloc() / free() testing */\n\n#ifdef ALLOC_TESTING\n/*\n\nCopyright (c) 2005-2008, Simon Howard\n\nPermission to use, copy, modify, and/or distribute this software\nfor any purpose with or without fee is hereby granted, provided\nthat the above copyright notice and this permission notice appear\nin all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL\nWARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE\nAUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR\nCONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,\nNEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN\nCONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n\n */\n\n/**\n * @file alloc-testing.h\n *\n * @brief Memory allocation testing framework.\n *\n * This file uses the preprocessor to redefine the standard C dynamic memory\n * allocation functions for testing purposes.  This allows checking that\n * code under test correctly frees back all memory allocated, as well as\n * the ability to impose artificial limits on allocation, to test that\n * code correctly handles out-of-memory scenarios.\n */\n\n#ifndef ALLOC_TESTING_H\n#define ALLOC_TESTING_H\n\n/* Don't redefine the functions in the alloc-testing.c, as we need the\n * standard malloc/free functions. */\n\n#ifndef ALLOC_TESTING_C\n#undef malloc\n#define malloc   alloc_test_malloc\n#undef free\n#define free     alloc_test_free\n#undef realloc\n#define realloc  alloc_test_realloc\n#undef calloc\n#define calloc   alloc_test_calloc\n#undef strdup\n#define strdup   alloc_test_strdup\n#endif\n\n/**\n * Allocate a block of memory.\n *\n * @param bytes          Number of bytes to allocate.\n * @return               Pointer to the new block, or NULL if it was not\n *                       possible to allocate the new block.\n */\n\nvoid *alloc_test_malloc(size_t bytes);\n\n/**\n * Free a block of memory.\n *\n * @param ptr            Pointer to the block to free.\n */\n\nvoid alloc_test_free(void *ptr);\n\n/**\n * Reallocate a previously-allocated block to a new size, preserving\n * contents.\n *\n * @param ptr            Pointer to the existing block.\n * @param bytes          Size of the new block, in bytes.\n * @return               Pointer to the new block, or NULL if it was not\n *                       possible to allocate the new block.\n */\n\nvoid *alloc_test_realloc(void *ptr, size_t bytes);\n\n/**\n * Allocate a block of memory for an array of structures, initialising\n * the contents to zero.\n *\n * @param nmemb          Number of structures to allocate for.\n * @param bytes          Size of each structure, in bytes.\n * @return               Pointer to the new memory block for the array,\n *                       or NULL if it was not possible to allocate the\n *                       new block.\n */\n\nvoid *alloc_test_calloc(size_t nmemb, size_t bytes);\n\n/**\n * Allocate a block of memory containing a copy of a string.\n *\n * @param string         The string to copy.\n * @return               Pointer to the new memory block containing the\n *                       copied string, or NULL if it was not possible\n *                       to allocate the new block.\n */\n\nchar *alloc_test_strdup(const char *string);\n\n/**\n * Set an artificial limit on the amount of memory that can be\n * allocated.\n *\n * @param alloc_count    Number of allocations that are possible after\n *                       this call.  For example, if this has a value\n *                       of 3, malloc() can be called successfully\n *                       three times, but all allocation attempts\n *                       after this will fail.  If this has a negative\n *                       value, the allocation limit is disabled.\n */\n\nvoid alloc_test_set_limit(signed int alloc_count);\n\n/**\n * Get a count of the number of bytes currently allocated.\n *\n * @return               The number of bytes currently allocated by\n *                       the allocation system.\n */\n\nsize_t alloc_test_get_allocated(void);\n\n#endif /* #ifndef ALLOC_TESTING_H */\n\n#endif\n\n/* AVL Tree (balanced binary search tree) */\n\nstruct _AVLTreeNode {\n\tAVLTreeNode *children[2];\n\tAVLTreeNode *parent;\n\tAVLTreeKey key;\n\tAVLTreeValue value;\n\tint height;\n};\n\nstruct _AVLTree {\n\tAVLTreeNode *root_node;\n\tAVLTreeCompareFunc compare_func;\n\tunsigned int num_nodes;\n};\n\n\n\n\n}\n\n/* Update the \"height\" variable of a node, from the heights of its\n * children.  This does not update the height variable of any parent\n * nodes. */\n\n}\n\n/* Find what side a node is relative to its parent */\n\n}\n\n/* Replace node1 with node2 at its parent. */\n\n}\n\n/* Rotate a section of the tree.  'node' is the node at the top\n * of the section to be rotated.  'direction' is the direction in\n * which to rotate the tree: left or right, as shown in the following\n * diagram:\n *\n * Left rotation:              Right rotation:\n *\n *      B                             D\n *     / \\                           / \\\n *    A   D                         B   E\n *       / \\                       / \\\n *      C   E                     A   C\n\n * is rotated to:              is rotated to:\n *\n *        D                           B\n *       / \\                         / \\\n *      B   E                       A   D\n *     / \\                             / \\\n *    A   C                           C   E\n */\n\n\n\n/* Balance a particular tree node.\n *\n * Returns the root node of the new subtree which is replacing the\n * old one. */\n\n\n/* Walk up the tree from the given node, performing any needed rotations */\n\n}\n\n\n/* Find the nearest node to the given node, to replace it.\n * The node returned is unlinked from the tree.\n * Returns NULL if the node has no children. */\n\n\n/* Remove a node from a tree */\n\n\n/* Remove a node by key */\n\n\n\n}\n\n\n\n\n}\n\n\n\n\n\n]"
}