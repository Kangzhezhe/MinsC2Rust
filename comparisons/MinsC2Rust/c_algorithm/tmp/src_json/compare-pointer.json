{
    "pointer_equal": "int pointer_equal(void *location1, void *location2)\n{\n\treturn location1 == location2;\n}\n",
    "pointer_compare": "int pointer_compare(void *location1, void *location2)\n{\n\tif (location1 < location2) {\n\t\treturn -1;\n\t} else if (location1 > location2) {\n\t\treturn 1;\n\t} else {\n\t\treturn 0;\n\t}\n",
    "extra": "{'ALGORITHM_COMPARE_POINTER_H': '#define ALGORITHM_COMPARE_POINTER_H'} extract_info: [/*\n\nCopyright (c) 2005-2008, Simon Howard\n\nPermission to use, copy, modify, and/or distribute this software\nfor any purpose with or without fee is hereby granted, provided\nthat the above copyright notice and this permission notice appear\nin all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL\nWARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE\nAUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR\nCONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,\nNEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN\nCONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n\n */\n\n/*\n\nCopyright (c) 2005-2008, Simon Howard\n\nPermission to use, copy, modify, and/or distribute this software\nfor any purpose with or without fee is hereby granted, provided\nthat the above copyright notice and this permission notice appear\nin all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL\nWARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE\nAUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR\nCONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,\nNEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN\nCONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n\n */\n\n/**\n * @file compare-pointer.h\n *\n * Comparison functions for generic (void) pointers.\n *\n * To find the difference between two pointers, use @ref pointer_compare.\n *\n * To find if two pointers are equal, use @ref pointer_equal.\n */\n\n#ifndef ALGORITHM_COMPARE_POINTER_H\n#define ALGORITHM_COMPARE_POINTER_H\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n/**\n * Compare two pointers to determine if they are equal.\n *\n * @param location1       The first pointer.\n * @param location2       The second pointer.\n * @return                Non-zero if the pointers are equal, zero if they\n *                        are not equal.\n */\n\nint pointer_equal(void *location1, void *location2);\n\n/**\n * Compare two pointers.\n *\n * @param location1       The first pointer.\n * @param location2       The second pointer.\n * @return                A negative value if the first pointer is in a lower\n *                        memory address than the second, a positive value if\n *                        the first pointer is in a higher memory address than\n *                        the second, zero if they point to the same location.\n */\n\nint pointer_compare(void *location1, void *location2);\n\n#ifdef __cplusplus\n}\n#endif\n\n#endif /* #ifndef ALGORITHM_COMPARE_POINTER_H */\n\n\n/* Comparison functions for a generic void pointer */\n\n\n}\n\n\n]"
}