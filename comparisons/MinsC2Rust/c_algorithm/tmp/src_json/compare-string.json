{
    "string_compare": "int string_compare(void *string1, void *string2)\n{\n\tint result;\n\n\tresult = strcmp((char *) string1, (char *) string2);\n\n\tif (result < 0) {\n\t\treturn -1;\n\t} else if (result > 0) {\n\t\treturn 1;\n\t} else {\n\t\treturn 0;\n\t}\n",
    "string_nocase_compare": "int string_nocase_compare(void *string1, void *string2)\n{\n\tchar *p1;\n\tchar *p2;\n\tint c1, c2;\n\n\t/* Iterate over each character in the strings */\n\n\tp1 = (char *) string1;\n\tp2 = (char *) string2;\n\n\tfor (;;) {\n\n\t\tc1 = tolower(*p1);\n\t\tc2 = tolower(*p2);\n\n\t\tif (c1 != c2) {\n\n\t\t\t/* Strings are different */\n\n\t\t\tif (c1 < c2) {\n\t\t\t\treturn -1;\n\t\t\t} else {\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t}\n\n\t\t/* End of string */\n\n\t\tif (c1 == '\\0')\n\t\t\tbreak;\n\n\t\t/* Advance to the next character */\n\n\t\t++p1;\n\t\t++p2;\n\t}\n\n\t/* Reached the end of string and no difference found */\n\n\treturn 0;\n}\n",
    "string_nocase_equal": "int string_nocase_equal(void *string1, void *string2)\n{\n\treturn string_nocase_compare((char *) string1, (char *) string2) == 0;\n}\n",
    "string_equal": "int string_equal(void *string1, void *string2)\n{\n\treturn strcmp((char *) string1, (char *) string2) == 0;\n}\n",
    "extra": "{'ALGORITHM_COMPARE_STRING_H': '#define ALGORITHM_COMPARE_STRING_H'} extract_info: [/*\n\nCopyright (c) 2005-2008, Simon Howard\n\nPermission to use, copy, modify, and/or distribute this software\nfor any purpose with or without fee is hereby granted, provided\nthat the above copyright notice and this permission notice appear\nin all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL\nWARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE\nAUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR\nCONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,\nNEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN\nCONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n\n */\n\n#include <ctype.h>\n#include <stdlib.h>\n#include <string.h>\n\n/*\n\nCopyright (c) 2005-2008, Simon Howard\n\nPermission to use, copy, modify, and/or distribute this software\nfor any purpose with or without fee is hereby granted, provided\nthat the above copyright notice and this permission notice appear\nin all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL\nWARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE\nAUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR\nCONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,\nNEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN\nCONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n\n */\n\n/**\n * @file compare-string.h\n *\n * Comparison functions for strings.\n *\n * To find the difference between two strings, use @ref string_compare.\n *\n * To find if two strings are equal, use @ref string_equal.\n *\n * For case insensitive versions, see @ref string_nocase_compare and\n * @ref string_nocase_equal.\n */\n\n#ifndef ALGORITHM_COMPARE_STRING_H\n#define ALGORITHM_COMPARE_STRING_H\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n/**\n * Compare two strings to determine if they are equal.\n *\n * @param string1         The first string.\n * @param string2         The second string.\n * @return                Non-zero if the strings are equal, zero if they are\n *                        not equal.\n */\n\nint string_equal(void *string1, void *string2);\n\n/**\n * Compare two strings.\n *\n * @param string1         The first string.\n * @param string2         The second string.\n * @return                A negative value if the first string should be\n *                        sorted before the second, a positive value if the\n *                        first string should be sorted after the second,\n *                        zero if the two strings are equal.\n */\n\nint string_compare(void *string1, void *string2);\n\n/**\n * Compare two strings to determine if they are equal, ignoring the\n * case of letters.\n *\n * @param string1         The first string.\n * @param string2         The second string.\n * @return                Non-zero if the strings are equal, zero if they are\n *                        not equal.\n */\n\nint string_nocase_equal(void *string1, void *string2);\n\n/**\n * Compare two strings, ignoring the case of letters.\n *\n * @param string1         The first string.\n * @param string2         The second string.\n * @return                A negative value if the first string should be\n *                        sorted before the second, a positive value if the\n *                        first string should be sorted after the second,\n *                        zero if the two strings are equal.\n */\n\nint string_nocase_compare(void *string1, void *string2);\n\n#ifdef __cplusplus\n}\n#endif\n\n#endif /* #ifndef ALGORITHM_COMPARE_STRING_H */\n\n\n/* Comparison functions for strings */\n\n\n}\n\n/* Comparison functions for strings, which ignore the case of letters. */\n\n\n/* On many systems, strcasecmp or stricmp will give the same functionality\n * as this function.  However, it is non-standard and cannot be relied\n * on to be present. */\n\n\n\n]"
}