{
    "set_enlarge": "static int set_enlarge(Set *set)\n{\n\tSetEntry *rover;\n\tSetEntry *next;\n\tSetEntry **old_table;\n\tunsigned int old_table_size;\n\tunsigned int old_prime_index;\n\tunsigned int index;\n\tunsigned int i;\n\n\t/* Store the old table */\n\n\told_table = set->table;\n\told_table_size = set->table_size;\n\told_prime_index = set->prime_index;\n\n\t/* Use the next table size from the prime number array */\n\n\t++set->prime_index;\n\n\t/* Allocate the new table */\n\n\tif (!set_allocate_table(set)) {\n\t\tset->table = old_table;\n\t\tset->table_size = old_table_size;\n\t\tset->prime_index = old_prime_index;\n\n\t\treturn 0;\n\t}\n\n\t/* Iterate through all entries in the old table and add them\n\t * to the new one */\n\n\tfor (i=0; i<old_table_size; ++i) {\n\n\t\t/* Walk along this chain */\n\n\t\trover = old_table[i];\n\n\t\twhile (rover != NULL) {\n\n\t\t\tnext = rover->next;\n\n\t\t\t/* Hook this entry into the new table */\n\n\t\t\tindex = set->hash_func(rover->data) % set->table_size;\n\t\t\trover->next = set->table[index];\n\t\t\tset->table[index] = rover;\n\n\t\t\t/* Advance to the next entry in the chain */\n\n\t\t\trover = next;\n\t\t}\n\t}\n\n\t/* Free back the old table */\n\n\tfree(old_table);\n\n\t/* Resized successfully */\n\n\treturn 1;\n}\n",
    "set_register_free_function": "void set_register_free_function(Set *set, SetFreeFunc free_func)\n{\n\tset->free_func = free_func;\n}\n",
    "set_iter_has_more": "int set_iter_has_more(SetIterator *iterator)\n{\n\treturn iterator->next_entry != NULL;\n}\n",
    "set_allocate_table": "static int set_allocate_table(Set *set)\n{\n\t/* Determine the table size based on the current prime index.\n\t * An attempt is made here to ensure sensible behavior if the\n\t * maximum prime is exceeded, but in practice other things are\n\t * likely to break long before that happens. */\n\n\tif (set->prime_index < set_num_primes) {\n\t\tset->table_size = set_primes[set->prime_index];\n\t} else {\n\t\tset->table_size = set->entries * 10;\n\t}\n\n\t/* Allocate the table and initialise to NULL */\n\n\tset->table = calloc(set->table_size, sizeof(SetEntry *));\n\n\treturn set->table != NULL;\n}\n",
    "set_num_entries": "unsigned int set_num_entries(Set *set)\n{\n\treturn set->entries;\n}\n",
    "set_insert": "int set_insert(Set *set, SetValue data)\n{\n\tSetEntry *newentry;\n\tSetEntry *rover;\n\tunsigned int index;\n\n\t/* The hash table becomes less efficient as the number of entries\n\t * increases. Check if the percentage used becomes large. */\n\n\tif ((set->entries * 3) / set->table_size > 0) {\n\n\t\t/* The table is more than 1/3 full and must be increased\n\t\t * in size */\n\n\t\tif (!set_enlarge(set)) {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/* Use the hash of the data to determine an index to insert into the\n\t * table at. */\n\n\tindex = set->hash_func(data) % set->table_size;\n\n\t/* Walk along this chain and attempt to determine if this data has\n\t * already been added to the table */\n\n\trover = set->table[index];\n\n\twhile (rover != NULL) {\n\n\t\tif (set->equal_func(data, rover->data) != 0) {\n\n\t\t\t/* This data is already in the set */\n\n\t\t\treturn 0;\n\t\t}\n\n\t\trover = rover->next;\n\t}\n\n\t/* Not in the set.  We must add a new entry. */\n\n\t/* Make a new entry for this data */\n\n\tnewentry = (SetEntry *) malloc(sizeof(SetEntry));\n\n\tif (newentry == NULL) {\n\t\treturn 0;\n\t}\n\n\tnewentry->data = data;\n\n\t/* Link into chain */\n\n\tnewentry->next = set->table[index];\n\tset->table[index] = newentry;\n\n\t/* Keep track of the number of entries in the set */\n\n\t++set->entries;\n\n\t/* Added successfully */\n\n\treturn 1;\n}\n",
    "set_intersection": "Set *set_intersection(Set *set1, Set *set2)\n{\n\tSet *new_set;\n\tSetIterator iterator;\n\tSetValue value;\n\n\tnew_set = set_new(set1->hash_func, set2->equal_func);\n\n\tif (new_set == NULL) {\n\t\treturn NULL;\n\t}\n\n\t/* Iterate over all values in set 1. */\n\n\tset_iterate(set1, &iterator);\n\n\twhile (set_iter_has_more(&iterator)) {\n\n\t\t/* Get the next value */\n\n\t\tvalue = set_iter_next(&iterator);\n\n\t\t/* Is this value in set 2 as well?  If so, it should be\n\t\t * in the new set. */\n\n\t\tif (set_query(set2, value) != 0) {\n\n\t\t\t/* Copy the value first before inserting,\n\t\t\t * if necessary */\n\n\t\t\tif (!set_insert(new_set, value)) {\n\t\t\t\tset_free(new_set);\n\n\t\t\t\treturn NULL;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn new_set;\n}\n",
    "set_iter_next": "SetValue set_iter_next(SetIterator *iterator)\n{\n\tSet *set;\n\tSetValue result;\n\tSetEntry *current_entry;\n\tunsigned int chain;\n\n\tset = iterator->set;\n\n\t/* No more entries? */\n\n\tif (iterator->next_entry == NULL) {\n\t\treturn SET_NULL;\n\t}\n\n\t/* We have the result immediately */\n\n\tcurrent_entry = iterator->next_entry;\n\tresult = current_entry->data;\n\n\t/* Advance next_entry to the next SetEntry in the Set. */\n\n\tif (current_entry->next != NULL) {\n\n\t\t/* Use the next value in this chain */\n\n\t\titerator->next_entry = current_entry->next;\n\n\t} else {\n\n\t\t/* Default value if no valid chain is found */\n\n\t\titerator->next_entry = NULL;\n\n\t\t/* No more entries in this chain.  Search the next chain */\n\n\t\tchain = iterator->next_chain + 1;\n\n\t\twhile (chain < set->table_size) {\n\n\t\t\t/* Is there a chain at this table entry? */\n\n\t\t\tif (set->table[chain] != NULL) {\n\n\t\t\t\t/* Valid chain found! */\n\n\t\t\t\titerator->next_entry = set->table[chain];\n\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t/* Keep searching until we find an empty chain */\n\n\t\t\t++chain;\n\t\t}\n\n\t\titerator->next_chain = chain;\n\t}\n\n\treturn result;\n}\n",
    "set_union": "Set *set_union(Set *set1, Set *set2)\n{\n\tSetIterator iterator;\n\tSet *new_set;\n\tSetValue value;\n\n\tnew_set = set_new(set1->hash_func, set1->equal_func);\n\n\tif (new_set == NULL) {\n\t\treturn NULL;\n\t}\n\n\t/* Add all values from the first set */\n\n\tset_iterate(set1, &iterator);\n\n\twhile (set_iter_has_more(&iterator)) {\n\n\t\t/* Read the next value */\n\n\t\tvalue = set_iter_next(&iterator);\n\n\t\t/* Copy the value into the new set */\n\n\t\tif (!set_insert(new_set, value)) {\n\n\t\t\t/* Failed to insert */\n\n\t\t\tset_free(new_set);\n\t\t\treturn NULL;\n\t\t}\n\t}\n\n\t/* Add all values from the second set */\n\n\tset_iterate(set2, &iterator);\n\n\twhile (set_iter_has_more(&iterator)) {\n\n\t\t/* Read the next value */\n\n\t\tvalue = set_iter_next(&iterator);\n\n\t\t/* Has this value been put into the new set already?\n\t\t * If so, do not insert this again */\n\n\t\tif (set_query(new_set, value) == 0) {\n\t\t\tif (!set_insert(new_set, value)) {\n\n\t\t\t\t/* Failed to insert */\n\n\t\t\t\tset_free(new_set);\n\t\t\t\treturn NULL;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn new_set;\n}\n",
    "set_free_entry": "static void set_free_entry(Set *set, SetEntry *entry)\n{\n\t/* If there is a free function registered, call it to free the\n\t * data for this entry first */\n\n\tif (set->free_func != NULL) {\n\t\tset->free_func(entry->data);\n\t}\n\n\t/* Free the entry structure */\n\n\tfree(entry);\n}\n",
    "set_query": "int set_query(Set *set, SetValue data)\n{\n\tSetEntry *rover;\n\tunsigned int index;\n\n\t/* Look up the data by its hash key */\n\n\tindex = set->hash_func(data) % set->table_size;\n\n\t/* Search this chain, until the corresponding entry is found */\n\n\trover = set->table[index];\n\n\twhile (rover != NULL) {\n\t\tif (set->equal_func(data, rover->data) != 0) {\n\n\t\t\t/* Found the entry */\n\n\t\t\treturn 1;\n\t\t}\n\n\t\t/* Advance to the next entry in the chain */\n\n\t\trover = rover->next;\n\t}\n\n\t/* Not found */\n\n\treturn 0;\n}\n",
    "set_new": "Set *set_new(SetHashFunc hash_func, SetEqualFunc equal_func)\n{\n\tSet *new_set;\n\n\t/* Allocate a new set and fill in the fields */\n\n\tnew_set = (Set *) malloc(sizeof(Set));\n\n\tif (new_set == NULL) {\n\t\treturn NULL;\n\t}\n\n\tnew_set->hash_func = hash_func;\n\tnew_set->equal_func = equal_func;\n\tnew_set->entries = 0;\n\tnew_set->prime_index = 0;\n\tnew_set->free_func = NULL;\n\n\t/* Allocate the table */\n\n\tif (!set_allocate_table(new_set)) {\n\t\tfree(new_set);\n\t\treturn NULL;\n\t}\n\n\treturn new_set;\n}\n",
    "set_free": "void set_free(Set *set)\n{\n\tSetEntry *rover;\n\tSetEntry *next;\n\tunsigned int i;\n\n\t/* Free all entries in all chains */\n\n\tfor (i=0; i<set->table_size; ++i) {\n\t\trover = set->table[i];\n\n\t\twhile (rover != NULL) {\n\t\t\tnext = rover->next;\n\n\t\t\t/* Free this entry */\n\n\t\t\tset_free_entry(set, rover);\n\n\t\t\t/* Advance to the next entry in the chain */\n\n\t\t\trover = next;\n\t\t}\n\t}\n\n\t/* Free the table */\n\n\tfree(set->table);\n\n\t/* Free the set structure */\n\n\tfree(set);\n}\n",
    "set_iterate": "void set_iterate(Set *set, SetIterator *iter)\n{\n\tunsigned int chain;\n\n\titer->set = set;\n\titer->next_entry = NULL;\n\n\t/* Find the first entry */\n\n\tfor (chain = 0; chain < set->table_size; ++chain) {\n\n\t\t/* There is a value at the start of this chain */\n\n\t\tif (set->table[chain] != NULL) {\n\t\t\titer->next_entry = set->table[chain];\n\t\t\tbreak;\n\t\t}\n\t}\n\n\titer->next_chain = chain;\n}\n",
    "set_to_array": "SetValue *set_to_array(Set *set)\n{\n\tSetValue *array;\n\tint array_counter;\n\tunsigned int i;\n\tSetEntry *rover;\n\n\t/* Create an array to hold the set entries */\n\n\tarray = malloc(sizeof(SetValue) * set->entries);\n\n\tif (array == NULL) {\n\t\treturn NULL;\n\t}\n\n\tarray_counter = 0;\n\n\t/* Iterate over all entries in all chains */\n\n\tfor (i=0; i<set->table_size; ++i) {\n\n\t\trover = set->table[i];\n\n\t\twhile (rover != NULL) {\n\n\t\t\t/* Add this value to the array */\n\n\t\t\tarray[array_counter] = rover->data;\n\t\t\t++array_counter;\n\n\t\t\t/* Advance to the next entry */\n\n\t\t\trover = rover->next;\n\t\t}\n\t}\n\n\treturn array;\n}\n",
    "set_remove": "int set_remove(Set *set, SetValue data)\n{\n\tSetEntry **rover;\n\tSetEntry *entry;\n\tunsigned int index;\n\n\t/* Look up the data by its hash key */\n\n\tindex = set->hash_func(data) % set->table_size;\n\n\t/* Search this chain, until the corresponding entry is found */\n\n\trover = &set->table[index];\n\n\twhile (*rover != NULL) {\n\t\tif (set->equal_func(data, (*rover)->data) != 0) {\n\n\t\t\t/* Found the entry */\n\n\t\t\tentry = *rover;\n\n\t\t\t/* Unlink from the linked list */\n\n\t\t\t*rover = entry->next;\n\n\t\t\t/* Update counter */\n\n\t\t\t--set->entries;\n\n\t\t\t/* Free the entry and return */\n\n\t\t\tset_free_entry(set, entry);\n\n\t\t\treturn 1;\n\t\t}\n\n\t\t/* Advance to the next entry */\n\n\t\trover = &((*rover)->next);\n\t}\n\n\t/* Not found in set */\n\n\treturn 0;\n}\n",
    "extra": "{'_Set': 'struct _Set {\\n\\tSetEntry **table;\\n\\tunsigned int entries;\\n\\tunsigned int table_size;\\n\\tunsigned int prime_index;\\n\\tSetHashFunc hash_func;\\n\\tSetEqualFunc equal_func;\\n\\tSetFreeFunc free_func;\\n};', '_SetEntry': 'struct _SetEntry {\\n\\tSetValue data;\\n\\tSetEntry *next;\\n};', '_SetIterator': 'struct _SetIterator {\\n\\tSet *set;\\n\\tSetEntry *next_entry;\\n\\tunsigned int next_chain;\\n};', 'set_num_primes': 'static const unsigned int set_num_primes = sizeof(set_primes) \\\\/ sizeof(int);', 'set_primes': 'static const unsigned int set_primes[] = {\\n\\t193, 389, 769, 1543, 3079, 6151, 12289, 24593, 49157, 98317,\\n\\t196613, 393241, 786433, 1572869, 3145739, 6291469,\\n\\t12582917, 25165843, 50331653, 100663319, 201326611,\\n\\t402653189, 805306457, 1610612741,\\n};', 'ALGORITHM_SET_H': '#define ALGORITHM_SET_H', 'ALLOC_TESTING_H': '#define ALLOC_TESTING_H', 'SET_NULL': '#define SET_NULL ((void *) 0)', 'calloc': '#define calloc   alloc_test_calloc', 'free': '#define free     alloc_test_free', 'malloc': '#define malloc   alloc_test_malloc', 'realloc': '#define realloc  alloc_test_realloc', 'strdup': '#define strdup   alloc_test_strdup', 'Set': 'typedef struct _Set Set;', 'SetEntry': 'typedef struct _SetEntry SetEntry;', 'SetEqualFunc': 'typedef int (*SetEqualFunc)(SetValue value1, SetValue value2);', 'SetFreeFunc': 'typedef void (*SetFreeFunc)(SetValue value);', 'SetHashFunc': 'typedef unsigned int (*SetHashFunc)(SetValue value);', 'SetIterator': 'typedef struct _SetIterator SetIterator;', 'SetValue': 'typedef void *SetValue;'} extract_info: [/*\n\nCopyright (c) 2005-2008, Simon Howard\n\nPermission to use, copy, modify, and/or distribute this software\nfor any purpose with or without fee is hereby granted, provided\nthat the above copyright notice and this permission notice appear\nin all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL\nWARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE\nAUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR\nCONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,\nNEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN\nCONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n\n */\n\n#include <stdlib.h>\n#include <string.h>\n/*\n\nCopyright (c) 2005-2008, Simon Howard\n\nPermission to use, copy, modify, and/or distribute this software\nfor any purpose with or without fee is hereby granted, provided\nthat the above copyright notice and this permission notice appear\nin all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL\nWARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE\nAUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR\nCONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,\nNEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN\nCONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n\n */\n\n/**\n * @file set.h\n *\n * @brief Set of values.\n *\n * A set stores a collection of values.  Each value can only exist once in\n * the set.\n *\n * To create a new set, use @ref set_new.  To destroy a set, use\n * @ref set_free.\n *\n * To add a value to a set, use @ref set_insert.  To remove a value\n * from a set, use @ref set_remove.\n *\n * To find the number of entries in a set, use @ref set_num_entries.\n *\n * To query if a particular value is in a set, use @ref set_query.\n *\n * To iterate over all values in a set, use @ref set_iterate to initialise\n * a @ref SetIterator structure, with @ref set_iter_next and\n * @ref set_iter_has_more to read each value in turn.\n *\n * Two sets can be combined (union) using @ref set_union, while the\n * intersection of two sets can be generated using @ref set_intersection.\n */\n\n#ifndef ALGORITHM_SET_H\n#define ALGORITHM_SET_H\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n/**\n * Represents a set of values.  Created using the @ref set_new function and\n * destroyed using the @ref set_free function.\n */\n\ntypedef struct _Set Set;\n\n/**\n * An object used to iterate over a set.\n *\n * @see set_iterate\n */\n\ntypedef struct _SetIterator SetIterator;\n\n/**\n * Internal structure representing an entry in the set.\n */\n\ntypedef struct _SetEntry SetEntry;\n\n/**\n * A value stored in a @ref Set.\n */\n\ntypedef void *SetValue;\n\n/**\n * Definition of a @ref SetIterator.\n */\n\nstruct _SetIterator {\n\tSet *set;\n\tSetEntry *next_entry;\n\tunsigned int next_chain;\n};\n\n/**\n * A null @ref SetValue.\n */\n\n#define SET_NULL ((void *) 0)\n\n/**\n * Hash function.  Generates a hash key for values to be stored in a set.\n */\n\ntypedef unsigned int (*SetHashFunc)(SetValue value);\n\n/**\n * Equality function.  Compares two values to determine if they are\n * equivalent.\n */\n\ntypedef int (*SetEqualFunc)(SetValue value1, SetValue value2);\n\n/**\n * Function used to free values stored in a set.  See\n * @ref set_register_free_function.\n */\n\ntypedef void (*SetFreeFunc)(SetValue value);\n\n/**\n * Create a new set.\n *\n * @param hash_func     Hash function used on values in the set.\n * @param equal_func    Compares two values in the set to determine\n *                      if they are equal.\n * @return              A new set, or NULL if it was not possible to\n *                      allocate the memory for the set.\n */\n\nSet *set_new(SetHashFunc hash_func, SetEqualFunc equal_func);\n\n/**\n * Destroy a set.\n *\n * @param set           The set to destroy.\n */\n\nvoid set_free(Set *set);\n\n/**\n * Register a function to be called when values are removed from\n * the set.\n *\n * @param set           The set.\n * @param free_func     Function to call when values are removed from the\n *                      set.\n */\n\nvoid set_register_free_function(Set *set, SetFreeFunc free_func);\n\n/**\n * Add a value to a set.\n *\n * @param set           The set.\n * @param data          The value to add to the set.\n * @return              Non-zero (true) if the value was added to the set,\n *                      zero (false) if it already exists in the set, or\n *                      if it was not possible to allocate memory for the\n *                      new entry.\n */\n\nint set_insert(Set *set, SetValue data);\n\n/**\n * Remove a value from a set.\n *\n * @param set           The set.\n * @param data          The value to remove from the set.\n * @return              Non-zero (true) if the value was found and removed\n *                      from the set, zero (false) if the value was not\n *                      found in the set.\n */\n\nint set_remove(Set *set, SetValue data);\n\n/**\n * Query if a particular value is in a set.\n *\n * @param set           The set.\n * @param data          The value to query for.\n * @return              Zero if the value is not in the set, non-zero if the\n *                      value is in the set.\n */\n\nint set_query(Set *set, SetValue data);\n\n/**\n * Retrieve the number of entries in a set\n *\n * @param set           The set.\n * @return              A count of the number of entries in the set.\n */\n\nunsigned int set_num_entries(Set *set);\n\n/**\n * Create an array containing all entries in a set.\n *\n * @param set              The set.\n * @return                 An array containing all entries in the set,\n *                         or NULL if it was not possible to allocate\n *                         memory for the array.\n */\n\nSetValue *set_to_array(Set *set);\n\n/**\n * Perform a union of two sets.\n *\n * @param set1             The first set.\n * @param set2             The second set.\n * @return                 A new set containing all values which are in the\n *                         first or second sets, or NULL if it was not\n *                         possible to allocate memory for the new set.\n */\n\nSet *set_union(Set *set1, Set *set2);\n\n/**\n * Perform an intersection of two sets.\n *\n * @param set1             The first set.\n * @param set2             The second set.\n * @return                 A new set containing all values which are in both\n *                         set, or NULL if it was not possible to allocate\n *                         memory for the new set.\n */\n\nSet *set_intersection(Set *set1, Set *set2);\n\n/**\n * Initialise a @ref SetIterator structure to iterate over the values\n * in a set.\n *\n * @param set              The set to iterate over.\n * @param iter             Pointer to an iterator structure to initialise.\n */\n\nvoid set_iterate(Set *set, SetIterator *iter);\n\n/**\n * Determine if there are more values in the set to iterate over.\n *\n * @param iterator         The set iterator object.\n * @return                 Zero if there are no more values in the set\n *                         to iterate over, non-zero if there are more\n *                         values to be read.\n */\n\nint set_iter_has_more(SetIterator *iterator);\n\n/**\n * Using a set iterator, retrieve the next value from the set.\n *\n * @param iterator         The set iterator.\n * @return                 The next value from the set, or @ref SET_NULL if no\n *                         more values are available.\n */\n\nSetValue set_iter_next(SetIterator *iterator);\n\n#ifdef __cplusplus\n}\n#endif\n\n#endif /* #ifndef ALGORITHM_SET_H */\n\n\n/* malloc() / free() testing */\n\n#ifdef ALLOC_TESTING\n/*\n\nCopyright (c) 2005-2008, Simon Howard\n\nPermission to use, copy, modify, and/or distribute this software\nfor any purpose with or without fee is hereby granted, provided\nthat the above copyright notice and this permission notice appear\nin all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL\nWARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE\nAUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR\nCONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,\nNEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN\nCONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n\n */\n\n/**\n * @file alloc-testing.h\n *\n * @brief Memory allocation testing framework.\n *\n * This file uses the preprocessor to redefine the standard C dynamic memory\n * allocation functions for testing purposes.  This allows checking that\n * code under test correctly frees back all memory allocated, as well as\n * the ability to impose artificial limits on allocation, to test that\n * code correctly handles out-of-memory scenarios.\n */\n\n#ifndef ALLOC_TESTING_H\n#define ALLOC_TESTING_H\n\n/* Don't redefine the functions in the alloc-testing.c, as we need the\n * standard malloc/free functions. */\n\n#ifndef ALLOC_TESTING_C\n#undef malloc\n#define malloc   alloc_test_malloc\n#undef free\n#define free     alloc_test_free\n#undef realloc\n#define realloc  alloc_test_realloc\n#undef calloc\n#define calloc   alloc_test_calloc\n#undef strdup\n#define strdup   alloc_test_strdup\n#endif\n\n/**\n * Allocate a block of memory.\n *\n * @param bytes          Number of bytes to allocate.\n * @return               Pointer to the new block, or NULL if it was not\n *                       possible to allocate the new block.\n */\n\nvoid *alloc_test_malloc(size_t bytes);\n\n/**\n * Free a block of memory.\n *\n * @param ptr            Pointer to the block to free.\n */\n\nvoid alloc_test_free(void *ptr);\n\n/**\n * Reallocate a previously-allocated block to a new size, preserving\n * contents.\n *\n * @param ptr            Pointer to the existing block.\n * @param bytes          Size of the new block, in bytes.\n * @return               Pointer to the new block, or NULL if it was not\n *                       possible to allocate the new block.\n */\n\nvoid *alloc_test_realloc(void *ptr, size_t bytes);\n\n/**\n * Allocate a block of memory for an array of structures, initialising\n * the contents to zero.\n *\n * @param nmemb          Number of structures to allocate for.\n * @param bytes          Size of each structure, in bytes.\n * @return               Pointer to the new memory block for the array,\n *                       or NULL if it was not possible to allocate the\n *                       new block.\n */\n\nvoid *alloc_test_calloc(size_t nmemb, size_t bytes);\n\n/**\n * Allocate a block of memory containing a copy of a string.\n *\n * @param string         The string to copy.\n * @return               Pointer to the new memory block containing the\n *                       copied string, or NULL if it was not possible\n *                       to allocate the new block.\n */\n\nchar *alloc_test_strdup(const char *string);\n\n/**\n * Set an artificial limit on the amount of memory that can be\n * allocated.\n *\n * @param alloc_count    Number of allocations that are possible after\n *                       this call.  For example, if this has a value\n *                       of 3, malloc() can be called successfully\n *                       three times, but all allocation attempts\n *                       after this will fail.  If this has a negative\n *                       value, the allocation limit is disabled.\n */\n\nvoid alloc_test_set_limit(signed int alloc_count);\n\n/**\n * Get a count of the number of bytes currently allocated.\n *\n * @return               The number of bytes currently allocated by\n *                       the allocation system.\n */\n\nsize_t alloc_test_get_allocated(void);\n\n#endif /* #ifndef ALLOC_TESTING_H */\n\n#endif\n\n/* A set */\n\nstruct _SetEntry {\n\tSetValue data;\n\tSetEntry *next;\n};\n\nstruct _Set {\n\tSetEntry **table;\n\tunsigned int entries;\n\tunsigned int table_size;\n\tunsigned int prime_index;\n\tSetHashFunc hash_func;\n\tSetEqualFunc equal_func;\n\tSetFreeFunc free_func;\n};\n\n/* This is a set of good hash table prime numbers, from:\n *   http://planetmath.org/encyclopedia/GoodHashTablePrimes.html\n * Each prime is roughly double the previous value, and as far as\n * possible from the nearest powers of two. */\n\nstatic const unsigned int set_primes[] = {\n\t193, 389, 769, 1543, 3079, 6151, 12289, 24593, 49157, 98317,\n\t196613, 393241, 786433, 1572869, 3145739, 6291469,\n\t12582917, 25165843, 50331653, 100663319, 201326611,\n\t402653189, 805306457, 1610612741,\n};\n\nstatic const unsigned int set_num_primes = sizeof(set_primes) / sizeof(int);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n]"
}