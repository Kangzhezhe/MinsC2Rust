{
    "test_binary_heap_new_free": "void test_binary_heap_new_free(void)\n{\n\tBinaryHeap *heap;\n\tint i;\n\n\tfor (i=0; i<NUM_TEST_VALUES; ++i) {\n\t\theap = binary_heap_new(BINARY_HEAP_TYPE_MIN, int_compare);\n\t\tbinary_heap_free(heap);\n\t}\n\n\t/* Test low memory scenario */\n\n\talloc_test_set_limit(0);\n\theap = binary_heap_new(BINARY_HEAP_TYPE_MIN, int_compare);\n\tassert(heap == NULL);\n\n\talloc_test_set_limit(1);\n\theap = binary_heap_new(BINARY_HEAP_TYPE_MIN, int_compare);\n\tassert(heap == NULL);\n}\n",
    "test_max_heap": "void test_max_heap(void)\n{\n\tBinaryHeap *heap;\n\tint *val;\n\tint i;\n\n\theap = binary_heap_new(BINARY_HEAP_TYPE_MAX, int_compare);\n\n\t/* Push a load of values onto the heap */\n\n\tfor (i=0; i<NUM_TEST_VALUES; ++i) {\n\t\ttest_array[i] = i;\n\t\tassert(binary_heap_insert(heap, &test_array[i]) != 0);\n\t}\n\n\t/* Pop values off the heap and check they are in order */\n\n\ti = NUM_TEST_VALUES;\n\twhile (binary_heap_num_entries(heap) > 0) {\n\t\tval = (int *) binary_heap_pop(heap);\n\n\t\tassert(*val == i - 1);\n\t\ti = *val;\n\t}\n\n\tbinary_heap_free(heap);\n}\n",
    "main": "int main(int argc, char *argv[])\n{\n\trun_tests(tests);\n  printf(\"num_assert: %lu\\n\", num_assert);\n\treturn 0;\n}\n",
    "test_out_of_memory": "void test_out_of_memory(void)\n{\n\tBinaryHeap *heap;\n\tint *value;\n\tint values[] = {\n\t\t15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0,\n\t};\n\tint i;\n\n\t/* Allocate a heap and fill to the default limit */\n\n\theap = binary_heap_new(BINARY_HEAP_TYPE_MIN, int_compare);\n\n\talloc_test_set_limit(0);\n\n\tfor (i=0; i<16; ++i) {\n\t\tassert(binary_heap_insert(heap, &values[i]) != 0);\n\t}\n\n\tassert(binary_heap_num_entries(heap) == 16);\n\n\t/* Check that we cannot add new values */\n\n\tfor (i=0; i<16; ++i) {\n\t\tassert(binary_heap_insert(heap, &values[i]) == 0);\n\t\tassert(binary_heap_num_entries(heap) == 16);\n\t}\n\n\t/* Check that we can read the values back out again and they\n\t * are in the right order. */\n\n\tfor (i=0; i<16; ++i) {\n\t\tvalue = binary_heap_pop(heap);\n\t\tassert(*value == i);\n\t}\n\n\tassert(binary_heap_num_entries(heap) == 0);\n\n\tbinary_heap_free(heap);\n}\n",
    "test_min_heap": "void test_min_heap(void)\n{\n\tBinaryHeap *heap;\n\tint *val;\n\tint i;\n\n\theap = binary_heap_new(BINARY_HEAP_TYPE_MIN, int_compare);\n\n\t/* Push a load of values onto the heap */\n\n\tfor (i=0; i<NUM_TEST_VALUES; ++i) {\n\t\ttest_array[i] = i;\n\t\tassert(binary_heap_insert(heap, &test_array[i]) != 0);\n\t}\n\n\t/* Pop values off the heap and check they are in order */\n\n\ti = -1;\n\twhile (binary_heap_num_entries(heap) > 0) {\n\t\tval = (int *) binary_heap_pop(heap);\n\n\t\tassert(*val == i + 1);\n\t\ti = *val;\n\t}\n\n\t/* Test popping from an empty heap */\n\n\tassert(binary_heap_num_entries(heap) == 0);\n\tassert(binary_heap_pop(heap) == BINARY_HEAP_NULL);\n\n\tbinary_heap_free(heap);\n}\n",
    "test_binary_heap_insert": "void test_binary_heap_insert(void)\n{\n\tBinaryHeap *heap;\n\tint i;\n\n\theap = binary_heap_new(BINARY_HEAP_TYPE_MIN, int_compare);\n\n\tfor (i=0; i<NUM_TEST_VALUES; ++i) {\n\t\ttest_array[i] = i;\n\t\tassert(binary_heap_insert(heap, &test_array[i]) != 0);\n\t}\n\n\tassert(binary_heap_num_entries(heap) == NUM_TEST_VALUES);\n\n\tbinary_heap_free(heap);\n}\n",
    "extra": "{'num_assert': '_Atomic size_t num_assert = 0;', 'test_array': 'int test_array[NUM_TEST_VALUES];', 'tests': 'static UnitTestFunction tests[] = {\\n\\ttest_binary_heap_new_free,\\n\\ttest_binary_heap_insert,\\n\\ttest_min_heap,\\n\\ttest_max_heap,\\n\\ttest_out_of_memory,\\n\\tNULL\\n};', 'ALGORITHM_BINARY_HEAP_H': '#define ALGORITHM_BINARY_HEAP_H', 'ALGORITHM_COMPARE_INT_H': '#define ALGORITHM_COMPARE_INT_H', 'ALLOC_TESTING_H': '#define ALLOC_TESTING_H', 'BINARY_HEAP_NULL': '#define BINARY_HEAP_NULL ((void *) 0)', 'NUM_TEST_VALUES': '#define NUM_TEST_VALUES 10000', 'TEST_FRAMEWORK_H': '#define TEST_FRAMEWORK_H', 'assert': '#define assert(expr)                                                           \\\\', 'calloc': '#define calloc   alloc_test_calloc', 'free': '#define free     alloc_test_free', 'malloc': '#define malloc   alloc_test_malloc', 'realloc': '#define realloc  alloc_test_realloc', 'strdup': '#define strdup   alloc_test_strdup', 'BinaryHeap': 'typedef struct _BinaryHeap BinaryHeap;', 'BinaryHeapCompareFunc': 'typedef int (*BinaryHeapCompareFunc)(BinaryHeapValue value1,\\n                                     BinaryHeapValue value2);', 'BinaryHeapType': '} BinaryHeapType;', 'BinaryHeapValue': 'typedef void *BinaryHeapValue;', 'UnitTestFunction': 'typedef void (*UnitTestFunction)(void);', '__anon1bb8d5f00103': 'typedef enum {\\n\\t/** A minimum heap. */\\n\\n\\tBINARY_HEAP_TYPE_MIN,\\n\\n\\t/** A maximum heap. */\\n\\n\\tBINARY_HEAP_TYPE_MAX\\n} BinaryHeapType;'} extract_info: [/*\n\nCopyright (c) 2005-2008, Simon Howard\n\nPermission to use, copy, modify, and/or distribute this software\nfor any purpose with or without fee is hereby granted, provided\nthat the above copyright notice and this permission notice appear\nin all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL\nWARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE\nAUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR\nCONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,\nNEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN\nCONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n\n */\n\n#include <stdlib.h>\n#include <assert.h>\n\n/*\n\nCopyright (c) 2005-2008, Simon Howard\n\nPermission to use, copy, modify, and/or distribute this software\nfor any purpose with or without fee is hereby granted, provided\nthat the above copyright notice and this permission notice appear\nin all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL\nWARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE\nAUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR\nCONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,\nNEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN\nCONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n\n */\n\n/**\n * @file alloc-testing.h\n *\n * @brief Memory allocation testing framework.\n *\n * This file uses the preprocessor to redefine the standard C dynamic memory\n * allocation functions for testing purposes.  This allows checking that\n * code under test correctly frees back all memory allocated, as well as\n * the ability to impose artificial limits on allocation, to test that\n * code correctly handles out-of-memory scenarios.\n */\n\n#ifndef ALLOC_TESTING_H\n#define ALLOC_TESTING_H\n\n/* Don't redefine the functions in the alloc-testing.c, as we need the\n * standard malloc/free functions. */\n\n#ifndef ALLOC_TESTING_C\n#undef malloc\n#define malloc   alloc_test_malloc\n#undef free\n#define free     alloc_test_free\n#undef realloc\n#define realloc  alloc_test_realloc\n#undef calloc\n#define calloc   alloc_test_calloc\n#undef strdup\n#define strdup   alloc_test_strdup\n#endif\n\n/**\n * Allocate a block of memory.\n *\n * @param bytes          Number of bytes to allocate.\n * @return               Pointer to the new block, or NULL if it was not\n *                       possible to allocate the new block.\n */\n\nvoid *alloc_test_malloc(size_t bytes);\n\n/**\n * Free a block of memory.\n *\n * @param ptr            Pointer to the block to free.\n */\n\nvoid alloc_test_free(void *ptr);\n\n/**\n * Reallocate a previously-allocated block to a new size, preserving\n * contents.\n *\n * @param ptr            Pointer to the existing block.\n * @param bytes          Size of the new block, in bytes.\n * @return               Pointer to the new block, or NULL if it was not\n *                       possible to allocate the new block.\n */\n\nvoid *alloc_test_realloc(void *ptr, size_t bytes);\n\n/**\n * Allocate a block of memory for an array of structures, initialising\n * the contents to zero.\n *\n * @param nmemb          Number of structures to allocate for.\n * @param bytes          Size of each structure, in bytes.\n * @return               Pointer to the new memory block for the array,\n *                       or NULL if it was not possible to allocate the\n *                       new block.\n */\n\nvoid *alloc_test_calloc(size_t nmemb, size_t bytes);\n\n/**\n * Allocate a block of memory containing a copy of a string.\n *\n * @param string         The string to copy.\n * @return               Pointer to the new memory block containing the\n *                       copied string, or NULL if it was not possible\n *                       to allocate the new block.\n */\n\nchar *alloc_test_strdup(const char *string);\n\n/**\n * Set an artificial limit on the amount of memory that can be\n * allocated.\n *\n * @param alloc_count    Number of allocations that are possible after\n *                       this call.  For example, if this has a value\n *                       of 3, malloc() can be called successfully\n *                       three times, but all allocation attempts\n *                       after this will fail.  If this has a negative\n *                       value, the allocation limit is disabled.\n */\n\nvoid alloc_test_set_limit(signed int alloc_count);\n\n/**\n * Get a count of the number of bytes currently allocated.\n *\n * @return               The number of bytes currently allocated by\n *                       the allocation system.\n */\n\nsize_t alloc_test_get_allocated(void);\n\n#endif /* #ifndef ALLOC_TESTING_H */\n\n/*\n\nCopyright (c) 2005-2008, Simon Howard\n\nPermission to use, copy, modify, and/or distribute this software\nfor any purpose with or without fee is hereby granted, provided\nthat the above copyright notice and this permission notice appear\nin all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL\nWARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE\nAUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR\nCONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,\nNEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN\nCONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n\n */\n\n#ifndef TEST_FRAMEWORK_H\n#define TEST_FRAMEWORK_H\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n/**\n * @file framework.h\n *\n * @brief Framework for running unit tests.\n */\n\n/**\n * A unit test.\n */\n\ntypedef void (*UnitTestFunction)(void);\n\n/**\n * Run a list of unit tests.  The provided array contains a list of\n * pointers to test functions to invoke; the last entry is denoted\n * by a NULL pointer.\n *\n * @param tests          List of tests to invoke.\n */\n\nvoid run_tests(UnitTestFunction *tests);\n\n#ifdef __cplusplus\n}\n#endif\n\n#endif /* #ifndef TEST_FRAMEWORK_H */\n\n\n_Atomic size_t num_assert = 0;\n#undef assert\n#define assert(expr)                                                           \\\n  num_assert += 1;                                                             \\\n  ((void)sizeof((expr) ? 1 : 0), __extension__({                               \\\n     if (expr)                                                                 \\\n       ; /* empty */                                                           \\\n     else                                                                      \\\n       __assert_fail(#expr, __FILE__, __LINE__, __ASSERT_FUNCTION);            \\\n   }))\n\n/*\n\nCopyright (c) 2005-2008, Simon Howard\n\nPermission to use, copy, modify, and/or distribute this software\nfor any purpose with or without fee is hereby granted, provided\nthat the above copyright notice and this permission notice appear\nin all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL\nWARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE\nAUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR\nCONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,\nNEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN\nCONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n\n */\n\n/**\n * @file binary-heap.h\n *\n * @brief Binary heap.\n *\n * A binary heap is a heap data structure implemented using a\n * binary tree.  In a heap, values are ordered by priority.\n *\n * To create a binary heap, use @ref binary_heap_new.  To destroy a\n * binary heap, use @ref binary_heap_free.\n *\n * To insert a value into a binary heap, use @ref binary_heap_insert.\n *\n * To remove the first value from a binary heap, use @ref binary_heap_pop.\n *\n */\n\n#ifndef ALGORITHM_BINARY_HEAP_H\n#define ALGORITHM_BINARY_HEAP_H\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n/**\n * Heap type.  If a heap is a min heap (@ref BINARY_HEAP_TYPE_MIN), the\n * values with the lowest priority are stored at the top of the heap and\n * will be the first returned.  If a heap is a max heap\n * (@ref BINARY_HEAP_TYPE_MAX), the values with the greatest priority are\n * stored at the top of the heap.\n */\n\ntypedef enum {\n\t/** A minimum heap. */\n\n\tBINARY_HEAP_TYPE_MIN,\n\n\t/** A maximum heap. */\n\n\tBINARY_HEAP_TYPE_MAX\n} BinaryHeapType;\n\n/**\n * A value stored in a @ref BinaryHeap.\n */\n\ntypedef void *BinaryHeapValue;\n\n/**\n * A null @ref BinaryHeapValue.\n */\n\n#define BINARY_HEAP_NULL ((void *) 0)\n\n/**\n * Type of function used to compare values in a binary heap.\n *\n * @param value1           The first value.\n * @param value2           The second value.\n * @return                 A negative number if value1 is less than value2,\n *                         a positive number if value1 is greater than value2,\n *                         zero if the two are equal.\n */\n\ntypedef int (*BinaryHeapCompareFunc)(BinaryHeapValue value1,\n                                     BinaryHeapValue value2);\n\n/**\n * A binary heap data structure.\n */\n\ntypedef struct _BinaryHeap BinaryHeap;\n\n/**\n * Create a new @ref BinaryHeap.\n *\n * @param heap_type        The type of heap: min heap or max heap.\n * @param compare_func     Pointer to a function used to compare the priority\n *                         of values in the heap.\n * @return                 A new binary heap, or NULL if it was not possible\n *                         to allocate the memory.\n */\n\nBinaryHeap *binary_heap_new(BinaryHeapType heap_type,\n                            BinaryHeapCompareFunc compare_func);\n\n/**\n * Destroy a binary heap.\n *\n * @param heap             The heap to destroy.\n */\n\nvoid binary_heap_free(BinaryHeap *heap);\n\n/**\n * Insert a value into a binary heap.\n *\n * @param heap             The heap to insert into.\n * @param value            The value to insert.\n * @return                 Non-zero if the entry was added, or zero if it\n *                         was not possible to allocate memory for the new\n *                         entry.\n */\n\nint binary_heap_insert(BinaryHeap *heap, BinaryHeapValue value);\n\n/**\n * Remove the first value from a binary heap.\n *\n * @param heap             The heap.\n * @return                 The first value in the heap, or\n *                         @ref BINARY_HEAP_NULL if the heap is empty.\n */\n\nBinaryHeapValue binary_heap_pop(BinaryHeap *heap);\n\n/**\n * Find the number of values stored in a binary heap.\n *\n * @param heap             The heap.\n * @return                 The number of values in the heap.\n */\n\nunsigned int binary_heap_num_entries(BinaryHeap *heap);\n\n#ifdef __cplusplus\n}\n#endif\n\n#endif /* #ifndef ALGORITHM_BINARY_HEAP_H */\n\n/*\n\nCopyright (c) 2005-2008, Simon Howard\n\nPermission to use, copy, modify, and/or distribute this software\nfor any purpose with or without fee is hereby granted, provided\nthat the above copyright notice and this permission notice appear\nin all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL\nWARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE\nAUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR\nCONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,\nNEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN\nCONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n\n */\n\n/**\n * @file compare-int.h\n *\n * Comparison functions for pointers to integers.\n *\n * To find the difference between two values pointed at, use\n * @ref int_compare.\n *\n * To find if two values pointed at are equal, use @ref int_equal.\n */\n\n#ifndef ALGORITHM_COMPARE_INT_H\n#define ALGORITHM_COMPARE_INT_H\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n/**\n * Compare the integer values pointed at by two pointers to determine\n * if they are equal.\n *\n * @param location1       Pointer to the first value to compare.\n * @param location2       Pointer to the second value to compare.\n * @return                Non-zero if the two values are equal, zero if the\n *                        two values are not equal.\n */\n\nint int_equal(void *location1, void *location2);\n\n/**\n * Compare the integer values pointed at by two pointers.\n *\n * @param location1        Pointer to the first value to compare.\n * @param location2        Pointer to the second value to compare.\n * @return                 A negative value if the first value is less than\n *                         the second value, a positive value if the first\n *                         value is greater than the second value, zero if\n *                         they are equal.\n */\n\nint int_compare(void *location1, void *location2);\n\n#ifdef __cplusplus\n}\n#endif\n\n#endif /* #ifndef ALGORITHM_COMPARE_INT_H */\n\n\n#define NUM_TEST_VALUES 10000\n\nint test_array[NUM_TEST_VALUES];\n\n\n\n\n\n/* Test out of memory scenario when adding items */\n\n\nstatic UnitTestFunction tests[] = {\n\ttest_binary_heap_new_free,\n\ttest_binary_heap_insert,\n\ttest_min_heap,\n\ttest_max_heap,\n\ttest_out_of_memory,\n\tNULL\n};\n\n\n]"
}