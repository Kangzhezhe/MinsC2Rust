{
    "test_queue_peek_tail": "void test_queue_peek_tail(void)\n{\n\tQueue *queue;\n\n\t/* Check peeking into an empty queue */\n\n\tqueue = queue_new();\n\n\tassert(queue_peek_tail(queue) == NULL);\n\n\tqueue_free(queue);\n\n\t/* Pop off all the values from the queue, making sure that peek\n\t * has the correct value beforehand */\n\n\tqueue = generate_queue();\n\n\twhile (!queue_is_empty(queue)) {\n\t\tassert(queue_peek_tail(queue) == &variable1);\n\t\tassert(queue_pop_tail(queue) == &variable1);\n\t\tassert(queue_peek_tail(queue) == &variable2);\n\t\tassert(queue_pop_tail(queue) == &variable2);\n\t\tassert(queue_peek_tail(queue) == &variable3);\n\t\tassert(queue_pop_tail(queue) == &variable3);\n\t\tassert(queue_peek_tail(queue) == &variable4);\n\t\tassert(queue_pop_tail(queue) == &variable4);\n\t}\n\n\tassert(queue_peek_tail(queue) == NULL);\n\n\tqueue_free(queue);\n}\n",
    "test_queue_is_empty": "void test_queue_is_empty(void)\n{\n\tQueue *queue;\n\n\tqueue = queue_new();\n\n\tassert(queue_is_empty(queue));\n\n\tqueue_push_head(queue, &variable1);\n\n\tassert(!queue_is_empty(queue));\n\n\tqueue_pop_head(queue);\n\n\tassert(queue_is_empty(queue));\n\n\tqueue_push_tail(queue, &variable1);\n\n\tassert(!queue_is_empty(queue));\n\n\tqueue_pop_tail(queue);\n\n\tassert(queue_is_empty(queue));\n\n\tqueue_free(queue);\n}\n",
    "test_queue_new_free": "void test_queue_new_free(void)\n{\n\tint i;\n\tQueue *queue;\n\n\t/* Create and destroy a queue */\n\n\tqueue = queue_new();\n\n\tqueue_free(queue);\n\n\t/* Add lots of values and then destroy */\n\n\tqueue = queue_new();\n\n\tfor (i=0; i<1000; ++i) {\n\t\tqueue_push_head(queue, &variable1);\n\t}\n\n\tqueue_free(queue);\n\n\t/* Test allocation when there is no free memory */\n\n\talloc_test_set_limit(0);\n\tqueue = queue_new();\n\tassert(queue == NULL);\n}\n",
    "test_queue_peek_head": "void test_queue_peek_head(void)\n{\n\tQueue *queue;\n\n\t/* Check peeking into an empty queue */\n\n\tqueue = queue_new();\n\n\tassert(queue_peek_head(queue) == NULL);\n\n\tqueue_free(queue);\n\n\t/* Pop off all the values from the queue, making sure that peek\n\t * has the correct value beforehand */\n\n\tqueue = generate_queue();\n\n\twhile (!queue_is_empty(queue)) {\n\t\tassert(queue_peek_head(queue) == &variable4);\n\t\tassert(queue_pop_head(queue) == &variable4);\n\t\tassert(queue_peek_head(queue) == &variable3);\n\t\tassert(queue_pop_head(queue) == &variable3);\n\t\tassert(queue_peek_head(queue) == &variable2);\n\t\tassert(queue_pop_head(queue) == &variable2);\n\t\tassert(queue_peek_head(queue) == &variable1);\n\t\tassert(queue_pop_head(queue) == &variable1);\n\t}\n\n\tassert(queue_peek_head(queue) == NULL);\n\n\tqueue_free(queue);\n}\n",
    "test_queue_push_tail": "void test_queue_push_tail(void)\n{\n\tQueue *queue;\n\tint i;\n\n\tqueue = queue_new();\n\n\t/* Add some values */\n\n\tfor (i=0; i<1000; ++i) {\n\t\tqueue_push_tail(queue, &variable1);\n\t\tqueue_push_tail(queue, &variable2);\n\t\tqueue_push_tail(queue, &variable3);\n\t\tqueue_push_tail(queue, &variable4);\n\t}\n\n\tassert(!queue_is_empty(queue));\n\n\t/* Check values come out of the head properly */\n\n\tassert(queue_pop_head(queue) == &variable1);\n\tassert(queue_pop_head(queue) == &variable2);\n\tassert(queue_pop_head(queue) == &variable3);\n\tassert(queue_pop_head(queue) == &variable4);\n\n\t/* Check values come back out of the tail properly */\n\n\tassert(queue_pop_tail(queue) == &variable4);\n\tassert(queue_pop_tail(queue) == &variable3);\n\tassert(queue_pop_tail(queue) == &variable2);\n\tassert(queue_pop_tail(queue) == &variable1);\n\n\tqueue_free(queue);\n\n\t/* Test behavior when running out of memory. */\n\n\tqueue = queue_new();\n\n\talloc_test_set_limit(0);\n\tassert(!queue_push_tail(queue, &variable1));\n\n\tqueue_free(queue);\n}\n",
    "main": "int main(int argc, char *argv[])\n{\n\trun_tests(tests);\n  printf(\"num_assert: %lu\\n\", num_assert);\n\treturn 0;\n}\n",
    "test_queue_pop_head": "void test_queue_pop_head(void)\n{\n\tQueue *queue;\n\n\t/* Check popping off an empty queue */\n\n\tqueue = queue_new();\n\n\tassert(queue_pop_head(queue) == NULL);\n\n\tqueue_free(queue);\n\n\t/* Pop off all the values from the queue */\n\n\tqueue = generate_queue();\n\n\twhile (!queue_is_empty(queue)) {\n\t\tassert(queue_pop_head(queue) == &variable4);\n\t\tassert(queue_pop_head(queue) == &variable3);\n\t\tassert(queue_pop_head(queue) == &variable2);\n\t\tassert(queue_pop_head(queue) == &variable1);\n\t}\n\n\tassert(queue_pop_head(queue) == NULL);\n\n\tqueue_free(queue);\n}\n",
    "test_queue_pop_tail": "void test_queue_pop_tail(void)\n{\n\tQueue *queue;\n\n\t/* Check popping off an empty queue */\n\n\tqueue = queue_new();\n\n\tassert(queue_pop_tail(queue) == NULL);\n\n\tqueue_free(queue);\n\n\t/* Pop off all the values from the queue */\n\n\tqueue = generate_queue();\n\n\twhile (!queue_is_empty(queue)) {\n\t\tassert(queue_pop_tail(queue) == &variable1);\n\t\tassert(queue_pop_tail(queue) == &variable2);\n\t\tassert(queue_pop_tail(queue) == &variable3);\n\t\tassert(queue_pop_tail(queue) == &variable4);\n\t}\n\n\tassert(queue_pop_tail(queue) == NULL);\n\n\tqueue_free(queue);\n}\n",
    "test_queue_push_head": "void test_queue_push_head(void)\n{\n\tQueue *queue;\n\tint i;\n\n\tqueue = queue_new();\n\n\t/* Add some values */\n\n\tfor (i=0; i<1000; ++i) {\n\t\tqueue_push_head(queue, &variable1);\n\t\tqueue_push_head(queue, &variable2);\n\t\tqueue_push_head(queue, &variable3);\n\t\tqueue_push_head(queue, &variable4);\n\t}\n\n\tassert(!queue_is_empty(queue));\n\n\t/* Check values come out of the tail properly */\n\n\tassert(queue_pop_tail(queue) == &variable1);\n\tassert(queue_pop_tail(queue) == &variable2);\n\tassert(queue_pop_tail(queue) == &variable3);\n\tassert(queue_pop_tail(queue) == &variable4);\n\n\t/* Check values come back out of the head properly */\n\n\tassert(queue_pop_head(queue) == &variable4);\n\tassert(queue_pop_head(queue) == &variable3);\n\tassert(queue_pop_head(queue) == &variable2);\n\tassert(queue_pop_head(queue) == &variable1);\n\n\tqueue_free(queue);\n\n\t/* Test behavior when running out of memory. */\n\n\tqueue = queue_new();\n\n\talloc_test_set_limit(0);\n\tassert(!queue_push_head(queue, &variable1));\n\n\tqueue_free(queue);\n}\n",
    "generate_queue": "Queue *generate_queue(void)\n{\n\tQueue *queue;\n\tint i;\n\n\tqueue = queue_new();\n\n\t/* Add some values */\n\n\tfor (i=0; i<1000; ++i) {\n\t\tqueue_push_head(queue, &variable1);\n\t\tqueue_push_head(queue, &variable2);\n\t\tqueue_push_head(queue, &variable3);\n\t\tqueue_push_head(queue, &variable4);\n\t}\n\n\treturn queue;\n}\n",
    "extra": "{'num_assert': '_Atomic size_t num_assert = 0;', 'tests': 'static UnitTestFunction tests[] = {\\n\\ttest_queue_new_free,\\n\\ttest_queue_push_head,\\n\\ttest_queue_pop_head,\\n\\ttest_queue_peek_head,\\n\\ttest_queue_push_tail,\\n\\ttest_queue_pop_tail,\\n\\ttest_queue_peek_tail,\\n\\ttest_queue_is_empty,\\n\\tNULL\\n};', 'variable1': 'int variable1, variable2, variable3, variable4;', 'variable2': 'int variable1, variable2, variable3, variable4;', 'variable3': 'int variable1, variable2, variable3, variable4;', 'variable4': 'int variable1, variable2, variable3, variable4;', 'ALGORITHM_QUEUE_H': '#define ALGORITHM_QUEUE_H', 'ALLOC_TESTING_H': '#define ALLOC_TESTING_H', 'QUEUE_NULL': '#define QUEUE_NULL ((void *) 0)', 'TEST_FRAMEWORK_H': '#define TEST_FRAMEWORK_H', 'assert': '#define assert(expr)                                                           \\\\', 'calloc': '#define calloc   alloc_test_calloc', 'free': '#define free     alloc_test_free', 'malloc': '#define malloc   alloc_test_malloc', 'realloc': '#define realloc  alloc_test_realloc', 'strdup': '#define strdup   alloc_test_strdup', 'Queue': 'typedef struct _Queue Queue;', 'QueueValue': 'typedef void *QueueValue;', 'UnitTestFunction': 'typedef void (*UnitTestFunction)(void);'} extract_info: [/*\n\nCopyright (c) 2005-2008, Simon Howard\n\nPermission to use, copy, modify, and/or distribute this software\nfor any purpose with or without fee is hereby granted, provided\nthat the above copyright notice and this permission notice appear\nin all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL\nWARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE\nAUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR\nCONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,\nNEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN\nCONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n\n */\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\n/*\n\nCopyright (c) 2005-2008, Simon Howard\n\nPermission to use, copy, modify, and/or distribute this software\nfor any purpose with or without fee is hereby granted, provided\nthat the above copyright notice and this permission notice appear\nin all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL\nWARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE\nAUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR\nCONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,\nNEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN\nCONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n\n */\n\n/**\n * @file alloc-testing.h\n *\n * @brief Memory allocation testing framework.\n *\n * This file uses the preprocessor to redefine the standard C dynamic memory\n * allocation functions for testing purposes.  This allows checking that\n * code under test correctly frees back all memory allocated, as well as\n * the ability to impose artificial limits on allocation, to test that\n * code correctly handles out-of-memory scenarios.\n */\n\n#ifndef ALLOC_TESTING_H\n#define ALLOC_TESTING_H\n\n/* Don't redefine the functions in the alloc-testing.c, as we need the\n * standard malloc/free functions. */\n\n#ifndef ALLOC_TESTING_C\n#undef malloc\n#define malloc   alloc_test_malloc\n#undef free\n#define free     alloc_test_free\n#undef realloc\n#define realloc  alloc_test_realloc\n#undef calloc\n#define calloc   alloc_test_calloc\n#undef strdup\n#define strdup   alloc_test_strdup\n#endif\n\n/**\n * Allocate a block of memory.\n *\n * @param bytes          Number of bytes to allocate.\n * @return               Pointer to the new block, or NULL if it was not\n *                       possible to allocate the new block.\n */\n\nvoid *alloc_test_malloc(size_t bytes);\n\n/**\n * Free a block of memory.\n *\n * @param ptr            Pointer to the block to free.\n */\n\nvoid alloc_test_free(void *ptr);\n\n/**\n * Reallocate a previously-allocated block to a new size, preserving\n * contents.\n *\n * @param ptr            Pointer to the existing block.\n * @param bytes          Size of the new block, in bytes.\n * @return               Pointer to the new block, or NULL if it was not\n *                       possible to allocate the new block.\n */\n\nvoid *alloc_test_realloc(void *ptr, size_t bytes);\n\n/**\n * Allocate a block of memory for an array of structures, initialising\n * the contents to zero.\n *\n * @param nmemb          Number of structures to allocate for.\n * @param bytes          Size of each structure, in bytes.\n * @return               Pointer to the new memory block for the array,\n *                       or NULL if it was not possible to allocate the\n *                       new block.\n */\n\nvoid *alloc_test_calloc(size_t nmemb, size_t bytes);\n\n/**\n * Allocate a block of memory containing a copy of a string.\n *\n * @param string         The string to copy.\n * @return               Pointer to the new memory block containing the\n *                       copied string, or NULL if it was not possible\n *                       to allocate the new block.\n */\n\nchar *alloc_test_strdup(const char *string);\n\n/**\n * Set an artificial limit on the amount of memory that can be\n * allocated.\n *\n * @param alloc_count    Number of allocations that are possible after\n *                       this call.  For example, if this has a value\n *                       of 3, malloc() can be called successfully\n *                       three times, but all allocation attempts\n *                       after this will fail.  If this has a negative\n *                       value, the allocation limit is disabled.\n */\n\nvoid alloc_test_set_limit(signed int alloc_count);\n\n/**\n * Get a count of the number of bytes currently allocated.\n *\n * @return               The number of bytes currently allocated by\n *                       the allocation system.\n */\n\nsize_t alloc_test_get_allocated(void);\n\n#endif /* #ifndef ALLOC_TESTING_H */\n\n/*\n\nCopyright (c) 2005-2008, Simon Howard\n\nPermission to use, copy, modify, and/or distribute this software\nfor any purpose with or without fee is hereby granted, provided\nthat the above copyright notice and this permission notice appear\nin all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL\nWARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE\nAUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR\nCONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,\nNEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN\nCONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n\n */\n\n#ifndef TEST_FRAMEWORK_H\n#define TEST_FRAMEWORK_H\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n/**\n * @file framework.h\n *\n * @brief Framework for running unit tests.\n */\n\n/**\n * A unit test.\n */\n\ntypedef void (*UnitTestFunction)(void);\n\n/**\n * Run a list of unit tests.  The provided array contains a list of\n * pointers to test functions to invoke; the last entry is denoted\n * by a NULL pointer.\n *\n * @param tests          List of tests to invoke.\n */\n\nvoid run_tests(UnitTestFunction *tests);\n\n#ifdef __cplusplus\n}\n#endif\n\n#endif /* #ifndef TEST_FRAMEWORK_H */\n\n\n_Atomic size_t num_assert = 0;\n#undef assert\n#define assert(expr)                                                           \\\n  num_assert += 1;                                                             \\\n  ((void)sizeof((expr) ? 1 : 0), __extension__({                               \\\n     if (expr)                                                                 \\\n       ; /* empty */                                                           \\\n     else                                                                      \\\n       __assert_fail(#expr, __FILE__, __LINE__, __ASSERT_FUNCTION);            \\\n   }))\n\n/*\n\nCopyright (c) 2005-2008, Simon Howard\n\nPermission to use, copy, modify, and/or distribute this software\nfor any purpose with or without fee is hereby granted, provided\nthat the above copyright notice and this permission notice appear\nin all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL\nWARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE\nAUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR\nCONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,\nNEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN\nCONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n\n */\n\n/**\n * @file queue.h\n *\n * @brief Double-ended queue.\n *\n * A double ended queue stores a list of values in order.  New values\n * can be added and removed from either end of the queue.\n *\n * To create a new queue, use @ref queue_new.  To destroy a queue, use\n * @ref queue_free.\n *\n * To add values to a queue, use @ref queue_push_head and\n * @ref queue_push_tail.\n *\n * To read values from the ends of a queue, use @ref queue_pop_head\n * and @ref queue_pop_tail.  To examine the ends without removing values\n * from the queue, use @ref queue_peek_head and @ref queue_peek_tail.\n *\n */\n\n#ifndef ALGORITHM_QUEUE_H\n#define ALGORITHM_QUEUE_H\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n/**\n * A double-ended queue.\n */\n\ntypedef struct _Queue Queue;\n\n/**\n * A value stored in a @ref Queue.\n */\n\ntypedef void *QueueValue;\n\n/**\n * A null @ref QueueValue.\n */\n\n#define QUEUE_NULL ((void *) 0)\n\n/**\n * Create a new double-ended queue.\n *\n * @return           A new queue, or NULL if it was not possible to allocate\n *                   the memory.\n */\n\nQueue *queue_new(void);\n\n/**\n * Destroy a queue.\n *\n * @param queue      The queue to destroy.\n */\n\nvoid queue_free(Queue *queue);\n\n/**\n * Add a value to the head of a queue.\n *\n * @param queue      The queue.\n * @param data       The value to add.\n * @return           Non-zero if the value was added successfully, or zero\n *                   if it was not possible to allocate the memory for the\n *                   new entry.\n */\n\nint queue_push_head(Queue *queue, QueueValue data);\n\n/**\n * Remove a value from the head of a queue.\n *\n * @param queue      The queue.\n * @return           Value that was at the head of the queue, or\n *                   @ref QUEUE_NULL if the queue is empty.\n */\n\nQueueValue queue_pop_head(Queue *queue);\n\n/**\n * Read value from the head of a queue, without removing it from\n * the queue.\n *\n * @param queue      The queue.\n * @return           Value at the head of the queue, or @ref QUEUE_NULL if the\n *                   queue is empty.\n */\n\nQueueValue queue_peek_head(Queue *queue);\n\n/**\n * Add a value to the tail of a queue.\n *\n * @param queue      The queue.\n * @param data       The value to add.\n * @return           Non-zero if the value was added successfully, or zero\n *                   if it was not possible to allocate the memory for the\n *                   new entry.\n */\n\nint queue_push_tail(Queue *queue, QueueValue data);\n\n/**\n * Remove a value from the tail of a queue.\n *\n * @param queue      The queue.\n * @return           Value that was at the head of the queue, or\n *                   @ref QUEUE_NULL if the queue is empty.\n */\n\nQueueValue queue_pop_tail(Queue *queue);\n\n/**\n * Read a value from the tail of a queue, without removing it from\n * the queue.\n *\n * @param queue      The queue.\n * @return           Value at the tail of the queue, or QUEUE_NULL if the\n *                   queue is empty.\n */\n\nQueueValue queue_peek_tail(Queue *queue);\n\n/**\n * Query if any values are currently in a queue.\n *\n * @param queue      The queue.\n * @return           Zero if the queue is not empty, non-zero if the queue\n *                   is empty.\n */\n\nint queue_is_empty(Queue *queue);\n\n#ifdef __cplusplus\n}\n#endif\n\n#endif /* #ifndef ALGORITHM_QUEUE_H */\n\n\nint variable1, variable2, variable3, variable4;\n\n\n/* Test cases for the queue */\n\n\n\n\n\n\n\n\n\nstatic UnitTestFunction tests[] = {\n\ttest_queue_new_free,\n\ttest_queue_push_head,\n\ttest_queue_pop_head,\n\ttest_queue_peek_head,\n\ttest_queue_push_tail,\n\ttest_queue_pop_tail,\n\ttest_queue_peek_tail,\n\ttest_queue_is_empty,\n\tNULL\n};\n\n\n]"
}