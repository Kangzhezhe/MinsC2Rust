{
    "rgba_from_hex6_string": "rgba_from_hex6_string(const char *str) {\n  return rgba_from_rgb(\n    (h(str[0]) << 4) + h(str[1]),\n    (h(str[2]) << 4) + h(str[3]),\n    (h(str[4]) << 4) + h(str[5]));\n}\n",
    "rgba_from_rgba": "rgba_from_rgba(uint8_t r, uint8_t g, uint8_t b, uint8_t a) {\n  return\n      r << 24\n    | g << 16\n    | b << 8\n    | a;\n}\n",
    "rgba_new": "rgba_new(uint32_t rgba) {\n  rgba_t color;\n  color.r = (double) (rgba >> 24) / 255;\n  color.g = (double) (rgba >> 16 & 0xff) / 255;\n  color.b = (double) (rgba >> 8 & 0xff) / 255;\n  color.a = (double) (rgba & 0xff) / 255;\n  return color;\n}\n",
    "rgba_from_rgb": "rgba_from_rgb(uint8_t r, uint8_t g, uint8_t b) {\n  return rgba_from_rgba(r, g, b, 255);\n}\n",
    "rgba_from_name_string": "rgba_from_name_string(const char *str, short *ok) {\n  // TODO: hash\n  int i = 0;\n  struct named_color color;\n  while ((color = named_colors[i++]).name) {\n    if (*str == *color.name && 0 == strcmp(str, color.name))\n      return *ok = 1, color.val;\n  }\n  return *ok = 0;\n}\n",
    "rgba_to_string": "rgba_to_string(rgba_t rgba, char *buf, size_t len) {\n  if (1 == rgba.a) {\n    snprintf(buf, len, \"#%.2x%.2x%.2x\",\n      (int) (rgba.r * 255),\n      (int) (rgba.g * 255),\n      (int) (rgba.b * 255));\n  } else {\n    snprintf(buf, len, \"rgba(%d, %d, %d, %.2f)\",\n      (int) (rgba.r * 255),\n      (int) (rgba.g * 255),\n      (int) (rgba.b * 255),\n      rgba.a);\n  }\n",
    "rgba_from_hex3_string": "rgba_from_hex3_string(const char *str) {\n  return rgba_from_rgb(\n    (h(str[0]) << 4) + h(str[0]),\n    (h(str[1]) << 4) + h(str[1]),\n    (h(str[2]) << 4) + h(str[2]));\n}\n",
    "rgba_from_string": "rgba_from_string(const char *str, short *ok) {\n  if ('#' == str[0])  return rgba_from_hex_string(++str, ok);\n  if (str == strstr(str, \"rgba\")) return rgba_from_rgba_string(str, ok);\n  if (str == strstr(str, \"rgb\")) return rgba_from_rgb_string(str, ok);\n  return rgba_from_name_string(str, ok);\n}\n",
    "h": "h(char c) {\n  switch (c) {\n    case '0':\n    case '1':\n    case '2':\n    case '3':\n    case '4':\n    case '5':\n    case '6':\n    case '7':\n    case '8':\n    case '9':\n      return c - '0';\n    case 'a':\n    case 'b':\n    case 'c':\n    case 'd':\n    case 'e':\n    case 'f':\n      return (c - 'a') + 10;\n    case 'A':\n    case 'B':\n    case 'C':\n    case 'D':\n    case 'E':\n    case 'F':\n      return (c - 'A') + 10;\n  }\n  return 0;\n}\n",
    "rgba_from_rgba_string": "rgba_from_rgba_string(const char *str, short *ok) {\n  if (str == strstr(str, \"rgba(\")) {\n    str += 5;\n    WHITESPACE;\n    uint8_t r = 0, g = 0, b = 0;\n    int c;\n    float a = 0;\n    CHANNEL(r);\n    CHANNEL(g);\n    CHANNEL(b);\n    if (*str >= '1' && *str <= '9') {\n      a = 1;\n    } else {\n      if ('0' == *str) ++str;\n      if ('.' == *str) {\n        ++str;\n        float n = .1;\n        while (*str >= '0' && *str <= '9') {\n          a += (*str++ - '0') * n;\n          n *= .1;\n        }\n      }\n    }\n    return *ok = 1, rgba_from_rgba(r, g, b, (int) (a * 255));\n  }\n  return *ok = 0;\n}\n",
    "rgba_from_hex_string": "rgba_from_hex_string(const char *str, short *ok) {\n  size_t len = strlen(str);\n  *ok = 1;\n  if (6 == len) return rgba_from_hex6_string(str);\n  if (3 == len) return rgba_from_hex3_string(str);\n  return *ok = 0;\n}\n",
    "rgba_inspect": "rgba_inspect(uint32_t rgba) {\n  printf(\"rgba(%d,%d,%d,%d)\\n\",\n    rgba >> 24 & 0xff,\n    rgba >> 16 & 0xff,\n    rgba >> 8 & 0xff,\n    rgba & 0xff);\n}",
    "rgba_from_rgb_string": "rgba_from_rgb_string(const char *str, short *ok) {\n  if (str == strstr(str, \"rgb(\")) {\n    str += 4;\n    WHITESPACE;\n    uint8_t r = 0, g = 0, b = 0;\n    int c;\n    CHANNEL(r);\n    CHANNEL(g);\n    CHANNEL(b);\n    return *ok = 1, rgba_from_rgb(r, g, b);\n  }\n  return *ok = 0;\n}\n",
    "extra": "{'__anona18e5f770108': 'typedef struct {\\n  double r, g, b, a;\\n};', 'named_color': 'static struct named_color {\\n  const char *name;\\n  uint32_t val;\\n};', 'named_colors': '} named_colors[] = {\\n    { \"transparent\", 0xFFFFFF00}\\n  , { \"aliceblue\", 0xF0F8FFFF }\\n  , { \"antiquewhite\", 0xFAEBD7FF }\\n  , { \"aqua\", 0x00FFFFFF }\\n  , { \"aquamarine\", 0x7FFFD4FF }\\n  , { \"azure\", 0xF0FFFFFF }\\n  , { \"beige\", 0xF5F5DCFF }\\n  , { \"bisque\", 0xFFE4C4FF }\\n  , { \"black\", 0x000000FF }\\n  , { \"blanchedalmond\", 0xFFEBCDFF }\\n  , { \"blue\", 0x0000FFFF }\\n  , { \"blueviolet\", 0x8A2BE2FF }\\n  , { \"brown\", 0xA52A2AFF }\\n  , { \"burlywood\", 0xDEB887FF }\\n  , { \"cadetblue\", 0x5F9EA0FF }\\n  , { \"chartreuse\", 0x7FFF00FF }\\n  , { \"chocolate\", 0xD2691EFF }\\n  , { \"coral\", 0xFF7F50FF }\\n  , { \"cornflowerblue\", 0x6495EDFF }\\n  , { \"cornsilk\", 0xFFF8DCFF }\\n  , { \"crimson\", 0xDC143CFF }\\n  , { \"cyan\", 0x00FFFFFF }\\n  , { \"darkblue\", 0x00008BFF }\\n  , { \"darkcyan\", 0x008B8BFF }\\n  , { \"darkgoldenrod\", 0xB8860BFF }\\n  , { \"darkgray\", 0xA9A9A9FF }\\n  , { \"darkgreen\", 0x006400FF }\\n  , { \"darkgrey\", 0xA9A9A9FF }\\n  , { \"darkkhaki\", 0xBDB76BFF }\\n  , { \"darkmagenta\", 0x8B008BFF }\\n  , { \"darkolivegreen\", 0x556B2FFF }\\n  , { \"darkorange\", 0xFF8C00FF }\\n  , { \"darkorchid\", 0x9932CCFF }\\n  , { \"darkred\", 0x8B0000FF }\\n  , { \"darksalmon\", 0xE9967AFF }\\n  , { \"darkseagreen\", 0x8FBC8FFF }\\n  , { \"darkslateblue\", 0x483D8BFF }\\n  , { \"darkslategray\", 0x2F4F4FFF }\\n  , { \"darkslategrey\", 0x2F4F4FFF }\\n  , { \"darkturquoise\", 0x00CED1FF }\\n  , { \"darkviolet\", 0x9400D3FF }\\n  , { \"deeppink\", 0xFF1493FF }\\n  , { \"deepskyblue\", 0x00BFFFFF }\\n  , { \"dimgray\", 0x696969FF }\\n  , { \"dimgrey\", 0x696969FF }\\n  , { \"dodgerblue\", 0x1E90FFFF }\\n  , { \"firebrick\", 0xB22222FF }\\n  , { \"floralwhite\", 0xFFFAF0FF }\\n  , { \"forestgreen\", 0x228B22FF }\\n  , { \"fuchsia\", 0xFF00FFFF }\\n  , { \"gainsboro\", 0xDCDCDCFF }\\n  , { \"ghostwhite\", 0xF8F8FFFF }\\n  , { \"gold\", 0xFFD700FF }\\n  , { \"goldenrod\", 0xDAA520FF }\\n  , { \"gray\", 0x808080FF }\\n  , { \"green\", 0x008000FF }\\n  , { \"greenyellow\", 0xADFF2FFF }\\n  , { \"grey\", 0x808080FF }\\n  , { \"honeydew\", 0xF0FFF0FF }\\n  , { \"hotpink\", 0xFF69B4FF }\\n  , { \"indianred\", 0xCD5C5CFF }\\n  , { \"indigo\", 0x4B0082FF }\\n  , { \"ivory\", 0xFFFFF0FF }\\n  , { \"khaki\", 0xF0E68CFF }\\n  , { \"lavender\", 0xE6E6FAFF }\\n  , { \"lavenderblush\", 0xFFF0F5FF }\\n  , { \"lawngreen\", 0x7CFC00FF }\\n  , { \"lemonchiffon\", 0xFFFACDFF }\\n  , { \"lightblue\", 0xADD8E6FF }\\n  , { \"lightcoral\", 0xF08080FF }\\n  , { \"lightcyan\", 0xE0FFFFFF }\\n  , { \"lightgoldenrodyellow\", 0xFAFAD2FF }\\n  , { \"lightgray\", 0xD3D3D3FF }\\n  , { \"lightgreen\", 0x90EE90FF }\\n  , { \"lightgrey\", 0xD3D3D3FF }\\n  , { \"lightpink\", 0xFFB6C1FF }\\n  , { \"lightsalmon\", 0xFFA07AFF }\\n  , { \"lightseagreen\", 0x20B2AAFF }\\n  , { \"lightskyblue\", 0x87CEFAFF }\\n  , { \"lightslategray\", 0x778899FF }\\n  , { \"lightslategrey\", 0x778899FF }\\n  , { \"lightsteelblue\", 0xB0C4DEFF }\\n  , { \"lightyellow\", 0xFFFFE0FF }\\n  , { \"lime\", 0x00FF00FF }\\n  , { \"limegreen\", 0x32CD32FF }\\n  , { \"linen\", 0xFAF0E6FF }\\n  , { \"magenta\", 0xFF00FFFF }\\n  , { \"maroon\", 0x800000FF }\\n  , { \"mediumaquamarine\", 0x66CDAAFF }\\n  , { \"mediumblue\", 0x0000CDFF }\\n  , { \"mediumorchid\", 0xBA55D3FF }\\n  , { \"mediumpurple\", 0x9370DBFF }\\n  , { \"mediumseagreen\", 0x3CB371FF }\\n  , { \"mediumslateblue\", 0x7B68EEFF }\\n  , { \"mediumspringgreen\", 0x00FA9AFF }\\n  , { \"mediumturquoise\", 0x48D1CCFF }\\n  , { \"mediumvioletred\", 0xC71585FF }\\n  , { \"midnightblue\", 0x191970FF }\\n  , { \"mintcream\", 0xF5FFFAFF }\\n  , { \"mistyrose\", 0xFFE4E1FF }\\n  , { \"moccasin\", 0xFFE4B5FF }\\n  , { \"navajowhite\", 0xFFDEADFF }\\n  , { \"navy\", 0x000080FF }\\n  , { \"oldlace\", 0xFDF5E6FF }\\n  , { \"olive\", 0x808000FF }\\n  , { \"olivedrab\", 0x6B8E23FF }\\n  , { \"orange\", 0xFFA500FF }\\n  , { \"orangered\", 0xFF4500FF }\\n  , { \"orchid\", 0xDA70D6FF }\\n  , { \"palegoldenrod\", 0xEEE8AAFF }\\n  , { \"palegreen\", 0x98FB98FF }\\n  , { \"paleturquoise\", 0xAFEEEEFF }\\n  , { \"palevioletred\", 0xDB7093FF }\\n  , { \"papayawhip\", 0xFFEFD5FF }\\n  , { \"peachpuff\", 0xFFDAB9FF }\\n  , { \"peru\", 0xCD853FFF }\\n  , { \"pink\", 0xFFC0CBFF }\\n  , { \"plum\", 0xDDA0DDFF }\\n  , { \"powderblue\", 0xB0E0E6FF }\\n  , { \"purple\", 0x800080FF }\\n  , { \"red\", 0xFF0000FF }\\n  , { \"rosybrown\", 0xBC8F8FFF }\\n  , { \"royalblue\", 0x4169E1FF }\\n  , { \"saddlebrown\", 0x8B4513FF }\\n  , { \"salmon\", 0xFA8072FF }\\n  , { \"sandybrown\", 0xF4A460FF }\\n  , { \"seagreen\", 0x2E8B57FF }\\n  , { \"seashell\", 0xFFF5EEFF }\\n  , { \"sienna\", 0xA0522DFF }\\n  , { \"silver\", 0xC0C0C0FF }\\n  , { \"skyblue\", 0x87CEEBFF }\\n  , { \"slateblue\", 0x6A5ACDFF }\\n  , { \"slategray\", 0x708090FF }\\n  , { \"slategrey\", 0x708090FF }\\n  , { \"snow\", 0xFFFAFAFF }\\n  , { \"springgreen\", 0x00FF7FFF }\\n  , { \"steelblue\", 0x4682B4FF }\\n  , { \"tan\", 0xD2B48CFF }\\n  , { \"teal\", 0x008080FF }\\n  , { \"thistle\", 0xD8BFD8FF }\\n  , { \"tomato\", 0xFF6347FF }\\n  , { \"turquoise\", 0x40E0D0FF }\\n  , { \"violet\", 0xEE82EEFF }\\n  , { \"wheat\", 0xF5DEB3FF }\\n  , { \"white\", 0xFFFFFFFF }\\n  , { \"whitesmoke\", 0xF5F5F5FF }\\n  , { \"yellow\", 0xFFFF00FF }\\n  , { \"yellowgreen\", 0x9ACD32FF }\\n  , { NULL, 0 }\\n};', 'CHANNEL': '#define CHANNEL(NAME) \\\\', 'RGBA_H': '#define RGBA_H', 'WHITESPACE': '#define WHITESPACE \\\\', 'rgba_t': '} rgba_t;'} extract_info: [\n//\n// rgba.c\n//\n// Copyright (c) 2012 TJ Holowaychuk <tj@vision-media.ca>\n//\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n//\n// rgba.h\n//\n// Copyright (c) 2012 TJ Holowaychuk <tj@vision-media.ca>\n//\n\n#ifndef RGBA_H\n#define RGBA_H\n\n#include <stdint.h>\n\n/*\n * RGBA struct.\n */\n\ntypedef struct {\n  double r, g, b, a;\n} rgba_t;\n\n// protos\n\nrgba_t\nrgba_new(uint32_t rgba);\n\nuint32_t\nrgba_from_string(const char *str, short *ok);\n\nvoid\nrgba_to_string(rgba_t rgba, char *buf, size_t len);\n\nvoid\nrgba_inspect(uint32_t rgba);\n\n#endif /* RGBA_H */\n/*\n * Consume whitespace.\n */\n\n#define WHITESPACE \\\n  while (' ' == *str) ++str;\n\n/*\n * Parse color channel value\n */\n\n#define CHANNEL(NAME) \\\n   c = 0; \\\n   if (*str >= '0' && *str <= '9') { \\\n     do { \\\n       c *= 10; \\\n       c += *str++ - '0'; \\\n     } while (*str >= '0' && *str <= '9'); \\\n   } else { \\\n     return 0; \\\n   } \\\n   if (c > 255) c = 255; \\\n   NAME = c; \\\n   while (' ' == *str || ',' == *str) str++;\n\n/*\n * Named colors.\n */\n\nstatic struct named_color {\n  const char *name;\n  uint32_t val;\n} named_colors[] = {\n    { \"transparent\", 0xFFFFFF00}\n  , { \"aliceblue\", 0xF0F8FFFF }\n  , { \"antiquewhite\", 0xFAEBD7FF }\n  , { \"aqua\", 0x00FFFFFF }\n  , { \"aquamarine\", 0x7FFFD4FF }\n  , { \"azure\", 0xF0FFFFFF }\n  , { \"beige\", 0xF5F5DCFF }\n  , { \"bisque\", 0xFFE4C4FF }\n  , { \"black\", 0x000000FF }\n  , { \"blanchedalmond\", 0xFFEBCDFF }\n  , { \"blue\", 0x0000FFFF }\n  , { \"blueviolet\", 0x8A2BE2FF }\n  , { \"brown\", 0xA52A2AFF }\n  , { \"burlywood\", 0xDEB887FF }\n  , { \"cadetblue\", 0x5F9EA0FF }\n  , { \"chartreuse\", 0x7FFF00FF }\n  , { \"chocolate\", 0xD2691EFF }\n  , { \"coral\", 0xFF7F50FF }\n  , { \"cornflowerblue\", 0x6495EDFF }\n  , { \"cornsilk\", 0xFFF8DCFF }\n  , { \"crimson\", 0xDC143CFF }\n  , { \"cyan\", 0x00FFFFFF }\n  , { \"darkblue\", 0x00008BFF }\n  , { \"darkcyan\", 0x008B8BFF }\n  , { \"darkgoldenrod\", 0xB8860BFF }\n  , { \"darkgray\", 0xA9A9A9FF }\n  , { \"darkgreen\", 0x006400FF }\n  , { \"darkgrey\", 0xA9A9A9FF }\n  , { \"darkkhaki\", 0xBDB76BFF }\n  , { \"darkmagenta\", 0x8B008BFF }\n  , { \"darkolivegreen\", 0x556B2FFF }\n  , { \"darkorange\", 0xFF8C00FF }\n  , { \"darkorchid\", 0x9932CCFF }\n  , { \"darkred\", 0x8B0000FF }\n  , { \"darksalmon\", 0xE9967AFF }\n  , { \"darkseagreen\", 0x8FBC8FFF }\n  , { \"darkslateblue\", 0x483D8BFF }\n  , { \"darkslategray\", 0x2F4F4FFF }\n  , { \"darkslategrey\", 0x2F4F4FFF }\n  , { \"darkturquoise\", 0x00CED1FF }\n  , { \"darkviolet\", 0x9400D3FF }\n  , { \"deeppink\", 0xFF1493FF }\n  , { \"deepskyblue\", 0x00BFFFFF }\n  , { \"dimgray\", 0x696969FF }\n  , { \"dimgrey\", 0x696969FF }\n  , { \"dodgerblue\", 0x1E90FFFF }\n  , { \"firebrick\", 0xB22222FF }\n  , { \"floralwhite\", 0xFFFAF0FF }\n  , { \"forestgreen\", 0x228B22FF }\n  , { \"fuchsia\", 0xFF00FFFF }\n  , { \"gainsboro\", 0xDCDCDCFF }\n  , { \"ghostwhite\", 0xF8F8FFFF }\n  , { \"gold\", 0xFFD700FF }\n  , { \"goldenrod\", 0xDAA520FF }\n  , { \"gray\", 0x808080FF }\n  , { \"green\", 0x008000FF }\n  , { \"greenyellow\", 0xADFF2FFF }\n  , { \"grey\", 0x808080FF }\n  , { \"honeydew\", 0xF0FFF0FF }\n  , { \"hotpink\", 0xFF69B4FF }\n  , { \"indianred\", 0xCD5C5CFF }\n  , { \"indigo\", 0x4B0082FF }\n  , { \"ivory\", 0xFFFFF0FF }\n  , { \"khaki\", 0xF0E68CFF }\n  , { \"lavender\", 0xE6E6FAFF }\n  , { \"lavenderblush\", 0xFFF0F5FF }\n  , { \"lawngreen\", 0x7CFC00FF }\n  , { \"lemonchiffon\", 0xFFFACDFF }\n  , { \"lightblue\", 0xADD8E6FF }\n  , { \"lightcoral\", 0xF08080FF }\n  , { \"lightcyan\", 0xE0FFFFFF }\n  , { \"lightgoldenrodyellow\", 0xFAFAD2FF }\n  , { \"lightgray\", 0xD3D3D3FF }\n  , { \"lightgreen\", 0x90EE90FF }\n  , { \"lightgrey\", 0xD3D3D3FF }\n  , { \"lightpink\", 0xFFB6C1FF }\n  , { \"lightsalmon\", 0xFFA07AFF }\n  , { \"lightseagreen\", 0x20B2AAFF }\n  , { \"lightskyblue\", 0x87CEFAFF }\n  , { \"lightslategray\", 0x778899FF }\n  , { \"lightslategrey\", 0x778899FF }\n  , { \"lightsteelblue\", 0xB0C4DEFF }\n  , { \"lightyellow\", 0xFFFFE0FF }\n  , { \"lime\", 0x00FF00FF }\n  , { \"limegreen\", 0x32CD32FF }\n  , { \"linen\", 0xFAF0E6FF }\n  , { \"magenta\", 0xFF00FFFF }\n  , { \"maroon\", 0x800000FF }\n  , { \"mediumaquamarine\", 0x66CDAAFF }\n  , { \"mediumblue\", 0x0000CDFF }\n  , { \"mediumorchid\", 0xBA55D3FF }\n  , { \"mediumpurple\", 0x9370DBFF }\n  , { \"mediumseagreen\", 0x3CB371FF }\n  , { \"mediumslateblue\", 0x7B68EEFF }\n  , { \"mediumspringgreen\", 0x00FA9AFF }\n  , { \"mediumturquoise\", 0x48D1CCFF }\n  , { \"mediumvioletred\", 0xC71585FF }\n  , { \"midnightblue\", 0x191970FF }\n  , { \"mintcream\", 0xF5FFFAFF }\n  , { \"mistyrose\", 0xFFE4E1FF }\n  , { \"moccasin\", 0xFFE4B5FF }\n  , { \"navajowhite\", 0xFFDEADFF }\n  , { \"navy\", 0x000080FF }\n  , { \"oldlace\", 0xFDF5E6FF }\n  , { \"olive\", 0x808000FF }\n  , { \"olivedrab\", 0x6B8E23FF }\n  , { \"orange\", 0xFFA500FF }\n  , { \"orangered\", 0xFF4500FF }\n  , { \"orchid\", 0xDA70D6FF }\n  , { \"palegoldenrod\", 0xEEE8AAFF }\n  , { \"palegreen\", 0x98FB98FF }\n  , { \"paleturquoise\", 0xAFEEEEFF }\n  , { \"palevioletred\", 0xDB7093FF }\n  , { \"papayawhip\", 0xFFEFD5FF }\n  , { \"peachpuff\", 0xFFDAB9FF }\n  , { \"peru\", 0xCD853FFF }\n  , { \"pink\", 0xFFC0CBFF }\n  , { \"plum\", 0xDDA0DDFF }\n  , { \"powderblue\", 0xB0E0E6FF }\n  , { \"purple\", 0x800080FF }\n  , { \"red\", 0xFF0000FF }\n  , { \"rosybrown\", 0xBC8F8FFF }\n  , { \"royalblue\", 0x4169E1FF }\n  , { \"saddlebrown\", 0x8B4513FF }\n  , { \"salmon\", 0xFA8072FF }\n  , { \"sandybrown\", 0xF4A460FF }\n  , { \"seagreen\", 0x2E8B57FF }\n  , { \"seashell\", 0xFFF5EEFF }\n  , { \"sienna\", 0xA0522DFF }\n  , { \"silver\", 0xC0C0C0FF }\n  , { \"skyblue\", 0x87CEEBFF }\n  , { \"slateblue\", 0x6A5ACDFF }\n  , { \"slategray\", 0x708090FF }\n  , { \"slategrey\", 0x708090FF }\n  , { \"snow\", 0xFFFAFAFF }\n  , { \"springgreen\", 0x00FF7FFF }\n  , { \"steelblue\", 0x4682B4FF }\n  , { \"tan\", 0xD2B48CFF }\n  , { \"teal\", 0x008080FF }\n  , { \"thistle\", 0xD8BFD8FF }\n  , { \"tomato\", 0xFF6347FF }\n  , { \"turquoise\", 0x40E0D0FF }\n  , { \"violet\", 0xEE82EEFF }\n  , { \"wheat\", 0xF5DEB3FF }\n  , { \"white\", 0xFFFFFFFF }\n  , { \"whitesmoke\", 0xF5F5F5FF }\n  , { \"yellow\", 0xFFFF00FF }\n  , { \"yellowgreen\", 0x9ACD32FF }\n  , { NULL, 0 }\n};\n\n/*\n * Hex digit int val.\n */\n\nstatic int\n\n/*\n * Return rgba_t from rgba.\n */\n\nrgba_t\n\n/*\n * Return a string representation of the color.\n */\n\nvoid\n}\n\n/*\n * Return rgba from (r,g,b,a).\n */\n\nstatic inline uint32_t\n\n/*\n * Return rgba from (r,g,b).\n */\n\nstatic int32_t\n\n/*\n * Return rgb from \"#RRGGBB\".\n */\n\nstatic uint32_t\n\n/*\n * Return rgb from \"#RGB\"\n */\n\nstatic int32_t\n\n/*\n * Return rgb from \"rgb()\"\n */\n\nstatic int32_t\n\n/*\n * Return rgb from \"rgba()\"\n */\n\nstatic int32_t\n\n/*\n * Return rgb from:\n *  \n *  - \"#RGB\"\n *  - \"#RRGGBB\"\n *\n */\n\nstatic int32_t\n\n/*\n * Return named color value.\n */\n\nstatic int32_t\n\n/*\n * Return rgb from:\n *  \n *  - #RGB\n *  - #RRGGBB\n *  - rgb(r,g,b)\n *  - rgba(r,g,b,a)\n *  - name\n *\n * or return -1.\n *\n */\n\nuint32_t\n\n/*\n * Inspect the given rgba color.\n */\n\nvoid\n]"
}