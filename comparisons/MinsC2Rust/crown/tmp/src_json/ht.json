{
    "ht_iterator": "hti ht_iterator(ht* table) {\n    hti it;\n    it._table = table;\n    it._index = 0;\n    return it;\n}\n",
    "ht_set": "const char* ht_set(ht* table, const char* key, void* value) {\n    assert(value != NULL);\n    if (value == NULL) {\n        return NULL;\n    }\n\n    // If length will exceed half of current capacity, expand it.\n    if (table->length >= table->capacity / 2) {\n        if (!ht_expand(table)) {\n            return NULL;\n        }\n    }\n\n    // Set entry and update length.\n    return ht_set_entry(table->entries, table->capacity, key, value,\n                        &table->length);\n}\n",
    "ht_destroy": "void ht_destroy(ht* table) {\n    // First free allocated keys.\n    for (size_t i = 0; i < table->capacity; i++) {\n        free((void*)table->entries[i].key);\n    }\n\n    // Then free entries array and table itself.\n    free(table->entries);\n    free(table);\n}\n",
    "ht_get": "void* ht_get(ht* table, const char* key) {\n    // AND hash with capacity-1 to ensure it's within entries array.\n    uint64_t hash = hash_key(key);\n    size_t index = (size_t)(hash & (uint64_t)(table->capacity - 1));\n\n    // Loop till we find an empty entry.\n    while (table->entries[index].key != NULL) {\n        if (strcmp(key, table->entries[index].key) == 0) {\n            // Found key, return value.\n            return table->entries[index].value;\n        }\n        // Key wasn't in this slot, move to next (linear probing).\n        index++;\n        if (index >= table->capacity) {\n            // At end of entries array, wrap around.\n            index = 0;\n        }\n    }\n    return NULL;\n}\n",
    "ht_length": "size_t ht_length(ht* table) {\n    return table->length;\n}\n",
    "ht_expand": "static bool ht_expand(ht* table) {\n    // Allocate new entries array.\n    size_t new_capacity = table->capacity * 2;\n    if (new_capacity < table->capacity) {\n        return false;  // overflow (capacity would be too big)\n    }\n    ht_entry* new_entries = calloc(new_capacity, sizeof(ht_entry));\n    if (new_entries == NULL) {\n        return false;\n    }\n\n    // Iterate entries, move all non-empty ones to new table's entries.\n    for (size_t i = 0; i < table->capacity; i++) {\n        ht_entry entry = table->entries[i];\n        if (entry.key != NULL) {\n            ht_set_entry(new_entries, new_capacity, entry.key,\n                         entry.value, NULL);\n        }\n    }\n\n    // Free old entries array and update this table's details.\n    free(table->entries);\n    table->entries = new_entries;\n    table->capacity = new_capacity;\n    return true;\n}\n",
    "ht_next": "bool ht_next(hti* it) {\n    // Loop till we've hit end of entries array.\n    ht* table = it->_table;\n    while (it->_index < table->capacity) {\n        size_t i = it->_index;\n        it->_index++;\n        if (table->entries[i].key != NULL) {\n            // Found next non-empty item, update iterator key and value.\n            ht_entry entry = table->entries[i];\n            it->key = entry.key;\n            it->value = entry.value;\n            return true;\n        }\n    }\n    return false;\n}\n",
    "ht_create": "ht* ht_create(void) {\n    // Allocate space for hash table struct.\n    ht* table = malloc(sizeof(ht));\n    if (table == NULL) {\n        return NULL;\n    }\n    table->length = 0;\n    table->capacity = INITIAL_CAPACITY;\n\n    // Allocate (zero'd) space for entry buckets.\n    table->entries = calloc(table->capacity, sizeof(ht_entry));\n    if (table->entries == NULL) {\n        free(table); // error, free table before we return!\n        return NULL;\n    }\n    return table;\n}\n",
    "ht_set_entry": "static const char* ht_set_entry(ht_entry* entries, size_t capacity,\n        const char* key, void* value, size_t* plength) {\n    // AND hash with capacity-1 to ensure it's within entries array.\n    uint64_t hash = hash_key(key);\n    size_t index = (size_t)(hash & (uint64_t)(capacity - 1));\n\n    // Loop till we find an empty entry.\n    while (entries[index].key != NULL) {\n        if (strcmp(key, entries[index].key) == 0) {\n            // Found key (it already exists), update value.\n            entries[index].value = value;\n            return entries[index].key;\n        }\n        // Key wasn't in this slot, move to next (linear probing).\n        index++;\n        if (index >= capacity) {\n            // At end of entries array, wrap around.\n            index = 0;\n        }\n    }\n\n    // Didn't find key, allocate+copy if needed, then insert it.\n    if (plength != NULL) {\n        key = strdup(key);\n        if (key == NULL) {\n            return NULL;\n        }\n        (*plength)++;\n    }\n    entries[index].key = (char*)key;\n    entries[index].value = value;\n    return key;\n}\n",
    "hash_key": "static uint64_t hash_key(const char* key) {\n    uint64_t hash = FNV_OFFSET;\n    for (const char* p = key; *p; p++) {\n        hash ^= (uint64_t)(unsigned char)(*p);\n        hash *= FNV_PRIME;\n    }\n    return hash;\n}\n",
    "extra": "{'__anoncbb48c770108': \"typedef struct {\\n    const char* key;  // current key\\n    void* value;      // current value\\n\\n    // Don't use these fields directly.\\n    ht* _table;       // reference to hash table being iterated\\n    size_t _index;    // current index into ht._entries\\n};\", '__anoncbb48c770208': \"typedef struct {\\n    const char* key;  // current key\\n    void* value;      // current value\\n\\n    // Don't use these fields directly.\\n    ht* _table;       // reference to hash table being iterated\\n    size_t _index;    // current index into ht._entries\\n};\", 'ht': 'typedef struct ht ht;', 'FNV_OFFSET': '#define FNV_OFFSET 14695981039346656037UL', 'FNV_PRIME': '#define FNV_PRIME 1099511628211UL', 'INITIAL_CAPACITY': '#define INITIAL_CAPACITY 16  // must not be zero', '_HT_H': '#define _HT_H', 'ht_entry': '} ht_entry;', 'hti': '} hti;'} extract_info: [// Simple hash table implemented in C.\n\n// Simple hash table implemented in C.\n\n#ifndef _HT_H\n#define _HT_H\n\n#include <stdbool.h>\n#include <stddef.h>\n\n// Hash table structure: create with ht_create, free with ht_destroy.\ntypedef struct ht ht;\n\n// Create hash table and return pointer to it, or NULL if out of memory.\nht* ht_create(void);\n\n// Free memory allocated for hash table, including allocated keys.\nvoid ht_destroy(ht* table);\n\n// Get item with given key (NUL-terminated) from hash table. Return\n// value (which was set with ht_set), or NULL if key not found.\nvoid* ht_get(ht* table, const char* key);\n\n// Set item with given key (NUL-terminated) to value (which must not\n// be NULL). If not already present in table, key is copied to newly\n// allocated memory (keys are freed automatically when ht_destroy is\n// called). Return address of copied key, or NULL if out of memory.\nconst char* ht_set(ht* table, const char* key, void* value);\n\n// Return number of items in hash table.\nsize_t ht_length(ht* table);\n\n// Hash table iterator: create with ht_iterator, iterate with ht_next.\ntypedef struct {\n    const char* key;  // current key\n    void* value;      // current value\n\n    // Don't use these fields directly.\n    ht* _table;       // reference to hash table being iterated\n    size_t _index;    // current index into ht._entries\n} hti;\n\n// Return new hash table iterator (for use with ht_next).\nhti ht_iterator(ht* table);\n\n// Move iterator to next item in hash table, update iterator's key\n// and value to current item, and return true. If there are no more\n// items, return false. Don't call ht_set during iteration.\nbool ht_next(hti* it);\n\n#endif // _HT_H\n\n#include <assert.h>\n#include <stdint.h>\n#include <stdlib.h>\n#include <string.h>\n\n// Hash table entry (slot may be filled or empty).\ntypedef struct {\n    const char* key;  // key is NULL if this slot is empty\n    void* value;\n} ht_entry;\n\n// Hash table structure: create with ht_create, free with ht_destroy.\nstruct ht {\n    ht_entry* entries;  // hash slots\n    size_t capacity;    // size of _entries array\n    size_t length;      // number of items in hash table\n};\n\n#define INITIAL_CAPACITY 16  // must not be zero\n\n\n\n#define FNV_OFFSET 14695981039346656037UL\n#define FNV_PRIME 1099511628211UL\n\n// Return 64-bit FNV-1a hash for key (NUL-terminated). See description:\n// https://en.wikipedia.org/wiki/Fowler\u2013Noll\u2013Vo_hash_function\n\n\n// Internal function to set an entry (without expanding table).\n\n// Expand hash table to twice its current size. Return true on success,\n// false if out of memory.\n\n\n\n\n]"
}