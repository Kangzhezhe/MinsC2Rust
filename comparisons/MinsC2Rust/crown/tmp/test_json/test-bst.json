{
    "main": "int main(int argc, char** argv) {\n    test_bst();\n}\n",
    "test_bst": "void test_bst(){\n    struct bst* bst = bst_create();\n    int good_nums[8] = {32, 16, 8, 12, 4, 64, 48, 80};\n    int bad_nums[8] = {1, 3, 5, 7, 9, 11, 13, 15};\n  \n    // Initialize the tree.\n    for (int i = 0; i < 8; i++) {\n      bst_insert(good_nums[i], bst);\n    }\n  \n    // Test containment.\n    for (int i = 0; i < 8; i++) {\n      assert(bst_contains(good_nums[i], bst) == 1);\n    }\n    printf(\"== Verified that BST contains all the expected values.\\n\");\n  \n    for (int i = 0; i < 8; i++) {\n      assert(bst_contains(bad_nums[i], bst) == 0);\n    }\n    printf(\"== Verified that BST contains none of the unexpected values.\\n\");\n  \n    /*\n     * Test removal by removing one good number at a time and making sure the\n     * remaining good numbers are still in the tree.\n     */\n    for (int i = 0; i < 8; i++) {\n      bst_remove(good_nums[i], bst);\n      assert(!bst_contains(good_nums[i], bst));\n      for (int j = i + 1; j < 8; j++) {\n        assert(bst_contains(good_nums[j], bst));\n      }\n    }\n    printf(\"== Verified removal works as expected.\\n\");\n  \n    bst_free(bst);\n}\n",
    "extra": "{'__BST_H': '#define __BST_H'} extract_info: [#include <stdio.h>\n#include <assert.h>\n\n/*\n * A definition for a binary search tree implementation.\n */\n\n#ifndef __BST_H\n#define __BST_H\n\n/*\n * Structure used to represent a binary search tree.\n */\nstruct bst;\n\n/*\n * Creates a new, empty binary search tree and returns a pointer to it.\n */\nstruct bst* bst_create();\n\n/*\n * Free the memory associated with a binary search tree.\n *\n * Params:\n *   bst - the binary search tree to be destroyed\n */\nvoid bst_free(struct bst* bst);\n\n/*\n * Returns 1 if the given binary search tree is empty or 0 otherwise.\n *\n * Params:\n *   bst - the binary search tree whose emptiness is to be checked\n */\nint bst_isempty(struct bst* bst);\n\n/*\n * Inserts a given value into an existing binary search tree.\n *\n * Params:\n *   val - the value to be inserted into the tree\n *   bst - the binary search tree into which to insert val\n */\nvoid bst_insert(int val, struct bst* bst);\n\n/*\n * Removes a given value from an existing binary search tree.  If the\n * specified value is not contained in the specified tree, the tree is not\n * modified.\n *\n * Params:\n *   val - the value to be removed from the tree\n *   bst - the binary search tree from which to remove val\n */\nvoid bst_remove(int val, struct bst* bst);\n\n/*\n * Determines whether a binary search tree contains a given value.\n *\n * Params:\n *   val - the value to be found in the tree\n *   bst - the binary search tree in which to search for val\n *\n * Return:\n *   Returns 1 if bst contains val or 0 otherwise.\n */\nint bst_contains(int val, struct bst* bst);\n\n\n#endif\n\n\n\n]"
}